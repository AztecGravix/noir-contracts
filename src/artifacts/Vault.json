{
  "name": "Vault",
  "functions": [
    {
      "name": "_initialize",
      "functionType": "open",
      "isInternal": true,
      "parameters": [
        {
          "name": "new_admin",
          "type": {
            "kind": "struct",
            "path": "aztec::types::address::AztecAddress",
            "fields": [
              {
                "name": "address",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "private"
        },
        {
          "name": "initial_liquidity",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "struct",
          "path": "aztec::abi::PublicCircuitPublicInputs",
          "fields": [
            {
              "name": "call_context",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::CallContext",
                "fields": [
                  {
                    "name": "msg_sender",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "storage_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "portal_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "function_selector",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "is_delegate_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_static_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_contract_deployment",
                    "type": {
                      "kind": "boolean"
                    }
                  }
                ]
              }
            },
            {
              "name": "args_hash",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "return_values",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "contract_storage_update_requests",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageUpdateRequest",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "old_value",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "new_value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "contract_storage_read",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageRead",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "public_call_stack",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_commitments",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_nullifiers",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_l2_to_l1_msgs",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_logs_hash",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_log_preimages_length",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "block_data",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::HistoricBlockData",
                "fields": [
                  {
                    "name": "private_data_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "nullifier_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "contract_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "l1_to_l2_messages_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "blocks_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "public_data_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "global_variables_hash",
                    "type": {
                      "kind": "field"
                    }
                  }
                ]
              }
            },
            {
              "name": "prover_address",
              "type": {
                "kind": "field"
              }
            }
          ]
        }
      ],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "admin",
      "functionType": "unconstrained",
      "isInternal": false,
      "parameters": [],
      "returnTypes": [
        {
          "kind": "field"
        }
      ],
      "bytecode": "H4sIAAAAAAAA/7VTWw7CIBBcKA/RxH8/vUG9Qc/gDZrY+Gmi3j+WyKQjoj+FTZqlQGdmZ7daRJS8o5Ml1I/1MWVHe0PK/cpwxFUL084YNmEF0qxT3qdadF3e067gnyOPa/FwbxhXiCvIZw+x12VeBFrjLHp3oHNT+AZ3TeEe124b1M48A72Da0saDGlxdbX0EcPLEh1xQQc0efLJZ3q5B55yi9lp0RPuPeLfjIJ/Mz/4Zx7P2328TudpvCiCyEdKEwyveexhP48m7uLMy7fEan7kuCrLMV4lLa+7hAUAAA==",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "constructor",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [
        {
          "name": "admin",
          "type": {
            "kind": "struct",
            "path": "aztec::types::address::AztecAddress",
            "fields": [
              {
                "name": "address",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "private"
        },
        {
          "name": "liquidity",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [],
      "bytecode": "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",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "last_pos_id",
      "functionType": "unconstrained",
      "isInternal": false,
      "parameters": [
        {
          "name": "user",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "integer",
          "sign": "unsigned",
          "width": 32
        }
      ],
      "bytecode": "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",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "liquidity",
      "functionType": "unconstrained",
      "isInternal": false,
      "parameters": [],
      "returnTypes": [
        {
          "kind": "integer",
          "sign": "unsigned",
          "width": 120
        }
      ],
      "bytecode": "H4sIAAAAAAAA/7WTwQ3CMAxFnbRNCEgswJEFiligM7BBJSqOSMCB8aEiVh+hcCHxxW7s/v/j2FZEjLysksnMl3gbvcNZF337pzlw5cJsnhhNxArQbKNfx7vYvLz71Uz/HHqciWfHtyGugCvI+xvqWZX0IiDW3Ni7DfL1zD9aW8/U8e5NgbuTp8O3ci2hoYYWl1dLO2J4mawCl+pQTR65RWYdJtFxB69yBcQeZzap81JmZkvMAmdO7ddusCe6q9fb+dKfhsPQHw0g0lG2gGHMddNn50porea8fErM1o8U1yR+tAc7CbYj/AUAAA==",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "market",
      "functionType": "unconstrained",
      "isInternal": false,
      "parameters": [
        {
          "name": "market_id",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "struct",
          "path": "types::market::Market",
          "fields": [
            {
              "name": "totalLongs",
              "type": {
                "kind": "integer",
                "sign": "unsigned",
                "width": 120
              }
            },
            {
              "name": "totalShorts",
              "type": {
                "kind": "integer",
                "sign": "unsigned",
                "width": 120
              }
            },
            {
              "name": "maxTotalLongs",
              "type": {
                "kind": "integer",
                "sign": "unsigned",
                "width": 120
              }
            },
            {
              "name": "maxTotalShorts",
              "type": {
                "kind": "integer",
                "sign": "unsigned",
                "width": 120
              }
            },
            {
              "name": "maxLeverage",
              "type": {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            },
            {
              "name": "openFeeRate",
              "type": {
                "kind": "integer",
                "sign": "unsigned",
                "width": 64
              }
            },
            {
              "name": "baseSpreadRate",
              "type": {
                "kind": "integer",
                "sign": "unsigned",
                "width": 64
              }
            },
            {
              "name": "borrowBaseRatePerHour",
              "type": {
                "kind": "integer",
                "sign": "unsigned",
                "width": 64
              }
            }
          ]
        }
      ],
      "bytecode": "H4sIAAAAAAAA/8WY2W4aQRBFe9jxQrxiY2N7vGATL3hwNj/kYb4h+QIkk7zgIAFZnvLtSY+75EOnZSmiECVBF9VN3Xurm2FqlowxkXmyPHyaxFI3JrNZN9LLlVTAMwcd1gpuLLqx5MayG+W7VeT4jVjOTFsJfqrEv6Rf38TqXQ1oyyHGPff1FhDLezWsYr6EmMyXEZN51pnz1mpuXUG3BnfkLuaf7RQ+NRV1uWR7XFLWx1ob8+8+LWO+hLGsyyP7LRfNdE39s/A/XHML5jqv/a/o5rzjb0nspfNdgb6qMpcVx4XXEhOoLfd2WZdDYnOsQK9gCs6Se/nrxC9gfhk8a7o8szMo1+bIvWoeF4v7ag64NewLeQhWHmsu3biKekgd51kbWgpfsMglWjAX/o8axGperfjfyj34gfk15+cCedYC66h9fQ7aiZPi8zq0RR6/RXJZCnDZ0OWSXWM2zbPJ/myAh3DaBI8tZR6Rx+MXcLeAu628FzZHPaB/G/oFvw4eO7o8Mv11T7/g7gB3Vxc3u+dqBPTvQr/gN8BjT5dHpr/h6RfcPeDu6+K+sTmaAf370C/4TfA40OWR6W96+gX3ALiHurhvbY6jgP5D6Bf8I/CIdXlk+skjBm4M3GNd3Hc2x0lA/zH0C/4JeJzq8sj0k0cK3FPgnunivrc5WgH9Z9Av+C3wONflkelvefoF9xy4F7q4H2yOdkD/BfQLfhs8XuvyyPS3Pf2CK1hV+JuIyX1tHbEr5zcQu3Z+E7Eb5x8h1nH+CWK3zm8hlnh14T0hOUsPdYmYPJu4Qkx6q2vEpM+/QUz6oA5i0gveIiY9m/Asu3zCJ5X52ex+Dv31PWsk9tL9u+DbOkg/MZ4MR72v/U/93kOEFAUstZZDGvpsfWUb+BiNra+1sgk8ak3dmMxmXQowAQF5R65onp+zVMx0P8Pvyvn86MbPT7WKx4PhJE7ib3/fe4PB8Gf/oRNzbhw/fh9P4vGkN5rEX0bDx7jb+QP6jnAxcBYAAA==",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "position",
      "functionType": "unconstrained",
      "isInternal": false,
      "parameters": [
        {
          "name": "user",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "pos_id",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "struct",
          "path": "types::position::Position",
          "fields": [
            {
              "name": "id",
              "type": {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            },
            {
              "name": "marketIdx",
              "type": {
                "kind": "integer",
                "sign": "unsigned",
                "width": 8
              }
            },
            {
              "name": "posType",
              "type": {
                "kind": "integer",
                "sign": "unsigned",
                "width": 8
              }
            },
            {
              "name": "initialCollateral",
              "type": {
                "kind": "integer",
                "sign": "unsigned",
                "width": 120
              }
            },
            {
              "name": "openFee",
              "type": {
                "kind": "integer",
                "sign": "unsigned",
                "width": 120
              }
            },
            {
              "name": "openPrice",
              "type": {
                "kind": "integer",
                "sign": "unsigned",
                "width": 120
              }
            },
            {
              "name": "markPrice",
              "type": {
                "kind": "integer",
                "sign": "unsigned",
                "width": 120
              }
            },
            {
              "name": "leverage",
              "type": {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            },
            {
              "name": "borrowBaseRatePerHour",
              "type": {
                "kind": "integer",
                "sign": "unsigned",
                "width": 64
              }
            },
            {
              "name": "liquidationThresholdRate",
              "type": {
                "kind": "integer",
                "sign": "unsigned",
                "width": 64
              }
            },
            {
              "name": "createdAt",
              "type": {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            },
            {
              "name": "owner",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "header",
              "type": {
                "kind": "struct",
                "path": "aztec::note::note_header::NoteHeader",
                "fields": [
                  {
                    "name": "contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "nonce",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "storage_slot",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "is_transient",
                    "type": {
                      "kind": "boolean"
                    }
                  }
                ]
              }
            }
          ]
        }
      ],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    }
  ],
  "events": [],
  "debug": {
    "debugSymbols": [
      "",
      "eJzNlMsKgzAQRf9l1qFkJk/zK6ULaS0IoqW6k/x7K1VbSIobkdklcO9wFjNnhKa7lkPdtT2EEeTJQDiP0D/Kdvr3Q/kcIGiUXkDV3qYn+SjgXjcVBIwiySJZmrOolFqzTmfCytl1rluj1saLeLNYRiyOEYtnxFIwYkHJCQY5wRAnGMUJRnOC4WRf5KRf5ORf5CRgPNbAmtQyV9MvTBolU8xRsl8Cbz7cdKys9+M+1uv7cWfdQrhgkzHJblFWARud7KVudLIHtdHJ7v3/TowvNJ8rwQ==",
      "eJztnd1u3EYMhd9lr41A86MZjV+l6EXQpkCAwCma3AV+9ySFV3Kt4R5swXAoildtAW1zeOp+/pI1l98unz7/8f7rx89PXy6P3y7p8vjbt8uXv98//fynL1/f//P18jg9XD48/fnjr88Pl78+fvpweQzPD7unQkpTeXnyx9/HZX06ld7jOczh+niOKb9+/PeHS1aTZFaTpKhJUtUkWdQkaWqShElPlKAnStQTRQ9ngx7QBj2kDXpQG/SwNuiBbdBD26iHtlEPbaMe2kY9tI16aBv10DbqoW3UQ9uoh7ZRD22THtomPbRNemib9NA2SdI2hbxGydP0NookbUEUSdqCKJK0BVEkaQuiSNL2dpQsSVsQRZK2IIokbUEUSdqCKHpom/XQNuuhbdZD26yHtlkPbecubVNs1zQpLShQzG0NFMsrI2r/562PLnNHBuqSd2SgLn9HBupSeGSgLotHBuoSeWSgLpdHBurSeWSgLqMHBiraSF20kbpoI3XRRuqijdRFG6mLNlIXbaQu2khdtJG6aiN11Ubqqo3UVRupqzZSV22krtpIXbWRumojddVG6kUbqRd5Ut/+86FFntQgkDypQSB5UoNA8qQGgeRJDQLJkxoEkic1CCRP6tuBmjypQSBtpG7aSN20kbppI3XTRuqmjdSNg9Rt/RVSivPrQD9/BQ70LuHWr8DA0pS29/xyLKDUtMzL+nhr4U2gMDHA9L5EObS4ae/UdokYaMqciAGnzIkYeMqciAGozIkYiMqciAGpzIkYmMqciIHBzInEmY0S9RfshiZSx+z+ut3QROqY3V++G5pIntkxtS3RXHaJ5JmNEskzGyWSZzZKJM9skKi/pjc0kTyzUSJ5ZqNE8sxGieSZjRKpY3Z/oW9oInXM7q/3DU2kjtn9Zb9fm2j9d4ecprpLNIDZINEAZoNEA5gNEg1gNkg0gNkg0QBmg0QDmA0SDWA2SDSA2bcT9VcGhyZSx+z+AuHQROqY3V8nHJpIntl12t6Qq3H33lF/uXBoInlmo0TyzEaJ5JkNEnEsHjInkmc2SiTPbJRIntkokTyzUSJ1zOZYP2ROpI7ZHAuIzInUMZtjBfHeRGXzo1qXXaIBzAaJBjAbJBrAbJBoALNBogHMBokGMBskGsBskGgAs0GiAcy+nYhjGZE5kTpmc6wjMidSx2yOhUTmRPLMXuLmR0uOu0TyzEaJ5JmNEskzGyWSZzZIxLGWyJxIntkokTyzUSJ5ZqNE8sxGidQxm2M5kTmROmZzrCcyJ1LHbI4FxfsSzbWuP1c7LyHtEokze15S2BItO2PjWFG8M1EL85qo7X/ah2NH8b5EJdW1o5LjviNxZpec18fLPO3+1I9jS/HORHNoW6Jl//+aOLNLmdbfi5TS3q74BY49xTsT1ZDWRHXZ/VQ9x17jnYmWuP1XW/J0+/GSrjgt8xa+9B6d03RdZ5zn/Oo98pezLOLfCwZNGuX3Nu+ctF6/JEtbbk8aprZ9jO3U0n8Wf/ePp1avHM9TSbtixL/VHaUY8e+4RylG/hv/QYqR949fVkwI2/uZIczhdjGthqtPtyXsT27Ja9BBipG3sYMUIy+FBylGu5sOK0a7yo4qRn77/SjFGDJf3mIMmS9vMYbMl7cYN1+iGDdfohg3X6IYN1+iGDdfohg3334x8p8hcpRi3HyJYtx8iWLcfIli3HyJYtx8iWLcfIli3HyJYtx8iWLcfPvFyH8S01GKcfMlinHzJYpx8yWKcfMlinHzJYpx8yWKcfMlinHzJYpx8+0XI/95dkcpxs2XKMbNlyjGzZcoxs2XKMbNlyjGzZcoxs2XKMbNlyjGzbdfjPyngh6lGDdfohg3X6IYN1+iGDdfohg3X6IYN1+iGDdfohg3X6IYN99+MfKfrXyUYtx8iWLcfIli3HyJYtx8iWLcfIli3HyJYtx8iWIsmW/M62f1hVgrKCa0a40tLmVXjCXz5SxG/hPqj1KMJfNlLcaS+bIWY8l8WYuxZL6sxVgyX9ZiLJkvazGWzJe1GDdfohg3334x8nc+jlKMmy9RjJsvUYybL1GMmy9RjJsvUYybL1GMmy9RjJsvUYybb78Y+WtJRynGzZcoxs2XKMbNlyjGzZcoxs2XKMbNlyjGzZcoxs2XKMbNt1tMsnTDjbcYN1+iGDdfohg3X6IYN1+iGDdfohg3X6IYN1+iGDdfohg3334xpm64sRbj5ksU4+ZLFOPmSxTj5ksU4+ZLFGPJfLfVrBD2u1nJ1Fk2NKslP0WzWlJOMKupe2hoVktiiGa15HpoVkv6hma1ZGRoVkuShWY9kTeZOuqFZj2RN5k6vQVmNXVNC816Im8ydfMKzXoibzJ1mQrNeiJvMnU/Cs16Im8ydeUJzXoibzJ1iwnNeiJvMnUxCc16Im8yddcIzXoibzJ1fQjNeiJvMnUjCM16Im8ydckHzXoibzJ1bwfNeiJvMnUVB816Im8ydbsGzXoibzJ1YQbNeiJvMnUHBs16Im8yda0FzXoibzJ1UwXNeiJvMnX5BM16Im8ydZ8EzXoib9J+RWTO88vDNefXs/4I3+q7Lm3CGj6Gbctlnv99TXvX/Uou4bobU+P2mpJeXtP9igCv6S9uohd13Y5+0fPzdwoy4Ys=",
      "",
      "eJzNlcsKgzAQRf9l1qE4M3mov1K6kNaCIFqqO8m/t4JWwbRCkTC7BO4dziJzMkDdXou+apsO8gGSk4H8PED3KJrx3vXFs4dca8sKyuY2HlPnFdyruoQcvdpkkSxNWWTmT9bpQJidnefiMtZaf1FvFiuIxQliSQWxZIJYMJEEg5JgSBIMS4LRkmAk2Rcl6Rcl+RclCRjjGljTMpfWMAFunqO8imYTN8WV9XHccb1+HHfcL+A/bpNsueP+FsdxB41FmE4dMmazyxQUy04nuP+/OxzcvZ1O8N1/73j/Av6Il5o=",
      "eJzNm91q4zAQRt9F12GRRv95lWUvQn+gUNJlk7vgd19CLUcg1UNrMf7uTBgpB2zOEQbf1PvH0+n69nG+qONN6V/GquPvm7r8PZ3vP1yup39XdXRk9EG9nJ/vlzZPB/X69v6ijmY6NLOJ7Dyaol0m75fNKJkwj5J7bOqnP4c7iYMh8TAkAYYkwpAkGJKMQkIahsTAkBAMCYxjCcaxBONYgnEswTiWYBxLMI61MI61MI61Qx0bapLP/Yeas7P/UB929t9suezNPGq0Tuu3ymSicq90pnVuW/ZNrtrWzdybnbgT92aD7sS92bc7cW+28z7cbrPLd+LebP6duPlOuLC6v6FQWIy1tv6HdtjG0ixn4jIawgzDR0UQhi+QIAyfK0EYvkGCMHxYBGH4WgjC8AmQg/G81wVheFkLwiAZ2CMZ2CMZ2CMZ2CMZ2CMZ2CMZ2CMZOCAZOMga2C3vApyjGqY3msuofRyX8/zaIMjKehy3rNfHccsm4GfcFcHCLVuLcdyyYfkOd1i4Y+c5kW3QOG7ZXI3jli3bz7hT+3xH2QiO44btpTfl9ZIn3XLD9pLhhu0lww3by5q79UmE7SXDDdtL713hDrblhu0lww3bS4YbtpcVdzQNd4LtJcON28tcuINun5OE28t1btxernPj9vLBbdrOJ9xernPD9jLYMhqq0YUbtpcMN2wvGW7YXtbcueHOsL1kuGF7GaIv3Mm13LC9ZLhhe8lww/ay4s7teTDD9pLhhu1lpNL5aNtzVYbtJcMN20uGG7aXFbdrz4NGwwaTAe9/7EQmzYvI+3r/eVH3NjGL+p8QcYu6QecWdWv69aJp+g+uAIFm",
      ""
    ],
    "fileMap": {
      "1": {
        "source": "mod types;\n\n\n\ncontract Vault {\n    use dep::std::option::Option;\n    use dep::safe_math::SafeU120;\n\n    use dep::value_note::{\n        balance_utils,\n        utils::{increment, decrement},\n        value_note::{VALUE_NOTE_LEN, ValueNote, ValueNoteMethods},\n    };\n    \n    use dep::aztec::{\n        abi,\n        context::{PrivateContext, PublicContext, Context},\n        oracle::{\n            get_public_key::get_public_key,\n        },\n        state_vars::{map::Map, public_state::PublicState, singleton::Singleton},\n        types::type_serialization::{\n            aztec_address_serialization::{AztecAddressSerializationMethods, AZTEC_ADDRESS_SERIALIZED_LEN},\n        },\n        types::address::{AztecAddress},\n        selector::compute_selector,\n    };\n    use crate::types::{\n        market::{MARKET_SERIALIZED_LEN, Market, MarketSerializationMethods},\n        user_pos_id::{USER_ID_POS_SERIALIZED_LEN, UserPosId, UserPosIdSerializationMethods},\n        position::{POSITION_SERIALIZED_LEN, PositionSerializationMethods, Position},\n        safe_u120_serialization::{SAFE_U120_SERIALIZED_LEN, SafeU120SerializationMethods}\n    };\n\n    struct Storage {\n        admin: PublicState<AztecAddress, AZTEC_ADDRESS_SERIALIZED_LEN>,\n        markets: Map<PublicState<Market, MARKET_SERIALIZED_LEN>>,\n        liquidity: PublicState<SafeU120, SAFE_U120_SERIALIZED_LEN>,\n        positions: Map<Map<Singleton<Position, POSITION_SERIALIZED_LEN>>>,\n        usersLastPosId: Map<Singleton<UserPosId, USER_ID_POS_SERIALIZED_LEN>>\n    }\n\n    impl Storage {\n        fn init(context: Context) -> pub Self {\n            Storage {\n                admin: PublicState::new(\n                    context,\n                    1,\n                    AztecAddressSerializationMethods,\n                ),\n                markets: Map::new(\n                    context,\n                    2,\n                    |context, slot| {\n                        PublicState::new(\n                            context,\n                            slot,\n                            MarketSerializationMethods,\n                        )\n                    },\n                ),\n                liquidity: PublicState::new(\n                    context,\n                    3,\n                    SafeU120SerializationMethods,\n                ),\n                // -------------------- PRIVATE ----------------------\n                positions: Map::new(\n                    context,\n                    4,\n                    |context, slot| {\n                        Map::new(\n                            context,\n                            slot,\n                            |context, slot| {\n                                Singleton::new(context, slot, PositionSerializationMethods)\n                            }\n                        )\n                    },\n                ),\n                usersLastPosId: Map::new(\n                    context,\n                    5,\n                    |context, slot| {\n                        Singleton::new(context, slot, UserPosIdSerializationMethods)\n                    }\n                )\n            }\n        }\n    }\n\n\n    #[aztec(private)]\n    fn constructor(admin: AztecAddress, liquidity: Field) {\n        let selector = compute_selector(\"_initialize((Field,Field))\");\n        context.call_public_function(context.this_address(), selector, [admin.address, liquidity]);\n    }\n\n    // ---------------------------------------- PUBLIC -----------------------------------------------\n    #[aztec(public)]\n    internal fn _initialize(\n        new_admin: AztecAddress,\n        initial_liquidity: Field\n    ) {\n        storage.admin.write(new_admin);\n        let initial = SafeU120::new(initial_liquidity);\n        storage.liquidity.write(initial);\n    }\n\n    // #[aztec(private)]\n    // fn open_position(\n\n    // )\n\n    // #[aztec(private)]\n    // fn close_position(\n\n    // )\n\n    // #[aztec(public)]\n    // internal fn _increase_market_oi(\n    //     market_id: Field,\n    //     amount: Field,\n    //     pos_type: Field\n    // ) {\n        \n    // }\n\n    unconstrained fn admin() -> Field {\n        storage.admin.read().address\n    }\n\n    unconstrained fn market(market_id: Field) -> Market {\n        storage.markets.at(market_id).read()\n    }\n\n    unconstrained fn position(\n        user: Field,\n        pos_id: Field\n    ) -> Position {\n        storage.positions.at(user).at(pos_id).get_note()\n    }\n\n    unconstrained fn liquidity() -> u120 {\n        storage.liquidity.read().value\n    }\n\n    unconstrained fn last_pos_id(\n        user: Field\n    ) -> u32 {\n        storage.usersLastPosId.at(user).get_note().value\n    }\n}\n",
        "path": "/home/maga/projects/noir-contracts/src/contracts/src/main"
      },
      "5": {
        "source": "mod poseidon;\n\n#[foreign(sha256)]\npub fn sha256<N>(_input : [u8; N]) -> [u8; 32] {}\n\n#[foreign(blake2s)]\npub fn blake2s<N>(_input : [u8; N]) -> [u8; 32] {}\n\npub fn pedersen<N>(input : [Field; N]) -> [Field; 2] {\n    pedersen_with_separator(input, 0)\n}\n\n#[foreign(pedersen)]\npub fn pedersen_with_separator<N>(_input : [Field; N], _separator : u32) -> [Field; 2] {}\n\n#[foreign(hash_to_field_128_security)]\npub fn hash_to_field<N>(_input : [Field; N]) -> Field {}\n\n#[foreign(keccak256)]\npub fn keccak256<N>(_input : [u8; N], _message_size: u32) -> [u8; 32] {}\n\n// mimc-p/p implementation\n// constants are (publicly generated) random numbers, for instance using keccak as a ROM.\n// You must use constants generated for the native field\n// Rounds number should be ~ log(p)/log(exp)\n// For 254 bit primes, exponent 7 and 91 rounds seems to be recommended\nfn mimc<N>(x: Field, k: Field, constants: [Field; N], exp : Field) -> Field {\n    //round 0\n    let mut t = x + k;\n    let mut h = t.pow_32(exp);\n    //next rounds\n    for i in 1 .. constants.len() {\n        t = h + k + constants[i];\n        h = t.pow_32(exp);\n    };\n    h + k\n}\n\nglobal MIMC_BN254_ROUNDS = 91;\n\n//mimc implementation with hardcoded parameters for BN254 curve.\npub fn mimc_bn254<N>(array: [Field; N]) -> Field {\n    //mimc parameters\n    let exponent = 7;\n    //generated from seed \"mimc\" using keccak256 \n    let constants: [Field; MIMC_BN254_ROUNDS] = [\n        0, \n        20888961410941983456478427210666206549300505294776164667214940546594746570981,\n        15265126113435022738560151911929040668591755459209400716467504685752745317193,\n        8334177627492981984476504167502758309043212251641796197711684499645635709656,\n        1374324219480165500871639364801692115397519265181803854177629327624133579404,\n        11442588683664344394633565859260176446561886575962616332903193988751292992472,\n        2558901189096558760448896669327086721003508630712968559048179091037845349145,\n        11189978595292752354820141775598510151189959177917284797737745690127318076389,\n        3262966573163560839685415914157855077211340576201936620532175028036746741754,\n        17029914891543225301403832095880481731551830725367286980611178737703889171730,\n        4614037031668406927330683909387957156531244689520944789503628527855167665518,\n        19647356996769918391113967168615123299113119185942498194367262335168397100658,\n        5040699236106090655289931820723926657076483236860546282406111821875672148900,\n        2632385916954580941368956176626336146806721642583847728103570779270161510514,\n        17691411851977575435597871505860208507285462834710151833948561098560743654671,\n        11482807709115676646560379017491661435505951727793345550942389701970904563183,\n        8360838254132998143349158726141014535383109403565779450210746881879715734773,\n        12663821244032248511491386323242575231591777785787269938928497649288048289525,\n        3067001377342968891237590775929219083706800062321980129409398033259904188058,\n        8536471869378957766675292398190944925664113548202769136103887479787957959589,\n        19825444354178182240559170937204690272111734703605805530888940813160705385792,\n        16703465144013840124940690347975638755097486902749048533167980887413919317592,\n        13061236261277650370863439564453267964462486225679643020432589226741411380501,\n        10864774797625152707517901967943775867717907803542223029967000416969007792571,\n        10035653564014594269791753415727486340557376923045841607746250017541686319774,\n        3446968588058668564420958894889124905706353937375068998436129414772610003289,\n        4653317306466493184743870159523234588955994456998076243468148492375236846006,\n        8486711143589723036499933521576871883500223198263343024003617825616410932026,\n        250710584458582618659378487568129931785810765264752039738223488321597070280,\n        2104159799604932521291371026105311735948154964200596636974609406977292675173,\n        16313562605837709339799839901240652934758303521543693857533755376563489378839,\n        6032365105133504724925793806318578936233045029919447519826248813478479197288,\n        14025118133847866722315446277964222215118620050302054655768867040006542798474,\n        7400123822125662712777833064081316757896757785777291653271747396958201309118,\n        1744432620323851751204287974553233986555641872755053103823939564833813704825,\n        8316378125659383262515151597439205374263247719876250938893842106722210729522,\n        6739722627047123650704294650168547689199576889424317598327664349670094847386,\n        21211457866117465531949733809706514799713333930924902519246949506964470524162,\n        13718112532745211817410303291774369209520657938741992779396229864894885156527,\n        5264534817993325015357427094323255342713527811596856940387954546330728068658,\n        18884137497114307927425084003812022333609937761793387700010402412840002189451,\n        5148596049900083984813839872929010525572543381981952060869301611018636120248,\n        19799686398774806587970184652860783461860993790013219899147141137827718662674,\n        19240878651604412704364448729659032944342952609050243268894572835672205984837,\n        10546185249390392695582524554167530669949955276893453512788278945742408153192,\n        5507959600969845538113649209272736011390582494851145043668969080335346810411,\n        18177751737739153338153217698774510185696788019377850245260475034576050820091,\n        19603444733183990109492724100282114612026332366576932662794133334264283907557,\n        10548274686824425401349248282213580046351514091431715597441736281987273193140,\n        1823201861560942974198127384034483127920205835821334101215923769688644479957,\n        11867589662193422187545516240823411225342068709600734253659804646934346124945,\n        18718569356736340558616379408444812528964066420519677106145092918482774343613,\n        10530777752259630125564678480897857853807637120039176813174150229243735996839,\n        20486583726592018813337145844457018474256372770211860618687961310422228379031,\n        12690713110714036569415168795200156516217175005650145422920562694422306200486,\n        17386427286863519095301372413760745749282643730629659997153085139065756667205,\n        2216432659854733047132347621569505613620980842043977268828076165669557467682,\n        6309765381643925252238633914530877025934201680691496500372265330505506717193,\n        20806323192073945401862788605803131761175139076694468214027227878952047793390,\n        4037040458505567977365391535756875199663510397600316887746139396052445718861,\n        19948974083684238245321361840704327952464170097132407924861169241740046562673,\n        845322671528508199439318170916419179535949348988022948153107378280175750024,\n        16222384601744433420585982239113457177459602187868460608565289920306145389382,\n        10232118865851112229330353999139005145127746617219324244541194256766741433339,\n        6699067738555349409504843460654299019000594109597429103342076743347235369120,\n        6220784880752427143725783746407285094967584864656399181815603544365010379208,\n        6129250029437675212264306655559561251995722990149771051304736001195288083309,\n        10773245783118750721454994239248013870822765715268323522295722350908043393604,\n        4490242021765793917495398271905043433053432245571325177153467194570741607167,\n        19596995117319480189066041930051006586888908165330319666010398892494684778526,\n        837850695495734270707668553360118467905109360511302468085569220634750561083,\n        11803922811376367215191737026157445294481406304781326649717082177394185903907,\n        10201298324909697255105265958780781450978049256931478989759448189112393506592,\n        13564695482314888817576351063608519127702411536552857463682060761575100923924,\n        9262808208636973454201420823766139682381973240743541030659775288508921362724,\n        173271062536305557219323722062711383294158572562695717740068656098441040230,\n        18120430890549410286417591505529104700901943324772175772035648111937818237369,\n        20484495168135072493552514219686101965206843697794133766912991150184337935627,\n        19155651295705203459475805213866664350848604323501251939850063308319753686505,\n        11971299749478202793661982361798418342615500543489781306376058267926437157297,\n        18285310723116790056148596536349375622245669010373674803854111592441823052978,\n        7069216248902547653615508023941692395371990416048967468982099270925308100727,\n        6465151453746412132599596984628739550147379072443683076388208843341824127379,\n        16143532858389170960690347742477978826830511669766530042104134302796355145785,\n        19362583304414853660976404410208489566967618125972377176980367224623492419647,\n        1702213613534733786921602839210290505213503664731919006932367875629005980493,\n        10781825404476535814285389902565833897646945212027592373510689209734812292327,\n        4212716923652881254737947578600828255798948993302968210248673545442808456151,\n        7594017890037021425366623750593200398174488805473151513558919864633711506220,\n        18979889247746272055963929241596362599320706910852082477600815822482192194401,\n        13602139229813231349386885113156901793661719180900395818909719758150455500533,\n    ];\n\n    let mut r = 0;\n    for elem in array {\n        let h = mimc(elem, r, constants, exponent);\n        r = r + elem + h;\n    }\n    r\n}\n",
        "path": "std/hash"
      },
      "17": {
        "source": "struct GrumpkinScalar {\n    low: Field,\n    high: Field,\n}\n\nimpl GrumpkinScalar {\n    fn new(low: Field, high: Field) -> Self {\n        // TODO: check that the low and high value fit within the grumpkin modulus\n        GrumpkinScalar { low, high }\n    }\n}\n\nglobal GRUMPKIN_SCALAR_SERIALIZED_LEN: Field = 2;\n\nfn deserialize_grumpkin_scalar(fields: [Field; GRUMPKIN_SCALAR_SERIALIZED_LEN]) -> GrumpkinScalar {\n    GrumpkinScalar { low: fields[0], high: fields[1] }\n}\n\nfn serialize_grumpkin_scalar(scalar: GrumpkinScalar) -> [Field; GRUMPKIN_SCALAR_SERIALIZED_LEN] {\n    [scalar.low, scalar.high]\n}\n",
        "path": "std/grumpkin_scalar"
      },
      "18": {
        "source": "use crate::grumpkin_scalar::GrumpkinScalar;\nuse crate::scalar_mul::fixed_base_embedded_curve;\n\nfn grumpkin_fixed_base(scalar: GrumpkinScalar) -> [Field; 2] {\n    // TODO: this should use both the low and high limbs to do the scalar multiplication\n    fixed_base_embedded_curve(scalar.low, scalar.high)\n}\n",
        "path": "std/grumpkin_scalar_mul"
      },
      "22": {
        "source": "\nimpl Field {\n    #[builtin(to_le_bits)]\n    pub fn to_le_bits(_x : Field, _bit_size: u32) -> [u1] {}\n    #[builtin(to_be_bits)]\n    pub fn to_be_bits(_x : Field, _bit_size: u32) -> [u1] {}\n\n    pub fn to_le_bytes(x : Field, byte_size: u32) -> [u8] {\n        x.to_le_radix(256, byte_size)\n    }\n    pub fn to_be_bytes(x : Field, byte_size: u32) -> [u8] {\n        x.to_be_radix(256, byte_size)\n    }\n\n    #[builtin(to_le_radix)]\n    //decompose _x into a _result_len vector over the _radix basis\n    //_radix must be less than 256\n    pub fn to_le_radix(_x : Field, _radix: u32, _result_len: u32) -> [u8] {}\n    #[builtin(to_be_radix)]\n    pub fn to_be_radix(_x : Field, _radix: u32, _result_len: u32) -> [u8] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b = exponent.to_le_bits(32);\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32-i] as Field) * (r * self) + (1 - b[32-i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x ∈ {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub fn modulus_num_bits() -> Field {}\n\n#[builtin(modulus_be_bits)]\npub fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub fn modulus_le_bytes() -> [u8] {}\n",
        "path": "std/field"
      },
      "33": {
        "source": "struct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::unsafe::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default\n        }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            other\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<U, Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            default()\n        }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some {\n                Option::none()\n            } else {\n                self\n            }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n",
        "path": "std/option"
      },
      "36": {
        "source": "use crate::constants_gen::{\n    RETURN_VALUES_LENGTH,\n    MAX_READ_REQUESTS_PER_CALL,\n    MAX_NEW_COMMITMENTS_PER_CALL,\n    MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n    NUM_FIELDS_PER_SHA256,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n    MAX_PUBLIC_DATA_READS_PER_CALL,\n    GENERATOR_INDEX__FUNCTION_ARGS,\n    HISTORIC_BLOCK_DATA_LENGTH,\n    CONTRACT_DEPLOYMENT_DATA_LENGTH,\n    CALL_CONTEXT_LENGTH,\n    PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH,\n    CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH,\n    CONTRACT_STORAGE_READ_LENGTH,\n    PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH,\n    GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS,\n    GENERATOR_INDEX__FUNCTION_DATA,\n    GENERATOR_INDEX__PUBLIC_DATA_READ,\n    GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST,\n    GENERATOR_INDEX__CALL_CONTEXT,\n    GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS,\n    GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA,\n};\n\nuse crate::oracle::debug_log;\nuse crate::types::vec::BoundedVec;\nuse crate::types::point::Point;\n\n\n// docs:start:private-global-variables\nstruct PrivateGlobalVariables {\n    chain_id: Field,\n    version: Field,\n}\n// docs:end:private-global-variables\n\nimpl PrivateGlobalVariables {\n    fn serialize(self) -> [Field; 2] {\n        [self.chain_id, self.version]\n    }\n}\n\n// docs:start:public-global-variables\nstruct PublicGlobalVariables {\n    chain_id: Field,\n    version: Field,\n    block_number: Field,\n    timestamp: Field,\n}\n// docs:end:public-global-variables\n\nimpl PublicGlobalVariables {\n    fn serialize(self) -> [Field; 4] {\n        [self.chain_id, self.version, self.block_number, self.timestamp]\n    }\n}\n\n// docs:start:contract-deployment-data\nstruct ContractDeploymentData {\n    deployer_public_key: Point,\n    constructor_vk_hash : Field,\n    function_tree_root : Field,\n    contract_address_salt : Field,\n    portal_contract_address : Field,\n}\n// docs:end:contract-deployment-data\n\nimpl ContractDeploymentData {\n    fn serialize(self) -> [Field; CONTRACT_DEPLOYMENT_DATA_LENGTH] {\n        [\n            self.deployer_public_key.x,\n            self.deployer_public_key.y,\n            self.constructor_vk_hash,\n            self.function_tree_root,\n            self.contract_address_salt,\n            self.portal_contract_address,\n        ]\n    }\n\n    fn hash(self) -> Field {\n        dep::std::hash::pedersen_with_separator(self.serialize(), GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA)[0]\n    }\n}\n\n// PrivateContextInputs are expected to be provided to each private function\n// docs:start:private-context-inputs\nstruct PrivateContextInputs {\n    call_context : CallContext,\n    block_data: HistoricBlockData,\n    contract_deployment_data: ContractDeploymentData,\n    private_global_variables: PrivateGlobalVariables,\n}\n// docs:end:private-context-inputs\n\n// PublicContextInputs are expected to be provided to each public function\n// docs:start:public-context-inputs\nstruct PublicContextInputs {\n    call_context: CallContext,\n    block_data: HistoricBlockData,\n\n    public_global_variables: PublicGlobalVariables,\n}\n// docs:end:public-context-inputs\n\n// docs:start:call-context\nstruct CallContext {\n    msg_sender : Field,\n    storage_contract_address : Field,\n    portal_contract_address : Field,\n    function_selector: Field,\n\n    is_delegate_call : bool,\n    is_static_call : bool,\n    is_contract_deployment: bool,\n}\n// docs:end:call-context\n\nimpl CallContext {\n    fn serialize(self) -> [Field; CALL_CONTEXT_LENGTH] {\n        [\n            self.msg_sender,\n            self.storage_contract_address,\n            self.portal_contract_address,\n            self.function_selector,\n            self.is_delegate_call as Field,\n            self.is_static_call as Field,\n            self.is_contract_deployment as Field,\n        ]\n    }\n\n    fn hash(self) -> Field {\n        dep::std::hash::pedersen_with_separator(self.serialize(), GENERATOR_INDEX__CALL_CONTEXT)[0]\n    }\n}\n\n// docs:start:historic-block-data\nstruct HistoricBlockData {\n    private_data_tree_root : Field,\n    nullifier_tree_root : Field,\n    contract_tree_root : Field,\n    l1_to_l2_messages_tree_root : Field,\n    blocks_tree_root: Field,\n    public_data_tree_root: Field,\n    global_variables_hash: Field,\n}\n// docs:end:historic-block-data\n\nimpl HistoricBlockData {\n    // NOTE: this order must match the order in `private_circuit_public_inputs.hpp`\n    pub fn serialize(self) -> [Field; HISTORIC_BLOCK_DATA_LENGTH] {\n        [\n            self.private_data_tree_root,\n            self.nullifier_tree_root,\n            self.contract_tree_root,\n            self.l1_to_l2_messages_tree_root,\n            self.blocks_tree_root,\n            self.public_data_tree_root,\n            self.global_variables_hash,\n        ]\n    }\n\n    pub fn empty() -> Self {\n        Self { private_data_tree_root: 0, nullifier_tree_root: 0, contract_tree_root: 0, l1_to_l2_messages_tree_root: 0, blocks_tree_root: 0, public_data_tree_root: 0, global_variables_hash: 0 }\n    }\n}\n\nstruct FunctionData {\n    function_selector: Field,\n    is_internal: bool,\n    is_private: bool,\n    is_constructor: bool,\n}\n\nimpl FunctionData {\n    fn hash(self) -> Field {\n        dep::std::hash::pedersen_with_separator([\n            self.function_selector,\n            self.is_internal as Field,\n            self.is_private as Field,\n            self.is_constructor as Field,\n        ], GENERATOR_INDEX__FUNCTION_DATA)[0]\n    }\n}\n\nstruct PrivateCircuitPublicInputs {\n    call_context: CallContext,\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n    read_requests: [Field; crate::abi::MAX_READ_REQUESTS_PER_CALL],\n    new_commitments: [Field; MAX_NEW_COMMITMENTS_PER_CALL],\n    new_nullifiers: [Field; MAX_NEW_NULLIFIERS_PER_CALL],\n    nullified_commitments: [Field; MAX_NEW_NULLIFIERS_PER_CALL],\n    private_call_stack: [Field; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL],\n    public_call_stack: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_l2_to_l1_msgs: [Field; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n    // Explore introducing a new type like uint256 (similar to Point), so it's more explicit that\n    // we're talking about a single number backed by two field elements.\n    encrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    encrypted_log_preimages_length: Field,\n    unencrypted_log_preimages_length: Field,\n    block_data: HistoricBlockData,\n    contract_deployment_data: ContractDeploymentData,\n    chain_id: Field,\n    version: Field,\n}\n\nimpl PrivateCircuitPublicInputs {\n    fn hash(self) -> Field {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH> = BoundedVec::new(0); \n        fields.push(self.call_context.hash());\n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        fields.push_array(self.read_requests);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.nullified_commitments);\n        fields.push_array(self.private_call_stack);\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.encrypted_logs_hash);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.encrypted_log_preimages_length);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_data.serialize());\n        fields.push(self.contract_deployment_data.hash());\n        fields.push(self.chain_id);\n        fields.push(self.version);\n\n        dep::std::hash::pedersen_with_separator(fields.storage, GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS)[0]\n    }\n\n    fn serialize(self) -> [Field; PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new(0); \n        fields.push_array(self.call_context.serialize());\n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        fields.push_array(self.read_requests);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.private_call_stack);\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.encrypted_logs_hash);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.encrypted_log_preimages_length);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_data.serialize());\n        fields.push_array(self.contract_deployment_data.serialize());\n        fields.push(self.chain_id);\n        fields.push(self.version);\n        fields.storage\n    }\n}\n\nstruct ContractStorageRead {\n    storage_slot: Field,\n    value: Field,\n}\n\nimpl ContractStorageRead {\n    pub fn serialize(self) -> [Field; CONTRACT_STORAGE_READ_LENGTH] {\n        [self.storage_slot, self.value]\n    }\n\n    pub fn hash(self) -> Field {\n        dep::std::hash::pedersen_with_separator(self.serialize(), GENERATOR_INDEX__PUBLIC_DATA_READ)[0]\n    }\n\n    pub fn empty() -> Self {\n        Self { storage_slot: 0, value: 0 }\n    }\n}\n\nstruct ContractStorageUpdateRequest {\n    storage_slot: Field,\n    old_value: Field,\n    new_value: Field,\n}\n\nimpl ContractStorageUpdateRequest {\n    pub fn serialize(self) -> [Field; CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH] {\n        [self.storage_slot, self.old_value, self.new_value]\n    }\n\n    pub fn hash(self) -> Field {\n        dep::std::hash::pedersen_with_separator(self.serialize(), GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST)[0]\n    }\n\n    pub fn empty() -> Self {\n        Self { storage_slot: 0, old_value: 0, new_value: 0 }\n    }\n}\n\n\nstruct PublicCircuitPublicInputs {\n    call_context: CallContext,\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n    contract_storage_update_requests: [ContractStorageUpdateRequest; MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n    contract_storage_read: [ContractStorageRead; MAX_PUBLIC_DATA_READS_PER_CALL],\n    public_call_stack: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_commitments: [Field; MAX_NEW_COMMITMENTS_PER_CALL],\n    new_nullifiers: [Field; crate::abi::MAX_NEW_NULLIFIERS_PER_CALL],\n    new_l2_to_l1_msgs: [Field; crate::abi::MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    unencrypted_log_preimages_length: Field,\n    block_data: HistoricBlockData,\n    prover_address: Field,\n}\n\nimpl PublicCircuitPublicInputs {\n    \n    pub fn hash(self) -> Field {\n        let mut inputs: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH> = BoundedVec::new(0);\n        inputs.push(self.call_context.hash());\n        inputs.push(self.args_hash);\n        inputs.push_array(self.return_values);\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            inputs.push(self.contract_storage_update_requests[i].hash());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            inputs.push(self.contract_storage_read[i].hash());\n        }\n        inputs.push_array(self.public_call_stack);\n        inputs.push_array(self.new_commitments);\n        inputs.push_array(self.new_nullifiers);\n        inputs.push_array(self.new_l2_to_l1_msgs);\n\n        inputs.push_array(self.unencrypted_logs_hash);\n        inputs.push(self.unencrypted_log_preimages_length);\n        inputs.push_array(self.block_data.serialize());\n        inputs.push(self.prover_address);\n\n        dep::std::hash::pedersen_with_separator(inputs.storage, GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS)[0]\n    }\n\n    pub fn serialize(self) -> [Field; PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new(0); \n        fields.push_array(self.call_context.serialize());   \n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            fields.push_array(self.contract_storage_update_requests[i].serialize());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            fields.push_array(self.contract_storage_read[i].serialize());\n        }\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_data.serialize());\n        fields.push(self.prover_address);\n        fields.storage\n    }\n}\n\nstruct Hasher {\n    fields: [Field],\n}\n\nimpl Hasher {\n    pub fn new()-> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<N>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n\n    pub fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nglobal ARGS_HASH_CHUNK_LENGTH: u32 = 32;\nglobal ARGS_HASH_CHUNK_COUNT: u32 = 16;\n\npub fn hash_args<N>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        let mut chunks_hashes = [0; ARGS_HASH_CHUNK_COUNT];\n        for i in 0..ARGS_HASH_CHUNK_COUNT {\n            let mut chunk_hash = 0;\n            let start_chunk_index = i * ARGS_HASH_CHUNK_LENGTH;\n            if start_chunk_index < (args.len() as u32) {\n                let mut chunk_args = [0; ARGS_HASH_CHUNK_LENGTH];\n                for j in 0..ARGS_HASH_CHUNK_LENGTH {\n                    let item_index = i * ARGS_HASH_CHUNK_LENGTH + j;\n                    if item_index < (args.len() as u32) {\n                        chunk_args[j] = args[item_index];\n                    }\n                }\n                chunk_hash = dep::std::hash::pedersen_with_separator(chunk_args, GENERATOR_INDEX__FUNCTION_ARGS)[0];\n            }\n            chunks_hashes[i] = chunk_hash;\n        }\n        dep::std::hash::pedersen_with_separator(chunks_hashes, GENERATOR_INDEX__FUNCTION_ARGS)[0]\n    }\n}\n",
        "path": "/home/maga/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.8.14/yarn-project/aztec-nr/aztec/src/abi"
      },
      "37": {
        "source": "use dep::std::hash;\nuse crate::constants_gen::GENERATOR_INDEX__CONTRACT_ADDRESS;\n\npub fn compute_address(pub_key_x: Field, pub_key_y: Field, partial_address: Field) -> Field {\n  hash::pedersen_with_separator([pub_key_x, pub_key_y, partial_address], GENERATOR_INDEX__CONTRACT_ADDRESS)[0]\n}",
        "path": "/home/maga/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.8.14/yarn-project/aztec-nr/aztec/src/address"
      },
      "39": {
        "source": "use crate::constants_gen::{\n    EMPTY_NULLIFIED_COMMITMENT,\n    MAX_NEW_COMMITMENTS_PER_CALL,\n    MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n    MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_DATA_READS_PER_CALL,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n    MAX_READ_REQUESTS_PER_CALL,\n    NUM_FIELDS_PER_SHA256,\n    RETURN_VALUES_LENGTH,\n};\n\nuse crate::abi;\n\nuse crate::abi::{\n    hash_args,\n    CallContext,\n    ContractDeploymentData,\n    HistoricBlockData,\n    FunctionData,\n    PrivateCircuitPublicInputs,\n    PublicCircuitPublicInputs,\n};\n\n// TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n// use dep::std::collections::vec::Vec;\n\n// l1 to l2 messaging\nuse crate::messaging::process_l1_to_l2_message;\nuse crate::private_call_stack_item::PrivateCallStackItem;\nuse crate::public_call_stack_item::PublicCallStackItem;\n\nuse crate::types::{\n    vec::BoundedVec,\n    point::Point,\n};\n\nuse crate::utils::arr_copy_slice;\n\nuse crate::oracle::{\n    arguments,\n    call_private_function::call_private_function_internal,\n    public_call::call_public_function_internal,\n    enqueue_public_function_call::enqueue_public_function_call_internal,\n    context::get_portal_address,\n};\n\nuse dep::std::option::Option;\n\n// When finished, one can call .finish() to convert back to the abi\nstruct PrivateContext {\n    // docs:start:private-context\n    inputs: abi::PrivateContextInputs,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    read_requests: BoundedVec<Field, MAX_READ_REQUESTS_PER_CALL>,\n\n    new_commitments: BoundedVec<Field, MAX_NEW_COMMITMENTS_PER_CALL>,\n    new_nullifiers: BoundedVec<Field, MAX_NEW_NULLIFIERS_PER_CALL>,\n    nullified_commitments: BoundedVec<Field, MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    private_call_stack : BoundedVec<Field, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    public_call_stack : BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n    new_l2_to_l1_msgs : BoundedVec<Field, MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    block_data: HistoricBlockData,\n\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    // encrypted_logs_preimages: Vec<Field>,\n    // unencrypted_logs_preimages: Vec<Field>,\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: abi::PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs: inputs,\n\n            args_hash: args_hash,\n            return_values: BoundedVec::new(0),\n\n            read_requests: BoundedVec::new(0),\n\n            new_commitments: BoundedVec::new(0),\n            new_nullifiers: BoundedVec::new(0),\n            nullified_commitments: BoundedVec::new(0),\n\n            block_data: inputs.block_data,\n\n            private_call_stack: BoundedVec::new(0),\n            public_call_stack: BoundedVec::new(0),\n            new_l2_to_l1_msgs: BoundedVec::new(0),\n\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n        }\n    }\n\n    pub fn msg_sender(self) -> Field {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> Field {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    pub fn this_portal_address(self) -> Field {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.private_global_variables.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.private_global_variables.version\n    }\n\n    pub fn selector(self) -> Field {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn finish(self) -> abi::PrivateCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let encrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let encrypted_log_preimages_length = 0;\n        let unencrypted_log_preimages_length = 0;\n\n        let priv_circuit_pub_inputs = abi::PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            return_values: self.return_values.storage,\n            read_requests: self.read_requests.storage,\n            new_commitments: self.new_commitments.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            nullified_commitments: self.nullified_commitments.storage,\n            private_call_stack: self.private_call_stack.storage,\n            public_call_stack: self.public_call_stack.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            encrypted_logs_hash: encrypted_logs_hash,\n            unencrypted_logs_hash: unencrypted_logs_hash,\n            encrypted_log_preimages_length: encrypted_log_preimages_length,\n            unencrypted_log_preimages_length: unencrypted_log_preimages_length,\n            block_data: self.block_data,\n            contract_deployment_data: self.inputs.contract_deployment_data,\n            chain_id: self.inputs.private_global_variables.chain_id,\n            version: self.inputs.private_global_variables.version,\n        };\n        priv_circuit_pub_inputs\n    }\n\n    pub fn push_read_request(&mut self, read_request: Field) {\n        self.read_requests.push(read_request);\n    }\n\n    pub fn push_new_note_hash(&mut self, note_hash: Field) {\n        self.new_commitments.push(note_hash);\n    }\n\n    // We never push a zero nullified_commitment as zero is used to indicate the end\n    // of a field array in private kernel. This routine transparently replaces a\n    // zero value into the special placeholder: EMPTY_NULLIFIED_COMMITMENT.\n    pub fn push_new_nullifier(&mut self, nullifier: Field, nullified_commitment: Field) {\n        self.new_nullifiers.push(nullifier);\n        let mut non_zero_nullified = nullified_commitment;\n        if (non_zero_nullified == 0) {\n            non_zero_nullified = EMPTY_NULLIFIED_COMMITMENT;\n        }\n        self.nullified_commitments.push(non_zero_nullified);\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, content: Field) \n    // docs:end:context_message_portal\n    {\n        self.new_l2_to_l1_msgs.push(content);\n    }\n\n    // PrivateContextInputs must be temporarily passed in to prevent too many unknowns\n    // Note this returns self to get around an issue where mutable structs do not maintain mutations unless reassigned\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        msg_key: Field,\n        content: Field,\n        secret: Field\n    ) \n    // docs:end:context_consume_l1_to_l2_message\n    {\n        let nullifier = process_l1_to_l2_message(self.block_data.l1_to_l2_messages_tree_root, self.this_address(), msg_key, content, secret);\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, EMPTY_NULLIFIED_COMMITMENT)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    pub fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn call_private_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash)\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0)\n    }\n\n    pub fn call_private_function_with_packed_args(\n        &mut self,\n        contract_address: Field,\n        function_selector: Field,\n        args_hash: Field\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let fields = call_private_function_internal(\n            contract_address, \n            function_selector, \n            args_hash\n        );\n        let item = PrivateCallStackItem {\n            contract_address: fields[0],\n            function_data: FunctionData {\n                function_selector: fields[1],\n                is_internal: fields[2] as bool,\n                is_private: fields[3] as bool,\n                is_constructor: fields[4] as bool,\n            },\n            public_inputs: PrivateCircuitPublicInputs {\n                call_context: CallContext {\n                    msg_sender : fields[5],\n                    storage_contract_address : fields[6],\n                    portal_contract_address : fields[7],\n                    function_selector: fields[8], // practically same as fields[1]\n                    is_delegate_call : fields[9] as bool,\n                    is_static_call : fields[10] as bool,\n                    is_contract_deployment: fields[11] as bool,\n                },\n                // TODO handle the offsets as a variable incremented during extraction?\n                args_hash: fields[12],\n                return_values: arr_copy_slice(fields, [0; RETURN_VALUES_LENGTH], 13),\n                read_requests: arr_copy_slice(fields, [0; MAX_READ_REQUESTS_PER_CALL], 17),\n                new_commitments: arr_copy_slice(fields, [0; MAX_NEW_COMMITMENTS_PER_CALL], 49),\n                new_nullifiers: arr_copy_slice(fields, [0; MAX_NEW_NULLIFIERS_PER_CALL], 65),\n                nullified_commitments: arr_copy_slice(fields, [0; MAX_NEW_NULLIFIERS_PER_CALL], 81),\n                private_call_stack: arr_copy_slice(fields, [0; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL], 97),\n                public_call_stack: arr_copy_slice(fields, [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL], 101),\n                new_l2_to_l1_msgs: arr_copy_slice(fields, [0; MAX_NEW_L2_TO_L1_MSGS_PER_CALL], 105),\n                encrypted_logs_hash: arr_copy_slice(fields, [0; NUM_FIELDS_PER_SHA256], 107),\n                unencrypted_logs_hash: arr_copy_slice(fields, [0; NUM_FIELDS_PER_SHA256], 109),\n                encrypted_log_preimages_length: fields[111],\n                unencrypted_log_preimages_length: fields[112],\n                block_data: HistoricBlockData {\n                    // Must match order in `private_circuit_public_inputs.hpp`\n                    private_data_tree_root : fields[113],\n                    nullifier_tree_root : fields[114],\n                    contract_tree_root : fields[115],\n                    l1_to_l2_messages_tree_root : fields[116],\n                    blocks_tree_root : fields[117],\n                    public_data_tree_root: fields[118],\n                    global_variables_hash: fields[119],\n                },\n                contract_deployment_data: ContractDeploymentData {\n                    deployer_public_key: Point::new(fields[120], fields[121]),\n                    constructor_vk_hash : fields[122],\n                    function_tree_root : fields[123],\n                    contract_address_salt : fields[124],\n                    portal_contract_address : fields[125],\n                },\n                chain_id: fields[126],\n                version: fields[127],\n            },\n            is_execution_request: fields[128] as bool,\n        };\n        assert(contract_address == item.contract_address);\n        assert(function_selector == item.function_data.function_selector);\n\n        assert(args_hash == item.public_inputs.args_hash);\n\n        assert(item.is_execution_request == false);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        // We are issuing a regular call which is not delegate, static, or deployment. We also constrain\n        // the msg_sender in the nested call to be equal to our address, and the execution context address\n        // for the nested call to be equal to the address we actually called.\n        assert(item.public_inputs.call_context.is_delegate_call == false);\n        assert(item.public_inputs.call_context.is_static_call == false);\n        assert(item.public_inputs.call_context.is_contract_deployment == false);\n        assert(item.public_inputs.call_context.msg_sender == self.inputs.call_context.storage_contract_address);\n        assert(item.public_inputs.call_context.storage_contract_address == contract_address);\n\n        self.private_call_stack.push(item.hash());\n\n        item.public_inputs.return_values\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash)\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field,\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0)\n    }\n\n    pub fn call_public_function_with_packed_args(\n        &mut self,\n        contract_address: Field,\n        function_selector: Field,\n        args_hash: Field\n    ) {\n        let fields = enqueue_public_function_call_internal(\n            contract_address, \n            function_selector, \n            args_hash\n        );\n        let item = PublicCallStackItem {\n            contract_address: fields[0],\n            function_data: FunctionData {\n                function_selector: fields[1],\n                is_internal: fields[2] as bool,\n                is_private: fields[3] as bool,\n                is_constructor: fields[4] as bool,\n            },\n            public_inputs: PublicCircuitPublicInputs {\n                call_context: CallContext {\n                    msg_sender : fields[5],\n                    storage_contract_address : fields[6],\n                    portal_contract_address : fields[7],\n                    function_selector: fields[8], // practically same as fields[1]\n                    is_delegate_call : fields[9] as bool,\n                    is_static_call : fields[10] as bool,\n                    is_contract_deployment: fields[11] as bool,\n                },\n                args_hash: fields[12],\n                return_values: [0; RETURN_VALUES_LENGTH],\n                contract_storage_update_requests: [ContractStorageUpdateRequest::empty(); MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n                contract_storage_read: [ContractStorageRead::empty(); MAX_PUBLIC_DATA_READS_PER_CALL],\n                public_call_stack: [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n                new_commitments: [0; MAX_NEW_COMMITMENTS_PER_CALL],\n                new_nullifiers: [0; MAX_NEW_NULLIFIERS_PER_CALL],\n                new_l2_to_l1_msgs:[0; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n                unencrypted_logs_hash:[0; NUM_FIELDS_PER_SHA256],\n                unencrypted_log_preimages_length: 0,\n                block_data: HistoricBlockData::empty(),\n                prover_address: 0,\n            },\n            is_execution_request: true,\n        };\n\n        assert(contract_address == item.contract_address);\n        assert(function_selector == item.function_data.function_selector);\n        \n        assert(args_hash == item.public_inputs.args_hash);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        // We are issuing a regular call which is not delegate, static, or deployment. We also constrain\n        // the msg_sender in the nested call to be equal to our address, and the execution context address\n        // for the nested call to be equal to the address we actually called.\n        assert(item.public_inputs.call_context.is_delegate_call == false);\n        assert(item.public_inputs.call_context.is_static_call == false);\n        assert(item.public_inputs.call_context.is_contract_deployment == false);\n        assert(item.public_inputs.call_context.msg_sender == self.inputs.call_context.storage_contract_address);\n        assert(item.public_inputs.call_context.storage_contract_address == contract_address);\n\n        self.public_call_stack.push(item.hash());\n    }\n}\n\nuse crate::abi::{\n    ContractStorageRead,\n    ContractStorageUpdateRequest\n};\n\nstruct PublicContext {\n    inputs: abi::PublicContextInputs,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    contract_storage_update_requests: BoundedVec<ContractStorageUpdateRequest, MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL>,\n    contract_storage_read: BoundedVec<ContractStorageRead, MAX_PUBLIC_DATA_READS_PER_CALL>,\n    public_call_stack: BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n\n    new_commitments: BoundedVec<Field, MAX_NEW_COMMITMENTS_PER_CALL>,\n    new_nullifiers: BoundedVec<Field, crate::abi::MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    new_l2_to_l1_msgs: BoundedVec<Field, crate::abi::MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n\n    unencrypted_logs_hash: BoundedVec<Field, NUM_FIELDS_PER_SHA256>,\n    unencrypted_logs_preimages_length: Field,\n\n    block_data: HistoricBlockData,\n    prover_address: Field,\n}\n\nimpl PublicContext {\n    pub fn new(inputs: abi::PublicContextInputs, args_hash: Field) -> PublicContext {\n        let empty_storage_read = ContractStorageRead::empty();\n        let empty_storage_update = ContractStorageUpdateRequest::empty();\n        PublicContext {\n            inputs: inputs,\n\n            args_hash: args_hash,\n            return_values: BoundedVec::new(0),\n\n            contract_storage_update_requests: BoundedVec::new(empty_storage_update),\n            contract_storage_read: BoundedVec::new(empty_storage_read),\n            public_call_stack: BoundedVec::new(0),\n\n            new_commitments: BoundedVec::new(0),\n            new_nullifiers: BoundedVec::new(0),\n\n            new_l2_to_l1_msgs: BoundedVec::new(0),\n\n            \n            unencrypted_logs_hash: BoundedVec::new(0),\n            unencrypted_logs_preimages_length: 0,\n\n            block_data: inputs.block_data,\n            prover_address: 0,\n\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n        }\n    }\n\n    pub fn msg_sender(self) -> Field {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> Field {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    pub fn this_portal_address(self) -> Field {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.public_global_variables.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.public_global_variables.version\n    }\n\n    pub fn selector(self) -> Field {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn block_number(self) -> Field {\n        self.inputs.public_global_variables.block_number\n    }\n\n    pub fn timestamp(self) -> Field {\n        self.inputs.public_global_variables.timestamp\n    }\n\n    pub fn finish(self) -> abi::PublicCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_log_preimages_length = 0;\n\n\n        // Compute the public call stack hashes\n        let pub_circuit_pub_inputs = abi::PublicCircuitPublicInputs {\n            call_context: self.inputs.call_context, // Done\n            args_hash: self.args_hash, // Done\n            contract_storage_update_requests: self.contract_storage_update_requests.storage,\n            contract_storage_read: self.contract_storage_read.storage,\n            return_values: self.return_values.storage,\n            new_commitments: self.new_commitments.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            public_call_stack: self.public_call_stack.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            unencrypted_logs_hash: unencrypted_logs_hash,\n            unencrypted_log_preimages_length: unencrypted_log_preimages_length,\n            block_data: self.inputs.block_data,\n            prover_address: self.prover_address,\n        };\n        pub_circuit_pub_inputs\n    }\n\n    pub fn push_new_note_hash(&mut self, note_hash: Field) {\n        self.new_commitments.push(note_hash);\n    }\n\n    pub fn push_new_nullifier(&mut self, nullifier: Field, _nullified_commitment: Field) {\n        self.new_nullifiers.push(nullifier);\n    }\n\n    pub fn message_portal(&mut self, content: Field) {\n        self.new_l2_to_l1_msgs.push(content);\n    }\n\n    // PrivateContextInputs must be temporarily passed in to prevent too many unknowns\n    // Note this returns self to get around an issue where mutable structs do not maintain mutations unless reassigned\n    pub fn consume_l1_to_l2_message(&mut self, msg_key: Field, content: Field, secret: Field) {\n        let this = (*self).this_address();\n        let nullifier = process_l1_to_l2_message(self.block_data.l1_to_l2_messages_tree_root, this, msg_key, content, secret);\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, EMPTY_NULLIFIED_COMMITMENT)\n    }\n\n    pub fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        _self: Self,\n        contract_address: Field, \n        function_selector: Field,\n        args: [Field; ARGS_COUNT],\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = abi::hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        call_public_function_internal(\n            contract_address, \n            function_selector, \n            args_hash,\n        )\n    }\n\n    pub fn call_public_function_no_args(\n        _self: Self,\n        contract_address: Field, \n        function_selector: Field,\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        call_public_function_internal(\n            contract_address, \n            function_selector, \n            0,\n        )\n    }\n\n}\n\nstruct Context {\n    private: Option<&mut PrivateContext>,\n    public: Option<&mut PublicContext>,\n}\n\nimpl Context {\n    pub fn private(context: &mut PrivateContext) -> Context {\n        Context {\n            private: Option::some(context),\n            public: Option::none()\n        }\n    }\n\n    pub fn public(context: &mut PublicContext) -> Context {\n        Context {\n            public: Option::some(context),\n            private: Option::none()\n        }\n    }\n\n    pub fn none() -> Context {\n        Context {\n            public: Option::none(),\n            private: Option::none()\n        }\n    }\n}",
        "path": "/home/maga/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.8.14/yarn-project/aztec-nr/aztec/src/context"
      },
      "46": {
        "source": "use dep::std::option::Option;\nuse crate::abi::PublicContextInputs;\nuse crate::context::{\n    PrivateContext,\n    PublicContext,\n};\nuse crate::note::{\n    note_header::NoteHeader,\n    note_interface::NoteInterface,\n    utils::compute_inner_note_hash,\n};\nuse crate::oracle::notes::{notify_created_note, notify_nullified_note};\nuse crate::constants_gen::EMPTY_NULLIFIED_COMMITMENT;\n\npub fn create_note<Note, N>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note: &mut Note,\n    note_interface: NoteInterface<Note, N>,\n) {\n    let contract_address = (*context).this_address();\n\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, is_transient: true };\n    let set_header = note_interface.set_header;\n    set_header(note, header);\n    let inner_note_hash = compute_inner_note_hash(note_interface, *note);\n\n    let serialize = note_interface.serialize;\n    let preimage = serialize(*note);\n    assert(notify_created_note(storage_slot, preimage, inner_note_hash) == 0);\n\n    context.push_new_note_hash(inner_note_hash);\n}\n\npub fn create_note_hash_from_public<Note, N>(\n    context: &mut PublicContext,\n    storage_slot: Field,\n    note: &mut Note,\n    note_interface: NoteInterface<Note, N>,\n) {\n    let contract_address = (*context).this_address();\n\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, is_transient: true };\n    let set_header = note_interface.set_header;\n    set_header(note, header);\n    let inner_note_hash = compute_inner_note_hash(note_interface, *note);\n\n    context.push_new_note_hash(inner_note_hash);\n}\n\npub fn destroy_note<Note, N>(\n    context: &mut PrivateContext,\n    note: Note,\n    note_interface: NoteInterface<Note, N>,\n) {\n    let mut nullifier = 0;\n    let mut nullified_commitment: Field = EMPTY_NULLIFIED_COMMITMENT;\n    let compute_nullifier = note_interface.compute_nullifier;\n    nullifier = compute_nullifier(note);\n\n    // We also need the note commitment corresponding to the \"nullifier\"\n    let get_header = note_interface.get_header;\n    let header = get_header(note);\n    // `nullified_commitment` is used to inform the kernel which pending commitment\n    // the nullifier corresponds to so they can be matched and both squashed/deleted.\n    // nonzero nonce implies \"persistable\" nullifier (nullifies a persistent/in-tree\n    // commitment) in which case `nullified_commitment` is not used since the kernel\n    // just siloes and forwards the nullier to its output.\n    if (header.is_transient) {\n        // TODO(1718): Can we reuse the note commitment computed in `compute_nullifier`?\n        nullified_commitment = compute_inner_note_hash(note_interface, note);\n    }\n    assert(notify_nullified_note(nullifier, nullified_commitment) == 0);\n\n    context.push_new_nullifier(nullifier, nullified_commitment)\n}",
        "path": "/home/maga/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.8.14/yarn-project/aztec-nr/aztec/src/note/lifecycle"
      },
      "47": {
        "source": "use dep::std::option::Option;\nuse crate::constants_gen::{\n    MAX_READ_REQUESTS_PER_CALL,\n    GET_NOTE_ORACLE_RETURN_LENGTH,\n    GET_NOTES_ORACLE_RETURN_LENGTH,\n    MAX_NOTES_PER_PAGE,\n    VIEW_NOTE_ORACLE_RETURN_LENGTH,\n};\nuse crate::context::PrivateContext;\nuse crate::note::{\n    note_getter_options::{NoteGetterOptions, Select, Sort, SortOrder},\n    note_interface::NoteInterface,\n    note_viewer_options::NoteViewerOptions,\n    utils::compute_note_hash_for_read_or_nullify,\n};\nuse crate::oracle;\nuse crate::types::vec::BoundedVec;\n\nfn check_note_header<Note, N>(\n    context: PrivateContext,\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    note: Note,\n) {\n    let get_header = note_interface.get_header;\n    let header = get_header(note);\n    let contract_address = context.this_address();\n    assert(header.contract_address == contract_address);\n    assert(header.storage_slot == storage_slot);\n}\n\nfn check_note_fields<N>(\n    fields: [Field; N],\n    selects: BoundedVec<Option<Select>, N>,\n) {\n    for i in 0..selects.len {\n        let select = selects.get_unchecked(i).unwrap_unchecked();\n        assert(fields[select.field_index] == select.value, \"Mismatch return note field.\");\n    }\n}\n\nfn check_notes_order<N>(fields_0: [Field; N], fields_1: [Field; N], sorts: BoundedVec<Option<Sort>, N>) {\n    for i in 0..sorts.len {\n        let sort = sorts.get_unchecked(i).unwrap_unchecked();\n        let eq = fields_0[sort.field_index] == fields_1[sort.field_index];\n        let lt = fields_0[sort.field_index] as u120 < fields_1[sort.field_index] as u120;\n        if sort.order == SortOrder.ASC {\n            assert(eq | lt, \"Return notes not sorted in ascending order.\");\n        } else if !eq {\n            assert(!lt, \"Return notes not sorted in descending order.\");\n        }\n    }\n}\n\npub fn get_note<Note, N>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n) -> Note {\n    let note = get_note_internal(storage_slot, note_interface);\n\n    check_note_header(*context, storage_slot, note_interface, note);\n\n    let note_hash_for_read_request = compute_note_hash_for_read_or_nullify(note_interface, note);\n\n    context.push_read_request(note_hash_for_read_request);\n    note\n}\n\npub fn get_notes<Note, N, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    options: NoteGetterOptions<Note, N, FILTER_ARGS>,\n) -> [Option<Note>; MAX_READ_REQUESTS_PER_CALL] {\n    let opt_notes = get_notes_internal(storage_slot, note_interface, options);\n    let mut num_notes = 0;\n    let mut prev_fields = [0; N];\n    for i in 0..opt_notes.len() {\n        let opt_note = opt_notes[i];\n        if opt_note.is_some() {\n            let note = opt_note.unwrap_unchecked();\n            let serialize = note_interface.serialize;\n            let fields = serialize(note);\n            check_note_header(*context, storage_slot, note_interface, note);\n            check_note_fields(fields, options.selects);\n            if i != 0 {\n                check_notes_order(prev_fields, fields, options.sorts);\n            }\n            prev_fields = fields;\n\n            let note_hash_for_read_request = compute_note_hash_for_read_or_nullify(note_interface, note);\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1410): test to ensure\n            // failure if malicious oracle injects 0 nonce here for a \"pre-existing\" note.\n            context.push_read_request(note_hash_for_read_request);\n\n            num_notes += 1;\n        };\n    };\n    if options.limit != 0 {\n        assert(num_notes <= options.limit, \"Invalid number of return notes.\");\n    }\n    opt_notes\n}\n\nunconstrained fn get_note_internal<Note, N>(\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n) -> Note {\n    let placeholder_note = [Option::none()];\n    let placeholder_fields = [0; GET_NOTE_ORACLE_RETURN_LENGTH];\n    oracle::notes::get_notes(\n        storage_slot,\n        note_interface,\n        0,\n        [],\n        [],\n        [],\n        [],\n        1, // limit\n        0, // offset\n        placeholder_note,\n        placeholder_fields,\n    )[0].unwrap() // Notice: we don't allow dummies to be returned from get_note (singular).\n}\n\nunconstrained fn get_notes_internal<Note, N, FILTER_ARGS>(\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    options: NoteGetterOptions<Note, N, FILTER_ARGS>,\n) -> [Option<Note>; MAX_READ_REQUESTS_PER_CALL] {\n    let (num_selects, select_by, select_values, sort_by, sort_order) = flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_READ_REQUESTS_PER_CALL];\n    let placeholder_fields = [0; GET_NOTES_ORACLE_RETURN_LENGTH];\n    let opt_notes = oracle::notes::get_notes(\n        storage_slot,\n        note_interface,\n        num_selects,\n        select_by,\n        select_values,\n        sort_by,\n        sort_order,\n        options.limit,\n        options.offset,\n        placeholder_opt_notes,\n        placeholder_fields,\n    );\n\n    let filter = options.filter;\n    let filter_args = options.filter_args;\n    filter(opt_notes, filter_args)\n}\n\nunconstrained pub fn view_notes<Note, N>(\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    options: NoteViewerOptions<Note, N>,\n) -> [Option<Note>; MAX_NOTES_PER_PAGE] {\n    let (num_selects, select_by, select_values, sort_by, sort_order) = flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_NOTES_PER_PAGE];\n    let placeholder_fields = [0; VIEW_NOTE_ORACLE_RETURN_LENGTH];\n    oracle::notes::get_notes(\n        storage_slot,\n        note_interface,\n        num_selects,\n        select_by,\n        select_values,\n        sort_by,\n        sort_order,\n        options.limit,\n        options.offset,\n        placeholder_opt_notes,\n        placeholder_fields,\n    )\n}\n\nunconstrained fn flatten_options<Note, N>(\n    selects: BoundedVec<Option<Select>, N>,\n    sorts: BoundedVec<Option<Sort>, N>,\n) -> (u8, [u8; N], [Field; N], [u8; N], [u2; N]) {\n    let mut num_selects = 0;\n    let mut select_by = [0; N];\n    let mut select_values = [0; N];\n    for i in 0..selects.len {\n        let select = selects.get(i);\n        if select.is_some() {\n            select_by[num_selects] = select.unwrap_unchecked().field_index;\n            select_values[num_selects] = select.unwrap_unchecked().value;\n            num_selects += 1;\n        };\n    };\n\n    let mut sort_by = [0; N];\n    let mut sort_order = [0; N];\n    for i in 0..sorts.len {\n        let sort = sorts.get(i);\n        if sort.is_some() {\n            sort_by[i] = sort.unwrap_unchecked().field_index;\n            sort_order[i] = sort.unwrap_unchecked().order;\n        };\n    };\n\n    (num_selects, select_by, select_values, sort_by, sort_order)\n}",
        "path": "/home/maga/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.8.14/yarn-project/aztec-nr/aztec/src/note/note_getter"
      },
      "49": {
        "source": "use dep::std::hash::{pedersen, pedersen_with_separator};\nuse crate::constants_gen::{GENERATOR_INDEX__UNIQUE_COMMITMENT, GENERATOR_INDEX__SILOED_COMMITMENT};\n\npub fn compute_inner_hash(storage_slot: Field, note_hash: Field) -> Field {\n    // TODO(#1205) Do we need a generator index here?\n    pedersen([storage_slot, note_hash])[0]\n}\n\npub fn compute_siloed_hash(contract_address: Field, inner_note_hash: Field) -> Field {\n    let inputs = [contract_address, inner_note_hash];\n    pedersen_with_separator(inputs, GENERATOR_INDEX__SILOED_COMMITMENT)[0]\n}\n\npub fn compute_unique_hash(nonce: Field, siloed_note_hash: Field) -> Field {\n    let inputs = [nonce, siloed_note_hash];\n    pedersen_with_separator(inputs, GENERATOR_INDEX__UNIQUE_COMMITMENT)[0]\n}\n",
        "path": "/home/maga/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.8.14/yarn-project/aztec-nr/aztec/src/note/note_hash"
      },
      "53": {
        "source": "use crate::note::{\n    note_hash::{compute_inner_hash, compute_siloed_hash, compute_unique_hash},\n    note_header::NoteHeader,\n    note_interface::NoteInterface,\n};\nuse crate::utils::arr_copy_slice;\n\npub fn compute_inner_note_hash<Note, N>(\n    note_interface: NoteInterface<Note, N>,\n    note: Note,\n) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note);\n\n    let compute_note_hash = note_interface.compute_note_hash;\n    let note_hash = compute_note_hash(note);\n\n    compute_inner_hash(header.storage_slot, note_hash)\n}\n\npub fn compute_siloed_note_hash<Note, N>(\n    note_interface: NoteInterface<Note, N>,\n    note_with_header: Note,\n) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note_with_header);\n\n    let inner_note_hash = compute_inner_note_hash(note_interface, note_with_header);\n\n    compute_siloed_hash(header.contract_address, inner_note_hash)\n}\n\npub fn compute_unique_siloed_note_hash<Note, N>(\n    note_interface: NoteInterface<Note, N>,\n    note_with_header: Note,\n) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note_with_header);\n\n    let siloed_note_hash = compute_siloed_note_hash(note_interface, note_with_header);\n\n    compute_unique_hash(header.nonce, siloed_note_hash)\n}\n\npub fn compute_note_hash_for_read_or_nullify<Note, N>(\n    note_interface: NoteInterface<Note, N>,\n    note_with_header: Note,\n) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note_with_header);\n\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1386)\n    if (header.is_transient) {\n        // If a note is transient, we just read the inner_note_hash (kernel will silo by contract address).\n        compute_inner_note_hash(note_interface, note_with_header)\n    } else if (header.nonce == 0) {\n        // If not transient and nonce is zero, that means we are reading a public note.\n        compute_siloed_note_hash(note_interface, note_with_header)\n    } else {\n        // When nonce is nonzero, that means we are reading a settled note (from tree) created in a\n        // previous TX. So we need the unique_siloed_note_hash which has already been hashed with\n        // contract address and then nonce. This hash will match the existing leaf in the private\n        // data tree, so the kernel can just perform a membership check directly on this hash/leaf.\n        compute_unique_siloed_note_hash(note_interface, note_with_header)\n    }\n\n}\n\npub fn compute_note_hash_and_nullifier<Note, N, S>(\n    note_interface: NoteInterface<Note, N>,\n    note_header: NoteHeader,\n    preimage: [Field; S],\n) -> [Field; 4] {\n    let deserialize = note_interface.deserialize;\n    let set_header = note_interface.set_header;\n    let mut note = deserialize(arr_copy_slice(preimage, [0; N], 0));\n    set_header(&mut note, note_header);\n\n    let compute_note_hash = note_interface.compute_note_hash;\n    let note_hash = compute_note_hash(note);\n    let inner_note_hash = compute_inner_hash(note_header.storage_slot, note_hash);\n\n    let siloed_note_hash = compute_siloed_hash(note_header.contract_address, inner_note_hash);\n\n    let unique_siloed_note_hash = compute_unique_hash(note_header.nonce, siloed_note_hash);\n\n    let compute_nullifier = note_interface.compute_nullifier;\n    let inner_nullifier = compute_nullifier(note);\n\n    [inner_note_hash, siloed_note_hash, unique_siloed_note_hash, inner_nullifier]\n}\n",
        "path": "/home/maga/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.8.14/yarn-project/aztec-nr/aztec/src/note/utils"
      },
      "55": {
        "source": "#[oracle(packArguments)]\nfn pack_arguments_oracle<N>(_args: [Field; N]) -> Field {}\n\n// TODO: explain what this does.\nunconstrained pub fn pack_arguments<N>(args: [Field; N]) -> Field {\n    pack_arguments_oracle(args)\n}\n",
        "path": "/home/maga/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.8.14/yarn-project/aztec-nr/aztec/src/oracle/arguments"
      },
      "60": {
        "source": "use crate::types::point::Point;\nuse crate::address::compute_address;\n\n#[oracle(getPublicKey)]\nfn get_public_key_oracle(_address: Field) -> [Field; 3] {}\n\nunconstrained fn get_public_key_internal(address: Field) -> [Field; 3] {\n  get_public_key_oracle(address)\n}\n\npub fn get_public_key(address: Field) -> Point {\n  let result = get_public_key_internal(address);\n  let pub_key_x = result[0];\n  let pub_key_y = result[1];\n  let partial_address = result[2];\n  \n  let calculated_address = compute_address(pub_key_x, pub_key_y, partial_address);\n  assert(calculated_address == address);\n  \n  Point::new(pub_key_x, pub_key_y)\n}\n",
        "path": "/home/maga/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.8.14/yarn-project/aztec-nr/aztec/src/oracle/get_public_key"
      },
      "61": {
        "source": "use crate::oracle::get_public_key::get_public_key;\nuse crate::types::point::Point;\n\n#[oracle(getSecretKey)]\nfn get_secret_key_oracle(\n    _owner: Point,\n) -> [Field; dep::std::grumpkin_scalar::GRUMPKIN_SCALAR_SERIALIZED_LEN] {\n}\n\nunconstrained fn get_secret_key_internal(owner_public_key: Point) -> dep::std::grumpkin_scalar::GrumpkinScalar {\n    dep::std::grumpkin_scalar::deserialize_grumpkin_scalar(get_secret_key_oracle(owner_public_key))\n}\n\npub fn get_secret_key(owner: Field) -> dep::std::grumpkin_scalar::GrumpkinScalar {\n    let owner_public_key = get_public_key(owner);\n    let secret = get_secret_key_internal(owner_public_key);\n\n    // Constrain the owner - Nullifier secret key is currently just the encryption private key so we can constrain\n    // the owner by deriving the public key from the secret key and checking the result.\n    let computed_public_key = dep::std::grumpkin_scalar_mul::grumpkin_fixed_base(secret);\n    assert(owner_public_key.x == computed_public_key[0]);\n    assert(owner_public_key.y == computed_public_key[1]);\n\n    secret\n}\n",
        "path": "/home/maga/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.8.14/yarn-project/aztec-nr/aztec/src/oracle/get_secret_key"
      },
      "63": {
        "source": "\n// contract_address + \n// args_hash +\n// crate::abi::FUNCTION_DATA_SIZE +\n// crate::abi::CALL_CONTEXT_SIZE +\n// = 2 + 4 + 7\nglobal ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE: Field = 13;\n\n#[oracle(enqueuePublicFunctionCall)]\nfn enqueue_public_function_call_oracle(\n    _contract_address: Field, \n    _function_selector: Field, \n    _args_hash: Field,\n) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE] {}\n\nunconstrained pub fn enqueue_public_function_call_internal(\n    contract_address: Field, \n    function_selector: Field,\n    args_hash: Field\n) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE] {\n    enqueue_public_function_call_oracle(\n        contract_address, \n        function_selector, \n        args_hash,\n    )\n}",
        "path": "/home/maga/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.8.14/yarn-project/aztec-nr/aztec/src/oracle/enqueue_public_function_call"
      },
      "65": {
        "source": "use dep::std::option::Option;\nuse crate::note::{\n    note_header::NoteHeader,\n    note_interface::NoteInterface,\n};\nuse crate::utils::arr_copy_slice;\n\n#[oracle(notifyCreatedNote)]\nfn notify_created_note_oracle<N>(\n    _storage_slot: Field,\n    _preimage: [Field; N],\n    _inner_note_hash: Field,\n) -> Field {}\n\nunconstrained pub fn notify_created_note<N>(\n    storage_slot: Field,\n    preimage: [Field; N],\n    inner_note_hash: Field,\n) -> Field {\n    notify_created_note_oracle(storage_slot, preimage, inner_note_hash)\n}\n\n#[oracle(notifyNullifiedNote)]\nfn notify_nullified_note_oracle<N>(\n    _nullifier: Field,\n    _inner_note_hash: Field,\n) -> Field {}\n\nunconstrained pub fn notify_nullified_note<N>(\n    nullifier: Field,\n    inner_note_hash: Field,\n) -> Field {\n    notify_nullified_note_oracle(nullifier, inner_note_hash)\n}\n\n#[oracle(getNotes)]\nfn get_notes_oracle<N, S>(\n    _storage_slot: Field,\n    _num_selects: u8,\n    _select_by: [u8; N],\n    _select_values: [Field; N],\n    _sort_by: [u8; N],\n    _sort_order: [u2; N],\n    _limit: u32,\n    _offset: u32,\n    _return_size: u32,\n    _placeholder_fields: [Field; S],\n) -> [Field; S] {}\n\nunconstrained fn get_notes_oracle_wrapper<N, S>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by: [u8; N],\n    select_values: [Field; N],\n    sort_by: [u8; N],\n    sort_order: [u2; N],\n    limit: u32,\n    offset: u32,\n    mut placeholder_fields: [Field; S],\n)-> [Field; S] {\n    let return_size = placeholder_fields.len() as u32;\n    get_notes_oracle(storage_slot, num_selects, select_by, select_values, sort_by, sort_order, limit, offset, return_size, placeholder_fields)\n}\n\nunconstrained pub fn get_notes<Note, N, M, S, NS>(\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    num_selects: u8,\n    select_by: [u8; M],\n    select_values: [Field; M],\n    sort_by: [u8; M],\n    sort_order: [u2; M],\n    limit: u32,\n    offset: u32,\n    mut placeholder_opt_notes: [Option<Note>; S], // TODO: Remove it and use `limit` to initialize the note array.\n    placeholder_fields: [Field; NS], // TODO: Remove it and use `limit` to initialize the note array.\n) -> [Option<Note>; S] {\n    let fields = get_notes_oracle_wrapper(storage_slot, num_selects, select_by, select_values, sort_by, sort_order, limit, offset, placeholder_fields);\n    let num_notes = fields[0] as u32;\n    let contract_address = fields[1];\n    let deserialize = note_interface.deserialize;\n    let set_header = note_interface.set_header;\n    for i in 0..placeholder_opt_notes.len() {\n        if i as u32 < num_notes {\n            // lengths named as per typescript.\n            let return_header_length: Field = 2; // num_notes & contract_address.\n            let extra_preimage_length: Field = 2; // nonce & is_transient.\n            let read_offset: Field = return_header_length + i * (N + extra_preimage_length);\n            let nonce = fields[read_offset];\n            let is_transient = fields[read_offset + 1] as bool;\n            let header = NoteHeader { contract_address, nonce, storage_slot, is_transient };\n            let preimage = arr_copy_slice(fields, [0; N], read_offset + 2);\n            let mut note = deserialize(preimage);\n            set_header(&mut note, header);\n            placeholder_opt_notes[i] = Option::some(note);\n        };\n    };\n    placeholder_opt_notes\n}\n\n#[oracle(checkNullifierExists)]\nfn check_nullifier_exists_oracle(\n    _inner_nullifier: Field,\n) -> Field {}\n\nunconstrained pub fn check_nullifier_exists(inner_nullifier: Field) -> bool {\n    check_nullifier_exists_oracle(inner_nullifier) == 1\n}",
        "path": "/home/maga/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.8.14/yarn-project/aztec-nr/aztec/src/oracle/notes"
      },
      "66": {
        "source": "\n#[oracle(storageRead)]\nfn storage_read_oracle<N>(\n    _storage_slot: Field,\n    _number_of_elements: Field,\n) -> [Field; N] {}\n\nunconstrained fn storage_read_oracle_wrapper<N>(_storage_slot: Field)-> [Field; N] {\n    storage_read_oracle(_storage_slot, N)\n}\n\npub fn storage_read<T, N>(\n    storage_slot: Field,\n    deserialize: fn ([Field; N]) -> T,\n) -> T {\n    let fields = storage_read_oracle_wrapper(storage_slot);\n    deserialize(fields)\n}\n\n#[oracle(storageWrite)]\nfn storage_write_oracle<N>(\n    _storage_slot: Field,\n    _values: [Field; N],\n) -> [Field; N] {}\n\n// TODO: Remove return value.\nunconstrained pub fn storage_write<N>(\n    storage_slot: Field,\n    fields: [Field; N]\n) {\n    let _hash = storage_write_oracle(storage_slot, fields);\n}",
        "path": "/home/maga/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.8.14/yarn-project/aztec-nr/aztec/src/oracle/storage"
      },
      "69": {
        "source": "use crate::{\n    abi,\n    abi::{\n        PublicCircuitPublicInputs,\n        FunctionData,\n    },\n};\nuse crate::constants_gen::{\n    RETURN_VALUES_LENGTH,\n    GENERATOR_INDEX__CALL_STACK_ITEM,\n};\n\n// oracles\nuse crate::oracle::{\n    enqueue_public_function_call::enqueue_public_function_call_internal,\n};\n\nstruct PublicCallStackItem {\n    contract_address: Field,\n    function_data: FunctionData,\n    public_inputs: PublicCircuitPublicInputs,\n    is_execution_request: bool,\n}\n\nimpl PublicCallStackItem {\n    pub fn hash(self) -> Field {\n        dep::std::hash::pedersen_with_separator([\n            self.contract_address,\n            self.function_data.hash(),\n            self.public_inputs.hash(),\n        ], GENERATOR_INDEX__CALL_STACK_ITEM)[0]\n    }\n}\n\n",
        "path": "/home/maga/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.8.14/yarn-project/aztec-nr/aztec/src/public_call_stack_item"
      },
      "73": {
        "source": "use crate::context::{PrivateContext, PublicContext, Context};\nuse dep::std::option::Option;\n\n// docs:start:map\nstruct Map<V> {\n    context: Context,\n    storage_slot: Field,\n    state_var_constructor: fn(Context, Field) -> V,\n}\n// docs:end:map\n\nimpl<V> Map<V> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        state_var_constructor: fn(Context, Field) -> V,\n    ) -> Map<V> {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Map {\n            context,\n            storage_slot,\n            state_var_constructor,\n        }\n    }\n    // docs:end:new\n\n    // docs:start:at\n    pub fn at(self, key: Field) -> V {\n        // TODO(#1204): use a generator index for the storage slot\n        let derived_storage_slot = dep::std::hash::pedersen([self.storage_slot, key])[0];\n\n        let state_var_constructor = self.state_var_constructor;\n        state_var_constructor(self.context, derived_storage_slot)\n    }\n    // docs:end:at\n}\n",
        "path": "/home/maga/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.8.14/yarn-project/aztec-nr/aztec/src/state_vars/map"
      },
      "74": {
        "source": "use crate::context::{Context};\nuse crate::oracle::storage::storage_read;\nuse crate::oracle::storage::storage_write;\nuse crate::types::type_serialization::TypeSerializationInterface;\nuse dep::std::option::Option;\n\n// docs:start:public_state_struct\nstruct PublicState<T, T_SERIALIZED_LEN> {\n    context: Context,\n    storage_slot: Field,\n    serialization_methods: TypeSerializationInterface<T, T_SERIALIZED_LEN>,\n}\n// docs:end:public_state_struct\n\nimpl<T, T_SERIALIZED_LEN> PublicState<T, T_SERIALIZED_LEN> {\n    // docs:start:public_state_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field,\n        serialization_methods: TypeSerializationInterface<T, T_SERIALIZED_LEN>,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicState {\n            context,\n            storage_slot,\n            serialization_methods,\n        }\n    }\n    // docs:end:public_state_struct_new\n\n    // docs:start:public_state_struct_read\n    pub fn read(self) -> T {\n        assert(self.context.private.is_none(), \"Public state writes only supported in public functions\");\n        storage_read(self.storage_slot, self.serialization_methods.deserialize)\n    }\n    // docs:end:public_state_struct_read\n\n    // docs:start:public_state_struct_write\n    pub fn write(self, value: T) {\n        assert(self.context.private.is_none(), \"Public state writes only supported in public functions\");\n        let serialize = self.serialization_methods.serialize;\n        let fields = serialize(value);\n        storage_write(self.storage_slot, fields);\n    }\n    // docs:end:public_state_struct_write\n}\n",
        "path": "/home/maga/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.8.14/yarn-project/aztec-nr/aztec/src/state_vars/public_state"
      },
      "76": {
        "source": "use dep::std::option::Option;\nuse crate::constants_gen::{EMPTY_NULLIFIED_COMMITMENT, GENERATOR_INDEX__INITIALIZATION_NULLIFIER};\nuse crate::context::{PrivateContext, PublicContext, Context};\nuse crate::note::{\n    lifecycle::{create_note, destroy_note},\n    note_getter::{get_note, view_notes},\n    note_interface::NoteInterface,\n    note_viewer_options::NoteViewerOptions,\n};\nuse crate::oracle::{\n    get_secret_key::get_secret_key,\n    notes::check_nullifier_exists,\n};\nuse dep::std::hash::pedersen_with_separator;\n\npub fn compute_singleton_initialization_nullifier(storage_slot: Field, owner: Option<Field>) -> Field {\n    if owner.is_some() {\n        let secret = get_secret_key(owner.unwrap_unchecked());\n        pedersen_with_separator(\n            [storage_slot, secret.low, secret.high],\n            GENERATOR_INDEX__INITIALIZATION_NULLIFIER,\n        )[0]\n    } else {\n        pedersen_with_separator(\n            [storage_slot],\n            GENERATOR_INDEX__INITIALIZATION_NULLIFIER,\n        )[0]\n    }\n}\n\n// docs:start:struct\nstruct Singleton<Note, N> {\n    context: Option<&mut PrivateContext>,\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    compute_initialization_nullifier: fn (Field, Option<Field>) -> Field,\n}\n// docs:end:struct\n\nimpl<Note, N> Singleton<Note, N> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        note_interface: NoteInterface<Note, N>,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Singleton {\n            context: context.private,\n            storage_slot,\n            note_interface,\n            compute_initialization_nullifier: compute_singleton_initialization_nullifier,\n        }\n    }\n    // docs:end:new\n\n    // docs:start:is_initialized\n    unconstrained pub fn is_initialized(self, owner: Option<Field>) -> bool {\n        let compute_initialization_nullifier = self.compute_initialization_nullifier;\n        let nullifier = compute_initialization_nullifier(self.storage_slot, owner);\n        check_nullifier_exists(nullifier)\n    }\n    // docs:end:is_initialized\n\n    // docs:start:initialize\n    pub fn initialize(self, note: &mut Note, owner: Option<Field>) {\n        let context = self.context.unwrap();\n\n        // Nullify the storage slot.\n        let compute_initialization_nullifier = self.compute_initialization_nullifier;\n        let nullifier = compute_initialization_nullifier(self.storage_slot, owner);\n        context.push_new_nullifier(nullifier, EMPTY_NULLIFIED_COMMITMENT);\n\n        create_note(context, self.storage_slot, note, self.note_interface);\n    }\n    // docs:end:initialize\n\n    // docs:start:replace\n    pub fn replace(self, new_note: &mut Note) {\n        let context = self.context.unwrap();\n        let prev_note = get_note(context, self.storage_slot, self.note_interface);\n\n        // Nullify previous note.\n        destroy_note(context, prev_note, self.note_interface);\n\n        // Add replacement note.\n        create_note(context, self.storage_slot, new_note, self.note_interface);\n    }\n    // docs:end:replace\n\n    // docs:start:get_note\n    pub fn get_note(self) -> Note {\n        let context = self.context.unwrap();\n        let mut note = get_note(context, self.storage_slot, self.note_interface);\n\n        // Nullify current note to make sure it's reading the latest note.\n        destroy_note(context, note, self.note_interface);\n\n        // Add the same note again.\n        // Because a nonce is added to every note in the kernel, its nullifier will be different.\n        create_note(context, self.storage_slot, &mut note, self.note_interface);\n\n        note\n    }\n    // docs:end:get_note\n\n    unconstrained pub fn view_note(self) -> Note {\n        let options = NoteViewerOptions::new().set_limit(1);\n        view_notes(self.storage_slot, self.note_interface, options)[0].unwrap()\n    }\n}\n",
        "path": "/home/maga/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.8.14/yarn-project/aztec-nr/aztec/src/state_vars/singleton"
      },
      "80": {
        "source": "\nstruct BoundedVec<T, MaxLen> {\n    storage: [T; MaxLen],\n    len: Field,\n}\n\nimpl<T, MaxLen> BoundedVec<T, MaxLen> {\n    pub fn new(initial_value: T) -> Self {\n        BoundedVec { storage: [initial_value; MaxLen], len: 0 }\n    }\n\n    pub fn get(mut self: Self, index: Field) -> T {\n        assert(index as u64 < self.len as u64);\n        self.storage[index]\n    }\n\n    pub fn get_unchecked(mut self: Self, index: Field) -> T {\n        self.storage[index]\n    }\n\n    pub fn push(&mut self, elem: T) {\n        assert(self.len as u64 < MaxLen as u64);\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    pub fn push_array<Len>(&mut self, array: [T; Len]) {\n        let newLen = self.len + array.len();\n        assert(newLen as u64 <= MaxLen as u64);\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = newLen;\n    }\n\n    pub fn pop(&mut self) -> T {\n        assert(self.len as u64 > 0);\n\n        let elem = self.storage[self.len - 1];\n        self.len -= 1;\n        elem\n    }\n\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        let mut exceeded_len = false;\n        for i in 0..MaxLen {\n            exceeded_len |= i == self.len;\n            if (!exceeded_len) {\n                ret |= predicate(self.storage[i]);\n            }\n        }\n        ret\n    }\n}\n\n#[test]\nfn test_vec_push_pop() {\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(0);\n    assert(vec.len == 0);\n    vec.push(2);\n    assert(vec.len == 1);\n    vec.push(4);\n    assert(vec.len == 2);\n    vec.push(6);\n    assert(vec.len == 3);\n    let x = vec.pop();\n    assert(x == 6);\n    assert(vec.len == 2);\n    assert(vec.get(0) == 2);\n    assert(vec.get(1) == 4);\n}\n\n#[test]\nfn test_vec_push_array() {\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(0);\n    vec.push_array([2, 4]);\n    assert(vec.len == 2);\n    assert(vec.get(0) == 2);\n    assert(vec.get(1) == 4);\n}\n\n#[test(should_fail)]\nfn test_vec_get_out_of_bound() {\n    let mut vec: BoundedVec<Field, 2> = BoundedVec::new(0);\n    vec.push_array([2, 4]);\n    let _x = vec.get(2);\n}\n\n#[test(should_fail)]\nfn test_vec_get_not_declared() {\n    let mut vec: BoundedVec<Field, 2> = BoundedVec::new(0);\n    vec.push_array([2]);\n    let _x = vec.get(1);\n}\n\n#[test(should_fail)]\nfn test_vec_get_uninitialized() {\n    let mut vec: BoundedVec<Field, 2> = BoundedVec::new(0);\n    let _x = vec.get(0);\n}\n\n#[test(should_fail)]\nfn test_vec_push_overflow() {\n    let mut vec: BoundedVec<Field, 1> = BoundedVec::new(0);\n    vec.push(1);\n    vec.push(2);\n}\n\n#[test]\nfn test_vec_any() {\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(0);\n    vec.push_array([2, 4, 6]);\n    assert(vec.any(|v| v == 2) == true);\n    assert(vec.any(|v| v == 4) == true);\n    assert(vec.any(|v| v == 6) == true);\n    assert(vec.any(|v| v == 3) == false);\n}\n\n#[test]\nfn test_vec_any_not_default() {\n    let default_value = 1;\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(default_value);\n    vec.push_array([2, 4]);\n    assert(vec.any(|v| v == default_value) == false);\n}",
        "path": "/home/maga/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.8.14/yarn-project/aztec-nr/aztec/src/types/vec"
      },
      "85": {
        "source": "use crate::types::type_serialization::TypeSerializationInterface;\nuse crate::types::address::AztecAddress;\n\nglobal AZTEC_ADDRESS_SERIALIZED_LEN: Field = 1;\n\nfn deserialize(fields: [Field; AZTEC_ADDRESS_SERIALIZED_LEN]) -> AztecAddress {\n    AztecAddress::new(fields[0])\n}\n\nfn serialize(value: AztecAddress) -> [Field; AZTEC_ADDRESS_SERIALIZED_LEN] {\n    [value.address]\n}\n\nglobal AztecAddressSerializationMethods = TypeSerializationInterface {\n    deserialize,\n    serialize,\n};",
        "path": "/home/maga/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.8.14/yarn-project/aztec-nr/aztec/src/types/type_serialization/aztec_address_serialization"
      },
      "86": {
        "source": "pub fn arr_copy_slice<T, N, M>(\n    src: [T; N],\n    mut dst: [T; M],\n    offset: Field,\n) -> [T; M] {\n    for i in 0..dst.len() {\n        dst[i] = src[i + offset];\n    }\n    dst\n}\n\npub fn field_from_bytes<N>(bytes: [u8; N], big_endian: bool) -> Field {\n    assert(bytes.len() as u32 < 32, \"field_from_bytes: N must be less than 32\");\n    let mut as_field = 0;\n    let mut offset = 1;\n    for i in 0..N {\n        let mut index = i;\n        if big_endian {\n            index = N - i - 1;\n        }\n        as_field += (bytes[index] as Field) * offset;\n        offset *= 256;\n    }\n\n    as_field\n}",
        "path": "/home/maga/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.8.14/yarn-project/aztec-nr/aztec/src/utils"
      },
      "87": {
        "source": "struct SafeU120 {\n    value: u120,\n}\n\nimpl SafeU120 {\n    pub fn min() -> Self {\n        Self {\n            value: 0\n        }\n    }\n\n    pub fn max() -> Self {\n        Self {\n            value: 0xffffffffffffffffffffffffffffff\n        }\n    }\n\n    pub fn new(\n        value: Field,\n    ) -> Self {\n        // Check that it actually will fit. Spending a lot of constraints here :grimacing:\n        let bytes = value.to_be_bytes(32);\n        for i in 0..17 {\n            assert(bytes[i] == 0, \"Value too large for SafeU120\");\n        }\n        Self {\n            value: value as u120\n        }\n    }\n\n    pub fn is_zero(\n        self: Self,\n    ) -> bool {\n        self.value == 0\n    }\n\n    pub fn eq(\n        self: Self,\n        other: Self\n    ) -> bool {\n        self.value == other.value\n    }\n\n    pub fn lt(self: Self, other: Self) -> bool {\n        self.value < other.value\n    }\n\n    pub fn le(self: Self, other: Self) -> bool {\n        self.value <= other.value\n    }\n\n    pub fn gt(self: Self, other: Self) -> bool {\n        self.value > other.value\n    }\n\n    pub fn ge(self: Self, other: Self) -> bool {\n        self.value >= other.value\n    }\n\n    pub fn sub(\n      self: Self,\n      b: Self,\n    ) -> Self {\n        assert(self.value >= b.value, \"Underflow\");\n        Self {\n            value: self.value - b.value\n        }\n    }\n\n    pub fn add(\n        self: Self,\n        b: Self,\n    ) -> Self {\n        let c: u120 = self.value + b.value;\n        assert(c >= self.value, \"Overflow\");\n        Self {\n            value: c\n        }\n    }\n\n    pub fn mul(\n        self: Self,\n        b: Self,\n    ) -> Self {\n        let c: u120 = self.value * b.value;\n        if !b.is_zero() {\n            assert(c / b.value == self.value, \"Overflow\");\n        }\n        Self {\n            value: c\n        }\n    }\n\n    pub fn div(\n        self: Self,\n        b: Self,\n    ) -> Self {\n        assert(!b.is_zero(), \"Divide by zero\");\n        Self {\n            value: self.value / b.value\n        }\n    }\n\n    pub fn mul_div(\n        self: Self,\n        b: Self,\n        divisor: Self\n    ) -> Self {\n        self.mul(b).div(divisor)\n    }\n\n    pub fn mul_div_up(\n        self: Self,\n        b: Self,\n        divisor: Self\n    ) -> Self {\n        let c = self.mul(b);\n        assert(!divisor.is_zero(), \"Divide by zero\");\n        let adder = ((self.value * b.value % divisor.value) as u120 > 0) as u120;\n        c.div(divisor).add(Self {value: adder})\n    }\n\n    // todo: implement mul_div with 240 bit intermediate values.\n}\n\n#[test]\nfn test_init() {\n    let a = SafeU120::new(1);\n    assert(a.value == 1);\n}\n\n#[test]\nfn test_init_max() {\n    let a = SafeU120::max();\n    assert(a.value == 0xffffffffffffffffffffffffffffff);\n}\n\n#[test]\nfn test_init_min() {\n    let a = SafeU120::min();\n    assert(a.value == 0);\n}\n\n#[test]\nfn test_is_zero() {\n    let a = SafeU120::min();\n    assert(a.value == 0);\n    assert(a.is_zero() == true);\n}\n\n#[test]\nfn test_eq() {\n    let a = SafeU120::new(1);\n    let b = SafeU120::new(1);\n    assert(a.eq(b));\n}\n\n#[test]\nfn test_lt() {\n    let a = SafeU120::new(1);\n    let b = SafeU120::new(2);\n    assert(a.lt(b));\n    assert(b.lt(a) == false);\n}\n\n\n#[test]\nfn test_le() {\n    let a = SafeU120::new(2);\n    let b = SafeU120::new(2);\n    let c = SafeU120::new(5);\n    assert(a.le(b));\n    assert(a.le(c));\n    assert(c.le(a) == false);\n}\n\n#[test]\nfn test_gt() {\n    let a = SafeU120::new(1);\n    let b = SafeU120::new(2);\n    assert(b.gt(a));\n    assert(a.gt(b) == false);\n}\n\n\n#[test]\nfn test_ge() {\n    let a = SafeU120::new(2);\n    let b = SafeU120::new(2);\n    let c = SafeU120::new(5);\n    assert(a.ge(b));\n    assert(a.ge(c) == false);\n    assert(c.ge(a));\n}\n\n#[test(should_fail)]\nfn test_init_too_large() {\n    let b = SafeU120::max().value as Field + 1; // max + 1\n    let _a = SafeU120::new(b);\n}\n\n#[test]\nfn test_add() {\n    let a = SafeU120::new(1);\n    let b = SafeU120::new(2);\n    let c = SafeU120::add(a, b);\n    assert(c.value == 3);\n}\n\n#[test(should_fail)]\nfn test_add_overflow() {\n    let a = SafeU120::max();\n    let b = SafeU120::new(1);\n    let _c = SafeU120::add(a, b);\n}\n\n#[test]\nfn test_sub() {\n    let a = SafeU120::new(2);\n    let b = SafeU120::new(1);\n    let c = SafeU120::sub(a, b);\n    assert(c.value == 1);\n}\n\n#[test(should_fail)]\nfn test_sub_underflow() {\n    let a = SafeU120::new(1);\n    let b = SafeU120::new(2);\n    let _c = SafeU120::sub(a, b);\n}\n\n#[test]\nfn test_mul() {\n    let a = SafeU120::new(2);\n    let b = SafeU120::new(3);\n    let c = SafeU120::mul(a, b);\n    assert(c.value == 6);\n}\n\n#[test(should_fail)]\nfn test_mul_overflow() {\n    let a = SafeU120::max();\n    let b = SafeU120::new(2);\n    let _c = SafeU120::mul(a, b);\n}\n\n#[test]\nfn test_div() {\n    let a = SafeU120::new(6);\n    let b = SafeU120::new(3);\n    let c = SafeU120::div(a, b);\n    assert(c.value == 2);\n}\n\n#[test(should_fail)]\nfn test_div_by_zero() {\n    let a = SafeU120::new(6);\n    let b = SafeU120::new(0);\n    let _c = SafeU120::div(a, b);\n}\n\n#[test]\nfn test_mul_div() {\n    let a = SafeU120::new(6);\n    let b = SafeU120::new(3);\n    let c = SafeU120::new(2);\n    let d = SafeU120::mul_div(a, b, c);\n    assert(d.value == 9);\n}\n\n#[test(should_fail)]\nfn test_mul_div_zero_divisor() {\n    let a = SafeU120::new(6);\n    let b = SafeU120::new(3);\n    let c = SafeU120::new(0);\n    let _d = SafeU120::mul_div(a, b, c);\n}\n\n#[test(should_fail)]\nfn test_mul_div_ghost_overflow() {\n    let a = SafeU120::max();\n    let b = SafeU120::new(2);\n    let c = SafeU120::new(4);\n    let _d = SafeU120::mul_div(a, b, c);\n}\n\n#[test]\nfn test_mul_div_up_rounding() {\n    let a = SafeU120::new(6);\n    let b = SafeU120::new(3);\n    let c = SafeU120::new(5);\n    let d = SafeU120::mul_div_up(a, b, c);\n    assert(d.value == 4);\n}\n\n#[test]\nfn test_mul_div_up_non_rounding() {\n    let a = SafeU120::new(6);\n    let b = SafeU120::new(3);\n    let c = SafeU120::new(2);\n    let d = SafeU120::mul_div_up(a, b, c);\n    assert(d.value == 9);\n}\n\n\n#[test(should_fail)]\nfn test_mul_div_up_ghost_overflow() {\n    let a = SafeU120::max();\n    let b = SafeU120::new(2);\n    let c = SafeU120::new(9);\n    let _d = SafeU120::mul_div_up(a, b, c);\n}\n\n// It should not be possible for us to overflow `mul_div_up` through the adder, since that require the divisor to be 1\n// since we otherwise would not be at the max value. If divisor is 1, adder is 0.\n#[test(should_fail)]\nfn test_mul_div_up_zero_divisor() {\n    let a = SafeU120::new(6);\n    let b = SafeU120::new(3);\n    let c = SafeU120::new(0);\n    let _d = SafeU120::mul_div_up(a, b, c);\n}\n",
        "path": "/home/maga/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.8.14/yarn-project/aztec-nr/safe-math/src/safe_u120"
      },
      "93": {
        "source": "use dep::aztec::types::type_serialization::TypeSerializationInterface;\n\nstruct Market {\n    totalLongs: u120,\n    totalShorts: u120,\n    maxTotalLongs: u120,\n    maxTotalShorts: u120,\n    maxLeverage: u32,\n    openFeeRate: u64,\n    baseSpreadRate: u64,\n    borrowBaseRatePerHour: u64\n}\n\nglobal MARKET_SERIALIZED_LEN: Field = 8;\n\nfn deserialize(fields: [Field; MARKET_SERIALIZED_LEN]) -> Market {\n    Market {\n        totalLongs: fields[0] as u120,\n        totalShorts: fields[1] as u120,\n        maxTotalLongs: fields[2] as u120,\n        maxTotalShorts: fields[3] as u120,\n        maxLeverage: fields[4] as u32,\n        openFeeRate: fields[5] as u64,\n        baseSpreadRate: fields[6] as u64,\n        borrowBaseRatePerHour: fields[7] as u64\n    }\n}\n\nfn serialize(market: Market) -> [Field; MARKET_SERIALIZED_LEN] {\n    [\n        market.totalLongs as Field,\n        market.totalShorts as Field,\n        market.maxTotalLongs as Field,\n        market.maxTotalShorts as Field,\n        market.maxLeverage as Field,\n        market.openFeeRate as Field,\n        market.baseSpreadRate as Field,\n        market.borrowBaseRatePerHour as Field,\n    ]\n}\n\nimpl Market {\n    fn serialize(self: Self) -> [Field; MARKET_SERIALIZED_LEN] {\n        serialize(self)\n    }\n}\n\nglobal MarketSerializationMethods = TypeSerializationInterface {\n    deserialize,\n    serialize\n};",
        "path": "/home/maga/projects/noir-contracts/src/contracts/src/types/market"
      },
      "94": {
        "source": "use dep::aztec::context::{PrivateContext, PublicContext, Context};\nuse dep::aztec::types::address::AztecAddress;\nuse dep::std::option::Option;\nuse dep::aztec::note::{\n    utils::compute_note_hash_for_read_or_nullify,\n    note_header::NoteHeader,\n    note_interface::NoteInterface,\n};\nuse dep::aztec::oracle::get_secret_key::get_secret_key;\n\n\nstruct Position {\n    id: u32,\n    marketIdx: u8,\n    posType: u8, // 0 - long, 1 - short\n    initialCollateral: u120,\n    openFee: u120,\n    openPrice: u120, // price after spread apply\n    markPrice: u120, // market price on moment of position creation\n    leverage: u32,\n    borrowBaseRatePerHour: u64, // we store rate on moment of position creation because rate could be changed in market config\n    liquidationThresholdRate: u64,\n    createdAt: u32,\n    owner: Field,\n    header: NoteHeader\n}\n\nglobal POSITION_SERIALIZED_LEN: Field = 12;\n\n\nimpl Position {\n    pub fn new(owner: Field) -> Self {\n        Self {\n            id: 0,\n            marketIdx: 0,\n            posType: 0,\n            initialCollateral: 0,\n            openFee: 0,\n            openPrice: 0,\n            markPrice: 0,\n            leverage: 0,\n            borrowBaseRatePerHour: 0,\n            liquidationThresholdRate: 0,\n            createdAt: 0,\n            owner: owner,\n            header: NoteHeader::empty()\n        }\n    }\n\n    pub fn serialize(self: Self) -> [Field; POSITION_SERIALIZED_LEN] {\n        [\n            self.id as Field,\n            self.marketIdx as Field,\n            self.posType as Field,\n            self.initialCollateral as Field,\n            self.openFee as Field,\n            self.openPrice as Field,\n            self.markPrice as Field,\n            self.leverage as Field,\n            self.borrowBaseRatePerHour as Field,\n            self.liquidationThresholdRate as Field,\n            self.createdAt as Field,\n            self.owner\n        ]\n    }\n\n    pub fn deserialize(preimage: [Field; POSITION_SERIALIZED_LEN]) -> Self {\n        Position {\n            id: preimage[0] as u32,\n            marketIdx: preimage[1] as u8,\n            posType: preimage[2] as u8,\n            initialCollateral: preimage[3] as u120,\n            openFee: preimage[4] as u120,\n            openPrice: preimage[5] as u120,\n            markPrice: preimage[6] as u120,\n            leverage: preimage[7] as u32,\n            borrowBaseRatePerHour: preimage[8] as u64,\n            liquidationThresholdRate: preimage[9] as u64,\n            createdAt: preimage[10] as u32,\n            owner: preimage[11],\n            header: NoteHeader::empty()\n        }\n    }\n\n    pub fn compute_note_hash(self) -> Field {\n        dep::std::hash::pedersen(self.serialize())[0]\n    }\n\n    pub fn compute_nullifier(self) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_read_or_nullify(PositionSerializationMethods, self);\n        let secret = get_secret_key(self.owner);\n        dep::std::hash::pedersen([\n            note_hash_for_nullify,\n            secret.low,\n            secret.high,\n        ])[0]\n    }\n\n    pub fn set_header(&mut self, header: NoteHeader) {\n        self.header = header;\n    }\n}\n\nfn deserialize(preimage: [Field; POSITION_SERIALIZED_LEN]) -> Position {\n    Position::deserialize(preimage)\n}\n\nfn serialize(note: Position) -> [Field; POSITION_SERIALIZED_LEN] {\n    note.serialize()\n}\n\nfn compute_note_hash(note: Position) -> Field {\n    note.compute_note_hash()\n}\n\nfn compute_nullifier(note: Position) -> Field {\n    note.compute_nullifier()\n}\n\nfn get_header(note: Position) -> NoteHeader {\n    note.header\n}\n\nfn set_header(note: &mut Position, header: NoteHeader) {\n    note.set_header(header)\n}\n\nglobal PositionSerializationMethods = NoteInterface {\n    deserialize,\n    serialize,\n    compute_note_hash,\n    compute_nullifier,\n    get_header,\n    set_header,\n};\n",
        "path": "/home/maga/projects/noir-contracts/src/contracts/src/types/position"
      },
      "95": {
        "source": "use dep::aztec::context::{PrivateContext, PublicContext, Context};\nuse dep::aztec::types::address::AztecAddress;\nuse dep::std::option::Option;\nuse dep::aztec::note::{\n    utils::compute_note_hash_for_read_or_nullify,\n    note_header::NoteHeader,\n    note_interface::NoteInterface,\n};\nuse dep::aztec::oracle::get_secret_key::get_secret_key;\n\n\n\nstruct UserPosId {\n    value: u32,\n    owner: Field,\n    header: NoteHeader\n}\n\n\nglobal USER_ID_POS_SERIALIZED_LEN: Field = 2;\n\n\nimpl UserPosId {\n    pub fn new(value: Field, owner: Field) -> Self {\n        Self {\n            value: value as u32,\n            owner: owner,\n            header: NoteHeader::empty()\n        }\n    }\n\n    pub fn serialize(self: Self) -> [Field; USER_ID_POS_SERIALIZED_LEN] {\n        [\n            self.value as Field,\n            self.owner\n        ]\n    }\n\n    pub fn deserialize(preimage: [Field; USER_ID_POS_SERIALIZED_LEN]) -> Self {\n        UserPosId {\n            value: preimage[0] as u32,\n            owner: preimage[1],\n            header: NoteHeader::empty()\n        }\n    }\n\n    pub fn compute_note_hash(self) -> Field {\n        dep::std::hash::pedersen(self.serialize())[0]\n    }\n\n    pub fn compute_nullifier(self) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_read_or_nullify(UserPosIdSerializationMethods, self);\n        let secret = get_secret_key(self.owner);\n        dep::std::hash::pedersen([\n            note_hash_for_nullify,\n            secret.low,\n            secret.high,\n        ])[0]\n    }\n\n    pub fn set_header(&mut self, header: NoteHeader) {\n        self.header = header;\n    }\n}\n\nfn deserialize(preimage: [Field; USER_ID_POS_SERIALIZED_LEN]) -> UserPosId {\n    UserPosId::deserialize(preimage)\n}\n\nfn serialize(note: UserPosId) -> [Field; USER_ID_POS_SERIALIZED_LEN] {\n    note.serialize()\n}\n\nfn compute_note_hash(note: UserPosId) -> Field {\n    note.compute_note_hash()\n}\n\nfn compute_nullifier(note: UserPosId) -> Field {\n    note.compute_nullifier()\n}\n\nfn get_header(note: UserPosId) -> NoteHeader {\n    note.header\n}\n\nfn set_header(note: &mut UserPosId, header: NoteHeader) {\n    note.set_header(header)\n}\n\nglobal UserPosIdSerializationMethods = NoteInterface {\n    deserialize,\n    serialize,\n    compute_note_hash,\n    compute_nullifier,\n    get_header,\n    set_header,\n};\n",
        "path": "/home/maga/projects/noir-contracts/src/contracts/src/types/user_pos_id"
      },
      "96": {
        "source": "use dep::aztec::types::type_serialization::TypeSerializationInterface;\nuse dep::safe_math::SafeU120;\n\nglobal SAFE_U120_SERIALIZED_LEN: Field = 1;\n\n// This is safe when reading from storage IF only correct safeu120 was written to storage\nfn deserializeU120(fields: [Field; SAFE_U120_SERIALIZED_LEN]) -> SafeU120 {\n    SafeU120{value: fields[0] as u120}\n}\n\nfn serializeU120(value: SafeU120) -> [Field; SAFE_U120_SERIALIZED_LEN] {\n    [value.value as Field]\n}\n\nglobal SafeU120SerializationMethods = TypeSerializationInterface {\n    deserialize: deserializeU120,\n    serialize: serializeU120,\n};",
        "path": "/home/maga/projects/noir-contracts/src/contracts/src/types/safe_u120_serialization"
      }
    }
  }
}