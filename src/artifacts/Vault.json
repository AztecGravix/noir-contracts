{
  "name": "Vault",
  "functions": [
    {
      "name": "_initialize",
      "functionType": "open",
      "isInternal": true,
      "parameters": [
        {
          "name": "new_admin",
          "type": {
            "kind": "struct",
            "path": "aztec::types::address::AztecAddress",
            "fields": [
              {
                "name": "address",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "private"
        },
        {
          "name": "initial_liquidity",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "struct",
          "path": "aztec::abi::PublicCircuitPublicInputs",
          "fields": [
            {
              "name": "call_context",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::CallContext",
                "fields": [
                  {
                    "name": "msg_sender",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "storage_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "portal_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "function_selector",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "is_delegate_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_static_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_contract_deployment",
                    "type": {
                      "kind": "boolean"
                    }
                  }
                ]
              }
            },
            {
              "name": "args_hash",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "return_values",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "contract_storage_update_requests",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageUpdateRequest",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "old_value",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "new_value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "contract_storage_read",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageRead",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "public_call_stack",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_commitments",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_nullifiers",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_l2_to_l1_msgs",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_logs_hash",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_log_preimages_length",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "block_data",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::HistoricBlockData",
                "fields": [
                  {
                    "name": "private_data_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "nullifier_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "contract_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "l1_to_l2_messages_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "blocks_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "public_data_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "global_variables_hash",
                    "type": {
                      "kind": "field"
                    }
                  }
                ]
              }
            },
            {
              "name": "prover_address",
              "type": {
                "kind": "field"
              }
            }
          ]
        }
      ],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "add_market",
      "functionType": "open",
      "isInternal": false,
      "parameters": [
        {
          "name": "market_id",
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 8
          },
          "visibility": "private"
        },
        {
          "name": "maxTotalLongs",
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 120
          },
          "visibility": "private"
        },
        {
          "name": "maxTotalShorts",
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 120
          },
          "visibility": "private"
        },
        {
          "name": "maxLeverage",
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          },
          "visibility": "private"
        },
        {
          "name": "openFeeRate",
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 64
          },
          "visibility": "private"
        },
        {
          "name": "baseSpreadRate",
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 64
          },
          "visibility": "private"
        },
        {
          "name": "borrowBaseRatePerHour",
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 64
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "struct",
          "path": "aztec::abi::PublicCircuitPublicInputs",
          "fields": [
            {
              "name": "call_context",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::CallContext",
                "fields": [
                  {
                    "name": "msg_sender",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "storage_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "portal_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "function_selector",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "is_delegate_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_static_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_contract_deployment",
                    "type": {
                      "kind": "boolean"
                    }
                  }
                ]
              }
            },
            {
              "name": "args_hash",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "return_values",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "contract_storage_update_requests",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageUpdateRequest",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "old_value",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "new_value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "contract_storage_read",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageRead",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "public_call_stack",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_commitments",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_nullifiers",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_l2_to_l1_msgs",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_logs_hash",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_log_preimages_length",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "block_data",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::HistoricBlockData",
                "fields": [
                  {
                    "name": "private_data_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "nullifier_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "contract_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "l1_to_l2_messages_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "blocks_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "public_data_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "global_variables_hash",
                    "type": {
                      "kind": "field"
                    }
                  }
                ]
              }
            },
            {
              "name": "prover_address",
              "type": {
                "kind": "field"
              }
            }
          ]
        }
      ],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "admin",
      "functionType": "unconstrained",
      "isInternal": false,
      "parameters": [],
      "returnTypes": [
        {
          "kind": "field"
        }
      ],
      "bytecode": "H4sIAAAAAAAA/7VTWw7CIBBcKA/RxH8/vUG9Qc/gDZrY+Gmi3j+WyKQjoj+FTZqlQGdmZ7daRJS8o5Ml1I/1MWVHe0PK/cpwxFUL084YNmEF0qxT3qdadF3e067gnyOPa/FwbxhXiCvIZw+x12VeBFrjLHp3oHNT+AZ3TeEe124b1M48A72Da0saDGlxdbX0EcPLEh1xQQc0efLJZ3q5B55yi9lp0RPuPeLfjIJ/Mz/4Zx7P2328TudpvCiCyEdKEwyveexhP48m7uLMy7fEan7kuCrLMV4lLa+7hAUAAA==",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "compute_note_hash_and_nullifier",
      "functionType": "unconstrained",
      "isInternal": false,
      "parameters": [
        {
          "name": "contract_address",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "nonce",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "storage_slot",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "preimage",
          "type": {
            "kind": "array",
            "length": 12,
            "type": {
              "kind": "field"
            }
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "array",
          "length": 4,
          "type": {
            "kind": "field"
          }
        }
      ],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "constructor",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [
        {
          "name": "admin",
          "type": {
            "kind": "struct",
            "path": "aztec::types::address::AztecAddress",
            "fields": [
              {
                "name": "address",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "private"
        },
        {
          "name": "liquidity",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [],
      "bytecode": "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",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "liquidity",
      "functionType": "unconstrained",
      "isInternal": false,
      "parameters": [],
      "returnTypes": [
        {
          "kind": "integer",
          "sign": "unsigned",
          "width": 120
        }
      ],
      "bytecode": "H4sIAAAAAAAA/7WTwQ3CMAxFnbRNCEgswJEFiligM7BBJSqOSMCB8aEiVh+hcCHxxW7s/v/j2FZEjLysksnMl3gbvcNZF337pzlw5cJsnhhNxArQbKNfx7vYvLz71Uz/HHqciWfHtyGugCvI+xvqWZX0IiDW3Ni7DfL1zD9aW8/U8e5NgbuTp8O3ci2hoYYWl1dLO2J4mawCl+pQTR65RWYdJtFxB69yBcQeZzap81JmZkvMAmdO7ddusCe6q9fb+dKfhsPQHw0g0lG2gGHMddNn50porea8fErM1o8U1yR+tAc7CbYj/AUAAA==",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "market",
      "functionType": "unconstrained",
      "isInternal": false,
      "parameters": [
        {
          "name": "market_id",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "struct",
          "path": "types::market::Market",
          "fields": [
            {
              "name": "totalLongs",
              "type": {
                "kind": "integer",
                "sign": "unsigned",
                "width": 120
              }
            },
            {
              "name": "totalShorts",
              "type": {
                "kind": "integer",
                "sign": "unsigned",
                "width": 120
              }
            },
            {
              "name": "maxTotalLongs",
              "type": {
                "kind": "integer",
                "sign": "unsigned",
                "width": 120
              }
            },
            {
              "name": "maxTotalShorts",
              "type": {
                "kind": "integer",
                "sign": "unsigned",
                "width": 120
              }
            },
            {
              "name": "maxLeverage",
              "type": {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            },
            {
              "name": "openFeeRate",
              "type": {
                "kind": "integer",
                "sign": "unsigned",
                "width": 64
              }
            },
            {
              "name": "baseSpreadRate",
              "type": {
                "kind": "integer",
                "sign": "unsigned",
                "width": 64
              }
            },
            {
              "name": "borrowBaseRatePerHour",
              "type": {
                "kind": "integer",
                "sign": "unsigned",
                "width": 64
              }
            }
          ]
        }
      ],
      "bytecode": "H4sIAAAAAAAA/8WY2W4aQRBFe9jxQrxiY2N7vGATL3hwNj/kYb4h+QIkk7zgIAFZnvLtSY+75EOnZSmiECVBF9VN3Xurm2FqlowxkXmyPHyaxFI3JrNZN9LLlVTAMwcd1gpuLLqx5MayG+W7VeT4jVjOTFsJfqrEv6Rf38TqXQ1oyyHGPff1FhDLezWsYr6EmMyXEZN51pnz1mpuXUG3BnfkLuaf7RQ+NRV1uWR7XFLWx1ob8+8+LWO+hLGsyyP7LRfNdE39s/A/XHML5jqv/a/o5rzjb0nspfNdgb6qMpcVx4XXEhOoLfd2WZdDYnOsQK9gCs6Se/nrxC9gfhk8a7o8szMo1+bIvWoeF4v7ag64NewLeQhWHmsu3biKekgd51kbWgpfsMglWjAX/o8axGperfjfyj34gfk15+cCedYC66h9fQ7aiZPi8zq0RR6/RXJZCnDZ0OWSXWM2zbPJ/myAh3DaBI8tZR6Rx+MXcLeAu628FzZHPaB/G/oFvw4eO7o8Mv11T7/g7gB3Vxc3u+dqBPTvQr/gN8BjT5dHpr/h6RfcPeDu6+K+sTmaAf370C/4TfA40OWR6W96+gX3ALiHurhvbY6jgP5D6Bf8I/CIdXlk+skjBm4M3GNd3Hc2x0lA/zH0C/4JeJzq8sj0k0cK3FPgnunivrc5WgH9Z9Av+C3wONflkelvefoF9xy4F7q4H2yOdkD/BfQLfhs8XuvyyPS3Pf2CK1hV+JuIyX1tHbEr5zcQu3Z+E7Eb5x8h1nH+CWK3zm8hlnh14T0hOUsPdYmYPJu4Qkx6q2vEpM+/QUz6oA5i0gveIiY9m/Asu3zCJ5X52ex+Dv31PWsk9tL9u+DbOkg/MZ4MR72v/U/93kOEFAUstZZDGvpsfWUb+BiNra+1sgk8ak3dmMxmXQowAQF5R65onp+zVMx0P8Pvyvn86MbPT7WKx4PhJE7ib3/fe4PB8Gf/oRNzbhw/fh9P4vGkN5rEX0bDx7jb+QP6jnAxcBYAAA==",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "open_position",
      "functionType": "open",
      "isInternal": false,
      "parameters": [
        {
          "name": "id",
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          },
          "visibility": "private"
        },
        {
          "name": "collateral",
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 120
          },
          "visibility": "private"
        },
        {
          "name": "leverage",
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          },
          "visibility": "private"
        },
        {
          "name": "pos_type",
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 8
          },
          "visibility": "private"
        },
        {
          "name": "market_id",
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 8
          },
          "visibility": "private"
        },
        {
          "name": "market_price",
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 120
          },
          "visibility": "private"
        },
        {
          "name": "secret_hash",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "struct",
          "path": "aztec::abi::PublicCircuitPublicInputs",
          "fields": [
            {
              "name": "call_context",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::CallContext",
                "fields": [
                  {
                    "name": "msg_sender",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "storage_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "portal_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "function_selector",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "is_delegate_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_static_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_contract_deployment",
                    "type": {
                      "kind": "boolean"
                    }
                  }
                ]
              }
            },
            {
              "name": "args_hash",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "return_values",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "contract_storage_update_requests",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageUpdateRequest",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "old_value",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "new_value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "contract_storage_read",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageRead",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "public_call_stack",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_commitments",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_nullifiers",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_l2_to_l1_msgs",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_logs_hash",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_log_preimages_length",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "block_data",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::HistoricBlockData",
                "fields": [
                  {
                    "name": "private_data_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "nullifier_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "contract_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "l1_to_l2_messages_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "blocks_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "public_data_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "global_variables_hash",
                    "type": {
                      "kind": "field"
                    }
                  }
                ]
              }
            },
            {
              "name": "prover_address",
              "type": {
                "kind": "field"
              }
            }
          ]
        }
      ],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "positions",
      "functionType": "unconstrained",
      "isInternal": false,
      "parameters": [
        {
          "name": "user",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "array",
          "length": 10,
          "type": {
            "kind": "struct",
            "path": "std::option::Option",
            "fields": [
              {
                "name": "_is_some",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "_value",
                "type": {
                  "kind": "struct",
                  "path": "types::position_note::PositionNote",
                  "fields": [
                    {
                      "name": "id",
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 32
                      }
                    },
                    {
                      "name": "marketIdx",
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                      }
                    },
                    {
                      "name": "posType",
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                      }
                    },
                    {
                      "name": "initialCollateral",
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 120
                      }
                    },
                    {
                      "name": "openFee",
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 120
                      }
                    },
                    {
                      "name": "openPrice",
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 120
                      }
                    },
                    {
                      "name": "markPrice",
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 120
                      }
                    },
                    {
                      "name": "leverage",
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 32
                      }
                    },
                    {
                      "name": "borrowBaseRatePerHour",
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 64
                      }
                    },
                    {
                      "name": "liquidationThresholdRate",
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 64
                      }
                    },
                    {
                      "name": "createdAt",
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 32
                      }
                    },
                    {
                      "name": "owner",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "secret_hash",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "secret",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "header",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::note::note_header::NoteHeader",
                        "fields": [
                          {
                            "name": "contract_address",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "nonce",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "storage_slot",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "is_transient",
                            "type": {
                              "kind": "boolean"
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            ]
          }
        }
      ],
      "bytecode": "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",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    }
  ],
  "events": [],
  "debug": {
    "debugSymbols": [
      "",
      "",
      "eJzNlM0KgzAQBt9lz1Kym/+8SukhtBYE0VK9Sd5dS1UKpngR2VsC88Eckhmgbu+xr9qmgzCAuGgI1wG6V2w+966P7x6C8w4LKJsHBC8EpgKeVV1CmE4bFsnQzKKUcmWtysDSmplVaFfUmHQrJhfDyMUycnGMXDwjFxScZJCTDHGSkZxkFCcZTvVFTvlFTv1FTgHGcwusSC4yin5ltihpP6Nk3Io6/fWmc2N9nPe5XT/OO9sWQrdstN68LcomYGeT/ak7m+yH2tlk3/3/TUojmbIsSQ==",
      "",
      "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",
      "",
      ""
    ],
    "fileMap": {
      "1": {
        "source": "mod types;\n\n\n\ncontract Vault {\n    use dep::std::option::Option;\n    use dep::safe_math::SafeU120;\n\n    use dep::value_note::{\n        balance_utils,\n        utils::{increment, decrement},\n        value_note::{VALUE_NOTE_LEN, ValueNote, ValueNoteMethods},\n    };\n\n    use dep::aztec::{\n        abi,\n        log::emit_encrypted_log,\n        context::{PrivateContext, PublicContext, Context},\n        oracle::{\n            get_public_key::get_public_key,\n        },\n        note::{\n            note_getter_options::NoteGetterOptions,\n            note_viewer_options::NoteViewerOptions,\n            note_header::NoteHeader,\n            utils as note_utils\n        },\n        state_vars::{map::Map, public_state::PublicState, singleton::Singleton, set::Set},\n        types::type_serialization::{\n            aztec_address_serialization::{AztecAddressSerializationMethods, AZTEC_ADDRESS_SERIALIZED_LEN},\n        },\n        hash::{compute_secret_hash},\n        types::address::{AztecAddress},\n        selector::compute_selector,\n    };\n    use crate::types::{\n        market::{MARKET_SERIALIZED_LEN, Market, MarketSerializationMethods, HUNDRED_PERCENT},\n        position_note::{POSITION_NOTE_SERIALIZED_LEN, PositionNoteSerializationMethods, PositionNote, LIQUIDATION_THRESHOLD_RATE},\n        safe_u120_serialization::{SAFE_U120_SERIALIZED_LEN, SafeU120SerializationMethods},\n        position_map::{PositionMap}\n    };\n    struct Storage {\n        admin: PublicState<AztecAddress, AZTEC_ADDRESS_SERIALIZED_LEN>,\n        markets: Map<PublicState<Market, MARKET_SERIALIZED_LEN>>,\n        liquidity: PublicState<SafeU120, SAFE_U120_SERIALIZED_LEN>,\n        positions: PositionMap,\n        pendingRequests: Set<PositionNote, POSITION_NOTE_SERIALIZED_LEN>\n    }\n\n    impl Storage {\n        fn init(context: Context) -> pub Self {\n            Storage {\n                admin: PublicState::new(\n                    context,\n                    1,\n                    AztecAddressSerializationMethods,\n                ),\n                markets: Map::new(\n                    context,\n                    2,\n                    |context, slot| {\n                        PublicState::new(\n                            context,\n                            slot,\n                            MarketSerializationMethods,\n                        )\n                    },\n                ),\n                liquidity: PublicState::new(\n                    context,\n                    3,\n                    SafeU120SerializationMethods,\n                ),\n                // -------------------- PRIVATE ----------------------\n                positions: PositionMap::new(context, 4),\n                pendingRequests: Set::new(context, 5, PositionNoteSerializationMethods)\n            }\n        }\n    }\n\n\n    #[aztec(private)]\n    fn constructor(admin: AztecAddress, liquidity: Field) {\n        let selector = compute_selector(\"_initialize((Field),Field)\");\n        context.call_public_function(context.this_address(), selector, [admin.address, liquidity]);\n    }\n\n    #[aztec(public)]\n    fn add_market(\n        market_id: u8,\n        maxTotalLongs: u120,\n        maxTotalShorts: u120,\n        maxLeverage: u32,\n        openFeeRate: u64,\n        baseSpreadRate: u64,\n        borrowBaseRatePerHour: u64\n    ) {\n        let market = storage.markets.at(market_id as Field);\n        market.write(Market {\n            totalLongs: 0,\n            totalShorts: 0,\n            maxTotalLongs: maxTotalLongs,\n            maxTotalShorts: maxTotalShorts,\n            maxLeverage: maxLeverage,\n            openFeeRate: openFeeRate,\n            baseSpreadRate: baseSpreadRate,\n            borrowBaseRatePerHour: borrowBaseRatePerHour\n        });\n        1\n    }\n\n\n    #[aztec(public)]\n    fn open_position(\n        id: u32,\n        collateral: u120,\n        leverage: u32,\n        pos_type: u8,\n        market_id: u8,\n        market_price: u120, // todo: check authorized signature with price\n        secret_hash: Field\n    ) {\n        // TODO: check market exists and other checks\n        let sender = context.msg_sender();\n        let market = storage.markets.at(market_id as Field).read();\n        let open_fee = (collateral * market.openFeeRate as u120) / HUNDRED_PERCENT as u120;\n        let mut open_price = market_price;\n        if (pos_type == 0) {\n            // long\n            open_price = (open_price * (HUNDRED_PERCENT + market.baseSpreadRate) as u120) / HUNDRED_PERCENT as u120;\n        } else if (pos_type == 1) {\n            // short\n            open_price = (open_price * (HUNDRED_PERCENT - market.baseSpreadRate) as u120) / HUNDRED_PERCENT as u120;\n        } else {\n            assert (false);\n        }\n\n        let pendingRequests = storage.pendingRequests;\n        let mut note = PositionNote::new(\n            id,\n            market_id,\n            pos_type,\n            collateral,\n            open_fee,\n            open_price,\n            market_price,\n            leverage,\n            market.borrowBaseRatePerHour,\n            LIQUIDATION_THRESHOLD_RATE,\n            context.timestamp() as u32,\n            sender,\n            secret_hash\n        );\n        pendingRequests.insert_from_public(&mut note);\n        1\n    }\n\n\n    // #[aztec(private)]\n    // fn resolve_open_position(\n    //     to: AztecAddress,\n    //     secret: Field\n    // ) {\n    //     let pendingRequests = storage.pendingRequests;\n    //     let secret_hash = compute_secret_hash(secret);\n    //     let options = NoteGetterOptions::new().select(9, secret_hash).set_limit(1);\n    //     let notes = pendingRequests.get_notes(options);\n    //     let note = notes[0].unwrap_unchecked();\n    //     pendingRequests.remove(note);\n    \n    //     // todo: add private position\n    //     let mut new_pos_id = UserPosId::new((last_pos_id(to.address) + 1) as Field, to.address);\n    //     // first position of user\n    //     if (new_pos_id.value == 1) {\n    //         storage.usersLastPosId.at(to.address).initialize(&mut new_pos_id, Option::some(to.address));\n    //     } else {\n    //         storage.usersLastPosId.at(to.address).replace(&mut new_pos_id);\n    //     }\n\n    //     // todo: real values\n    //     let mut position = Position::new(\n    //         new_pos_id.value,\n    //         1,\n    //         1,\n    //         1,\n    //         1,\n    //         1,\n    //         1,\n    //         1,\n    //         // market.borrowBaseRatePerHour,\n    //         1000000000,\n    //         LIQUIDATION_THRESHOLD_RATE,\n    //         1,\n    //         to.address\n    //     );\n\n    //     // save new position\n    //     storage.positions.at(to.address).at(new_pos_id.value as Field).initialize(&mut position, Option::some(to.address));\n\n    //     // todo: increase market OI\n    //     1\n    // }\n\n\n    // #[aztec(private)]\n    // fn resolve_open_position_test() {\n    //     let sender = context.msg_sender();\n    //     // update last pos id\n    //     let mut new_pos_id = UserPosId::new((last_pos_id(sender) + 1) as Field, sender);\n    //     // first position of user\n    //     if (new_pos_id.value == 1) {\n    //         storage.usersLastPosId.at(sender).initialize(&mut new_pos_id, Option::some(sender));\n    //     } else {\n    //         storage.usersLastPosId.at(sender).replace(&mut new_pos_id);\n    //     }\n    //     emit_encrypted_log(\n    //         &mut context,\n    //         context.this_address(),\n    //         storage.usersLastPosId.storage_slot,\n    //         get_public_key(sender),\n    //         new_pos_id.serialize()\n    //     );\n\n    //     let mut position = Position::new(\n    //         new_pos_id.value,\n    //         1,\n    //         1,\n    //         1,\n    //         1,\n    //         1,\n    //         1,\n    //         1,\n    //         // market.borrowBaseRatePerHour,\n    //         1000000000,\n    //         LIQUIDATION_THRESHOLD_RATE,\n    //         1,\n    //         sender\n    //     );\n\n    //     // save new position\n    //     storage.positions.at(sender).at(new_pos_id.value as Field).initialize(&mut position, Option::some(sender));\n    //     emit_encrypted_log(\n    //         &mut context,\n    //         context.this_address(),\n    //         storage.positions.storage_slot,\n    //         get_public_key(sender),\n    //         position.serialize()\n    //     );\n\n    //     1\n    // }\n\n    // ---------------------------------------- PUBLIC -----------------------------------------------\n    #[aztec(public)]\n    internal fn _initialize(\n        new_admin: AztecAddress,\n        initial_liquidity: Field\n    ) {\n        storage.admin.write(new_admin);\n        let initial = SafeU120::new(initial_liquidity);\n        storage.liquidity.write(initial);\n    }\n\n    // #[aztec(private)]\n    // fn close_position(\n\n    // )\n\n    // #[aztec(public)]\n    // internal fn _increase_market_oi(\n    //     market_id: Field,\n    //     amount: Field,\n    //     pos_type: Field\n    // ) {\n        \n    // }\n\n    unconstrained fn admin() -> Field {\n        storage.admin.read().address\n    }\n\n    unconstrained fn market(market_id: Field) -> Market {\n        storage.markets.at(market_id).read()\n    }\n\n    unconstrained fn positions(user: Field) -> [Option<PositionNote>; 10] {\n        let options = NoteViewerOptions::new();\n        storage.positions.at(AztecAddress::new(user)).set.view_notes(options)\n    }\n\n    unconstrained fn liquidity() -> u120 {\n        storage.liquidity.read().value\n    }\n\n\n    unconstrained fn compute_note_hash_and_nullifier(contract_address: Field, nonce: Field, storage_slot: Field, preimage: [Field; 12]) -> [Field; 4] {\n        let note_header = NoteHeader::new(contract_address, nonce, storage_slot);\n        note_utils::compute_note_hash_and_nullifier(PositionNoteSerializationMethods, note_header, preimage)\n    }\n}\n\n",
        "path": "/home/maga/projects/noir-contracts/src/contracts/src/main"
      },
      "5": {
        "source": "mod poseidon;\n\n#[foreign(sha256)]\npub fn sha256<N>(_input : [u8; N]) -> [u8; 32] {}\n\n#[foreign(blake2s)]\npub fn blake2s<N>(_input : [u8; N]) -> [u8; 32] {}\n\npub fn pedersen<N>(input : [Field; N]) -> [Field; 2] {\n    pedersen_with_separator(input, 0)\n}\n\n#[foreign(pedersen)]\npub fn pedersen_with_separator<N>(_input : [Field; N], _separator : u32) -> [Field; 2] {}\n\n#[foreign(hash_to_field_128_security)]\npub fn hash_to_field<N>(_input : [Field; N]) -> Field {}\n\n#[foreign(keccak256)]\npub fn keccak256<N>(_input : [u8; N], _message_size: u32) -> [u8; 32] {}\n\n// mimc-p/p implementation\n// constants are (publicly generated) random numbers, for instance using keccak as a ROM.\n// You must use constants generated for the native field\n// Rounds number should be ~ log(p)/log(exp)\n// For 254 bit primes, exponent 7 and 91 rounds seems to be recommended\nfn mimc<N>(x: Field, k: Field, constants: [Field; N], exp : Field) -> Field {\n    //round 0\n    let mut t = x + k;\n    let mut h = t.pow_32(exp);\n    //next rounds\n    for i in 1 .. constants.len() {\n        t = h + k + constants[i];\n        h = t.pow_32(exp);\n    };\n    h + k\n}\n\nglobal MIMC_BN254_ROUNDS = 91;\n\n//mimc implementation with hardcoded parameters for BN254 curve.\npub fn mimc_bn254<N>(array: [Field; N]) -> Field {\n    //mimc parameters\n    let exponent = 7;\n    //generated from seed \"mimc\" using keccak256 \n    let constants: [Field; MIMC_BN254_ROUNDS] = [\n        0, \n        20888961410941983456478427210666206549300505294776164667214940546594746570981,\n        15265126113435022738560151911929040668591755459209400716467504685752745317193,\n        8334177627492981984476504167502758309043212251641796197711684499645635709656,\n        1374324219480165500871639364801692115397519265181803854177629327624133579404,\n        11442588683664344394633565859260176446561886575962616332903193988751292992472,\n        2558901189096558760448896669327086721003508630712968559048179091037845349145,\n        11189978595292752354820141775598510151189959177917284797737745690127318076389,\n        3262966573163560839685415914157855077211340576201936620532175028036746741754,\n        17029914891543225301403832095880481731551830725367286980611178737703889171730,\n        4614037031668406927330683909387957156531244689520944789503628527855167665518,\n        19647356996769918391113967168615123299113119185942498194367262335168397100658,\n        5040699236106090655289931820723926657076483236860546282406111821875672148900,\n        2632385916954580941368956176626336146806721642583847728103570779270161510514,\n        17691411851977575435597871505860208507285462834710151833948561098560743654671,\n        11482807709115676646560379017491661435505951727793345550942389701970904563183,\n        8360838254132998143349158726141014535383109403565779450210746881879715734773,\n        12663821244032248511491386323242575231591777785787269938928497649288048289525,\n        3067001377342968891237590775929219083706800062321980129409398033259904188058,\n        8536471869378957766675292398190944925664113548202769136103887479787957959589,\n        19825444354178182240559170937204690272111734703605805530888940813160705385792,\n        16703465144013840124940690347975638755097486902749048533167980887413919317592,\n        13061236261277650370863439564453267964462486225679643020432589226741411380501,\n        10864774797625152707517901967943775867717907803542223029967000416969007792571,\n        10035653564014594269791753415727486340557376923045841607746250017541686319774,\n        3446968588058668564420958894889124905706353937375068998436129414772610003289,\n        4653317306466493184743870159523234588955994456998076243468148492375236846006,\n        8486711143589723036499933521576871883500223198263343024003617825616410932026,\n        250710584458582618659378487568129931785810765264752039738223488321597070280,\n        2104159799604932521291371026105311735948154964200596636974609406977292675173,\n        16313562605837709339799839901240652934758303521543693857533755376563489378839,\n        6032365105133504724925793806318578936233045029919447519826248813478479197288,\n        14025118133847866722315446277964222215118620050302054655768867040006542798474,\n        7400123822125662712777833064081316757896757785777291653271747396958201309118,\n        1744432620323851751204287974553233986555641872755053103823939564833813704825,\n        8316378125659383262515151597439205374263247719876250938893842106722210729522,\n        6739722627047123650704294650168547689199576889424317598327664349670094847386,\n        21211457866117465531949733809706514799713333930924902519246949506964470524162,\n        13718112532745211817410303291774369209520657938741992779396229864894885156527,\n        5264534817993325015357427094323255342713527811596856940387954546330728068658,\n        18884137497114307927425084003812022333609937761793387700010402412840002189451,\n        5148596049900083984813839872929010525572543381981952060869301611018636120248,\n        19799686398774806587970184652860783461860993790013219899147141137827718662674,\n        19240878651604412704364448729659032944342952609050243268894572835672205984837,\n        10546185249390392695582524554167530669949955276893453512788278945742408153192,\n        5507959600969845538113649209272736011390582494851145043668969080335346810411,\n        18177751737739153338153217698774510185696788019377850245260475034576050820091,\n        19603444733183990109492724100282114612026332366576932662794133334264283907557,\n        10548274686824425401349248282213580046351514091431715597441736281987273193140,\n        1823201861560942974198127384034483127920205835821334101215923769688644479957,\n        11867589662193422187545516240823411225342068709600734253659804646934346124945,\n        18718569356736340558616379408444812528964066420519677106145092918482774343613,\n        10530777752259630125564678480897857853807637120039176813174150229243735996839,\n        20486583726592018813337145844457018474256372770211860618687961310422228379031,\n        12690713110714036569415168795200156516217175005650145422920562694422306200486,\n        17386427286863519095301372413760745749282643730629659997153085139065756667205,\n        2216432659854733047132347621569505613620980842043977268828076165669557467682,\n        6309765381643925252238633914530877025934201680691496500372265330505506717193,\n        20806323192073945401862788605803131761175139076694468214027227878952047793390,\n        4037040458505567977365391535756875199663510397600316887746139396052445718861,\n        19948974083684238245321361840704327952464170097132407924861169241740046562673,\n        845322671528508199439318170916419179535949348988022948153107378280175750024,\n        16222384601744433420585982239113457177459602187868460608565289920306145389382,\n        10232118865851112229330353999139005145127746617219324244541194256766741433339,\n        6699067738555349409504843460654299019000594109597429103342076743347235369120,\n        6220784880752427143725783746407285094967584864656399181815603544365010379208,\n        6129250029437675212264306655559561251995722990149771051304736001195288083309,\n        10773245783118750721454994239248013870822765715268323522295722350908043393604,\n        4490242021765793917495398271905043433053432245571325177153467194570741607167,\n        19596995117319480189066041930051006586888908165330319666010398892494684778526,\n        837850695495734270707668553360118467905109360511302468085569220634750561083,\n        11803922811376367215191737026157445294481406304781326649717082177394185903907,\n        10201298324909697255105265958780781450978049256931478989759448189112393506592,\n        13564695482314888817576351063608519127702411536552857463682060761575100923924,\n        9262808208636973454201420823766139682381973240743541030659775288508921362724,\n        173271062536305557219323722062711383294158572562695717740068656098441040230,\n        18120430890549410286417591505529104700901943324772175772035648111937818237369,\n        20484495168135072493552514219686101965206843697794133766912991150184337935627,\n        19155651295705203459475805213866664350848604323501251939850063308319753686505,\n        11971299749478202793661982361798418342615500543489781306376058267926437157297,\n        18285310723116790056148596536349375622245669010373674803854111592441823052978,\n        7069216248902547653615508023941692395371990416048967468982099270925308100727,\n        6465151453746412132599596984628739550147379072443683076388208843341824127379,\n        16143532858389170960690347742477978826830511669766530042104134302796355145785,\n        19362583304414853660976404410208489566967618125972377176980367224623492419647,\n        1702213613534733786921602839210290505213503664731919006932367875629005980493,\n        10781825404476535814285389902565833897646945212027592373510689209734812292327,\n        4212716923652881254737947578600828255798948993302968210248673545442808456151,\n        7594017890037021425366623750593200398174488805473151513558919864633711506220,\n        18979889247746272055963929241596362599320706910852082477600815822482192194401,\n        13602139229813231349386885113156901793661719180900395818909719758150455500533,\n    ];\n\n    let mut r = 0;\n    for elem in array {\n        let h = mimc(elem, r, constants, exponent);\n        r = r + elem + h;\n    }\n    r\n}\n",
        "path": "std/hash"
      },
      "17": {
        "source": "struct GrumpkinScalar {\n    low: Field,\n    high: Field,\n}\n\nimpl GrumpkinScalar {\n    fn new(low: Field, high: Field) -> Self {\n        // TODO: check that the low and high value fit within the grumpkin modulus\n        GrumpkinScalar { low, high }\n    }\n}\n\nglobal GRUMPKIN_SCALAR_SERIALIZED_LEN: Field = 2;\n\nfn deserialize_grumpkin_scalar(fields: [Field; GRUMPKIN_SCALAR_SERIALIZED_LEN]) -> GrumpkinScalar {\n    GrumpkinScalar { low: fields[0], high: fields[1] }\n}\n\nfn serialize_grumpkin_scalar(scalar: GrumpkinScalar) -> [Field; GRUMPKIN_SCALAR_SERIALIZED_LEN] {\n    [scalar.low, scalar.high]\n}\n",
        "path": "std/grumpkin_scalar"
      },
      "18": {
        "source": "use crate::grumpkin_scalar::GrumpkinScalar;\nuse crate::scalar_mul::fixed_base_embedded_curve;\n\nfn grumpkin_fixed_base(scalar: GrumpkinScalar) -> [Field; 2] {\n    // TODO: this should use both the low and high limbs to do the scalar multiplication\n    fixed_base_embedded_curve(scalar.low, scalar.high)\n}\n",
        "path": "std/grumpkin_scalar_mul"
      },
      "22": {
        "source": "\nimpl Field {\n    #[builtin(to_le_bits)]\n    pub fn to_le_bits(_x : Field, _bit_size: u32) -> [u1] {}\n    #[builtin(to_be_bits)]\n    pub fn to_be_bits(_x : Field, _bit_size: u32) -> [u1] {}\n\n    pub fn to_le_bytes(x : Field, byte_size: u32) -> [u8] {\n        x.to_le_radix(256, byte_size)\n    }\n    pub fn to_be_bytes(x : Field, byte_size: u32) -> [u8] {\n        x.to_be_radix(256, byte_size)\n    }\n\n    #[builtin(to_le_radix)]\n    //decompose _x into a _result_len vector over the _radix basis\n    //_radix must be less than 256\n    pub fn to_le_radix(_x : Field, _radix: u32, _result_len: u32) -> [u8] {}\n    #[builtin(to_be_radix)]\n    pub fn to_be_radix(_x : Field, _radix: u32, _result_len: u32) -> [u8] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b = exponent.to_le_bits(32);\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32-i] as Field) * (r * self) + (1 - b[32-i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x ∈ {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub fn modulus_num_bits() -> Field {}\n\n#[builtin(modulus_be_bits)]\npub fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub fn modulus_le_bytes() -> [u8] {}\n",
        "path": "std/field"
      },
      "36": {
        "source": "use crate::constants_gen::{\n    RETURN_VALUES_LENGTH,\n    MAX_READ_REQUESTS_PER_CALL,\n    MAX_PENDING_READ_REQUESTS_PER_CALL,\n    MAX_NEW_COMMITMENTS_PER_CALL,\n    MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n    NUM_FIELDS_PER_SHA256,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n    MAX_PUBLIC_DATA_READS_PER_CALL,\n    GENERATOR_INDEX__FUNCTION_ARGS,\n    HISTORIC_BLOCK_DATA_LENGTH,\n    CONTRACT_DEPLOYMENT_DATA_LENGTH,\n    CALL_CONTEXT_LENGTH,\n    PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH,\n    CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH,\n    CONTRACT_STORAGE_READ_LENGTH,\n    PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH,\n    GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS,\n    GENERATOR_INDEX__FUNCTION_DATA,\n    GENERATOR_INDEX__PUBLIC_DATA_READ,\n    GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST,\n    GENERATOR_INDEX__CALL_CONTEXT,\n    GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS,\n    GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA,\n};\n\nuse crate::oracle::debug_log;\nuse crate::types::vec::BoundedVec;\nuse crate::types::point::Point;\n\n\n// docs:start:private-global-variables\nstruct PrivateGlobalVariables {\n    chain_id: Field,\n    version: Field,\n}\n// docs:end:private-global-variables\n\nimpl PrivateGlobalVariables {\n    fn serialize(self) -> [Field; 2] {\n        [self.chain_id, self.version]\n    }\n}\n\n// docs:start:public-global-variables\nstruct PublicGlobalVariables {\n    chain_id: Field,\n    version: Field,\n    block_number: Field,\n    timestamp: Field,\n}\n// docs:end:public-global-variables\n\nimpl PublicGlobalVariables {\n    fn serialize(self) -> [Field; 4] {\n        [self.chain_id, self.version, self.block_number, self.timestamp]\n    }\n}\n\n// docs:start:contract-deployment-data\nstruct ContractDeploymentData {\n    deployer_public_key: Point,\n    constructor_vk_hash : Field,\n    function_tree_root : Field,\n    contract_address_salt : Field,\n    portal_contract_address : Field,\n}\n// docs:end:contract-deployment-data\n\nimpl ContractDeploymentData {\n    fn serialize(self) -> [Field; CONTRACT_DEPLOYMENT_DATA_LENGTH] {\n        [\n            self.deployer_public_key.x,\n            self.deployer_public_key.y,\n            self.constructor_vk_hash,\n            self.function_tree_root,\n            self.contract_address_salt,\n            self.portal_contract_address,\n        ]\n    }\n\n    fn hash(self) -> Field {\n        dep::std::hash::pedersen_with_separator(self.serialize(), GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA)[0]\n    }\n}\n\n// PrivateContextInputs are expected to be provided to each private function\n// docs:start:private-context-inputs\nstruct PrivateContextInputs {\n    call_context : CallContext,\n    block_data: HistoricBlockData,\n    contract_deployment_data: ContractDeploymentData,\n    private_global_variables: PrivateGlobalVariables,\n}\n// docs:end:private-context-inputs\n\n// PublicContextInputs are expected to be provided to each public function\n// docs:start:public-context-inputs\nstruct PublicContextInputs {\n    call_context: CallContext,\n    block_data: HistoricBlockData,\n\n    public_global_variables: PublicGlobalVariables,\n}\n// docs:end:public-context-inputs\n\n// docs:start:call-context\nstruct CallContext {\n    msg_sender : Field,\n    storage_contract_address : Field,\n    portal_contract_address : Field,\n    function_selector: Field,\n\n    is_delegate_call : bool,\n    is_static_call : bool,\n    is_contract_deployment: bool,\n}\n// docs:end:call-context\n\nimpl CallContext {\n    fn serialize(self) -> [Field; CALL_CONTEXT_LENGTH] {\n        [\n            self.msg_sender,\n            self.storage_contract_address,\n            self.portal_contract_address,\n            self.function_selector,\n            self.is_delegate_call as Field,\n            self.is_static_call as Field,\n            self.is_contract_deployment as Field,\n        ]\n    }\n\n    fn hash(self) -> Field {\n        dep::std::hash::pedersen_with_separator(self.serialize(), GENERATOR_INDEX__CALL_CONTEXT)[0]\n    }\n}\n\n// docs:start:historic-block-data\nstruct HistoricBlockData {\n    private_data_tree_root : Field,\n    nullifier_tree_root : Field,\n    contract_tree_root : Field,\n    l1_to_l2_messages_tree_root : Field,\n    blocks_tree_root: Field,\n    public_data_tree_root: Field,\n    global_variables_hash: Field,\n}\n// docs:end:historic-block-data\n\nimpl HistoricBlockData {\n    // NOTE: this order must match the order in `private_circuit_public_inputs.hpp`\n    pub fn serialize(self) -> [Field; HISTORIC_BLOCK_DATA_LENGTH] {\n        [\n            self.private_data_tree_root,\n            self.nullifier_tree_root,\n            self.contract_tree_root,\n            self.l1_to_l2_messages_tree_root,\n            self.blocks_tree_root,\n            self.public_data_tree_root,\n            self.global_variables_hash,\n        ]\n    }\n\n    pub fn empty() -> Self {\n        Self { private_data_tree_root: 0, nullifier_tree_root: 0, contract_tree_root: 0, l1_to_l2_messages_tree_root: 0, blocks_tree_root: 0, public_data_tree_root: 0, global_variables_hash: 0 }\n    }\n}\n\nstruct FunctionData {\n    function_selector: Field,\n    is_internal: bool,\n    is_private: bool,\n    is_constructor: bool,\n}\n\nimpl FunctionData {\n    fn hash(self) -> Field {\n        dep::std::hash::pedersen_with_separator([\n            self.function_selector,\n            self.is_internal as Field,\n            self.is_private as Field,\n            self.is_constructor as Field,\n        ], GENERATOR_INDEX__FUNCTION_DATA)[0]\n    }\n}\n\nstruct PrivateCircuitPublicInputs {\n    call_context: CallContext,\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n    read_requests: [Field; crate::abi::MAX_READ_REQUESTS_PER_CALL],\n    pending_read_requests: [Field; crate::abi::MAX_PENDING_READ_REQUESTS_PER_CALL],\n    new_commitments: [Field; MAX_NEW_COMMITMENTS_PER_CALL],\n    new_nullifiers: [Field; MAX_NEW_NULLIFIERS_PER_CALL],\n    nullified_commitments: [Field; MAX_NEW_NULLIFIERS_PER_CALL],\n    private_call_stack: [Field; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL],\n    public_call_stack: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_l2_to_l1_msgs: [Field; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n    // Explore introducing a new type like uint256 (similar to Point), so it's more explicit that\n    // we're talking about a single number backed by two field elements.\n    encrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    encrypted_log_preimages_length: Field,\n    unencrypted_log_preimages_length: Field,\n    block_data: HistoricBlockData,\n    contract_deployment_data: ContractDeploymentData,\n    chain_id: Field,\n    version: Field,\n}\n\nimpl PrivateCircuitPublicInputs {\n    fn hash(self) -> Field {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH> = BoundedVec::new(0); \n        fields.push(self.call_context.hash());\n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        fields.push_array(self.read_requests);\n        fields.push_array(self.pending_read_requests);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.nullified_commitments);\n        fields.push_array(self.private_call_stack);\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.encrypted_logs_hash);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.encrypted_log_preimages_length);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_data.serialize());\n        fields.push(self.contract_deployment_data.hash());\n        fields.push(self.chain_id);\n        fields.push(self.version);\n\n        dep::std::hash::pedersen_with_separator(fields.storage, GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS)[0]\n    }\n\n    fn serialize(self) -> [Field; PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new(0); \n        fields.push_array(self.call_context.serialize());\n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        fields.push_array(self.read_requests);\n        fields.push_array(self.pending_read_requests);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.private_call_stack);\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.encrypted_logs_hash);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.encrypted_log_preimages_length);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_data.serialize());\n        fields.push_array(self.contract_deployment_data.serialize());\n        fields.push(self.chain_id);\n        fields.push(self.version);\n        fields.storage\n    }\n}\n\nstruct ContractStorageRead {\n    storage_slot: Field,\n    value: Field,\n}\n\nimpl ContractStorageRead {\n    pub fn serialize(self) -> [Field; CONTRACT_STORAGE_READ_LENGTH] {\n        [self.storage_slot, self.value]\n    }\n\n    pub fn hash(self) -> Field {\n        dep::std::hash::pedersen_with_separator(self.serialize(), GENERATOR_INDEX__PUBLIC_DATA_READ)[0]\n    }\n\n    pub fn empty() -> Self {\n        Self { storage_slot: 0, value: 0 }\n    }\n}\n\nstruct ContractStorageUpdateRequest {\n    storage_slot: Field,\n    old_value: Field,\n    new_value: Field,\n}\n\nimpl ContractStorageUpdateRequest {\n    pub fn serialize(self) -> [Field; CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH] {\n        [self.storage_slot, self.old_value, self.new_value]\n    }\n\n    pub fn hash(self) -> Field {\n        dep::std::hash::pedersen_with_separator(self.serialize(), GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST)[0]\n    }\n\n    pub fn empty() -> Self {\n        Self { storage_slot: 0, old_value: 0, new_value: 0 }\n    }\n}\n\n\nstruct PublicCircuitPublicInputs {\n    call_context: CallContext,\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n    contract_storage_update_requests: [ContractStorageUpdateRequest; MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n    contract_storage_read: [ContractStorageRead; MAX_PUBLIC_DATA_READS_PER_CALL],\n    public_call_stack: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_commitments: [Field; MAX_NEW_COMMITMENTS_PER_CALL],\n    new_nullifiers: [Field; crate::abi::MAX_NEW_NULLIFIERS_PER_CALL],\n    new_l2_to_l1_msgs: [Field; crate::abi::MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    unencrypted_log_preimages_length: Field,\n    block_data: HistoricBlockData,\n    prover_address: Field,\n}\n\nimpl PublicCircuitPublicInputs {\n    \n    pub fn hash(self) -> Field {\n        let mut inputs: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH> = BoundedVec::new(0);\n        inputs.push(self.call_context.hash());\n        inputs.push(self.args_hash);\n        inputs.push_array(self.return_values);\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            inputs.push(self.contract_storage_update_requests[i].hash());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            inputs.push(self.contract_storage_read[i].hash());\n        }\n        inputs.push_array(self.public_call_stack);\n        inputs.push_array(self.new_commitments);\n        inputs.push_array(self.new_nullifiers);\n        inputs.push_array(self.new_l2_to_l1_msgs);\n\n        inputs.push_array(self.unencrypted_logs_hash);\n        inputs.push(self.unencrypted_log_preimages_length);\n        inputs.push_array(self.block_data.serialize());\n        inputs.push(self.prover_address);\n\n        dep::std::hash::pedersen_with_separator(inputs.storage, GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS)[0]\n    }\n\n    pub fn serialize(self) -> [Field; PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new(0); \n        fields.push_array(self.call_context.serialize());   \n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            fields.push_array(self.contract_storage_update_requests[i].serialize());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            fields.push_array(self.contract_storage_read[i].serialize());\n        }\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_data.serialize());\n        fields.push(self.prover_address);\n        fields.storage\n    }\n}\n\nstruct Hasher {\n    fields: [Field],\n}\n\nimpl Hasher {\n    pub fn new()-> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<N>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n\n    pub fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nglobal ARGS_HASH_CHUNK_LENGTH: u32 = 32;\nglobal ARGS_HASH_CHUNK_COUNT: u32 = 16;\n\npub fn hash_args<N>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        let mut chunks_hashes = [0; ARGS_HASH_CHUNK_COUNT];\n        for i in 0..ARGS_HASH_CHUNK_COUNT {\n            let mut chunk_hash = 0;\n            let start_chunk_index = i * ARGS_HASH_CHUNK_LENGTH;\n            if start_chunk_index < (args.len() as u32) {\n                let mut chunk_args = [0; ARGS_HASH_CHUNK_LENGTH];\n                for j in 0..ARGS_HASH_CHUNK_LENGTH {\n                    let item_index = i * ARGS_HASH_CHUNK_LENGTH + j;\n                    if item_index < (args.len() as u32) {\n                        chunk_args[j] = args[item_index];\n                    }\n                }\n                chunk_hash = dep::std::hash::pedersen_with_separator(chunk_args, GENERATOR_INDEX__FUNCTION_ARGS)[0];\n            }\n            chunks_hashes[i] = chunk_hash;\n        }\n        dep::std::hash::pedersen_with_separator(chunks_hashes, GENERATOR_INDEX__FUNCTION_ARGS)[0]\n    }\n}\n",
        "path": "/home/maga/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.9.0/yarn-project/aztec-nr/aztec/src/abi"
      },
      "37": {
        "source": "use dep::std::hash;\nuse crate::constants_gen::GENERATOR_INDEX__CONTRACT_ADDRESS;\n\npub fn compute_address(pub_key_x: Field, pub_key_y: Field, partial_address: Field) -> Field {\n  hash::pedersen_with_separator([pub_key_x, pub_key_y, partial_address], GENERATOR_INDEX__CONTRACT_ADDRESS)[0]\n}",
        "path": "/home/maga/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.9.0/yarn-project/aztec-nr/aztec/src/address"
      },
      "39": {
        "source": "use crate::constants_gen::{\n    EMPTY_NULLIFIED_COMMITMENT,\n    MAX_NEW_COMMITMENTS_PER_CALL,\n    MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n    MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_DATA_READS_PER_CALL,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n    MAX_READ_REQUESTS_PER_CALL,\n    MAX_PENDING_READ_REQUESTS_PER_CALL,\n    NUM_FIELDS_PER_SHA256,\n    RETURN_VALUES_LENGTH,\n};\n\nuse crate::abi;\n\nuse crate::abi::{\n    hash_args,\n    CallContext,\n    ContractDeploymentData,\n    HistoricBlockData,\n    FunctionData,\n    PrivateCircuitPublicInputs,\n    PublicCircuitPublicInputs,\n};\n\n// TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n// use dep::std::collections::vec::Vec;\n\n// l1 to l2 messaging\nuse crate::messaging::process_l1_to_l2_message;\nuse crate::private_call_stack_item::PrivateCallStackItem;\nuse crate::public_call_stack_item::PublicCallStackItem;\n\nuse crate::types::{\n    vec::BoundedVec,\n    point::Point,\n};\n\nuse crate::utils::arr_copy_slice;\n\nuse crate::oracle::{\n    arguments,\n    call_private_function::call_private_function_internal,\n    public_call::call_public_function_internal,\n    enqueue_public_function_call::enqueue_public_function_call_internal,\n    context::get_portal_address,\n};\n\nuse dep::std::option::Option;\n\n// When finished, one can call .finish() to convert back to the abi\nstruct PrivateContext {\n    // docs:start:private-context\n    inputs: abi::PrivateContextInputs,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    read_requests: BoundedVec<Field, MAX_READ_REQUESTS_PER_CALL>,\n    pending_read_requests: BoundedVec<Field, MAX_PENDING_READ_REQUESTS_PER_CALL>,\n\n    new_commitments: BoundedVec<Field, MAX_NEW_COMMITMENTS_PER_CALL>,\n    new_nullifiers: BoundedVec<Field, MAX_NEW_NULLIFIERS_PER_CALL>,\n    nullified_commitments: BoundedVec<Field, MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    private_call_stack : BoundedVec<Field, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    public_call_stack : BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n    new_l2_to_l1_msgs : BoundedVec<Field, MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    block_data: HistoricBlockData,\n\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    // encrypted_logs_preimages: Vec<Field>,\n    // unencrypted_logs_preimages: Vec<Field>,\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: abi::PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs: inputs,\n\n            args_hash: args_hash,\n            return_values: BoundedVec::new(0),\n\n            read_requests: BoundedVec::new(0),\n            pending_read_requests: BoundedVec::new(0),\n\n            new_commitments: BoundedVec::new(0),\n            new_nullifiers: BoundedVec::new(0),\n            nullified_commitments: BoundedVec::new(0),\n\n            block_data: inputs.block_data,\n\n            private_call_stack: BoundedVec::new(0),\n            public_call_stack: BoundedVec::new(0),\n            new_l2_to_l1_msgs: BoundedVec::new(0),\n\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n        }\n    }\n\n    pub fn msg_sender(self) -> Field {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> Field {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    pub fn this_portal_address(self) -> Field {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.private_global_variables.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.private_global_variables.version\n    }\n\n    pub fn selector(self) -> Field {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn finish(self) -> abi::PrivateCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let encrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let encrypted_log_preimages_length = 0;\n        let unencrypted_log_preimages_length = 0;\n\n        let priv_circuit_pub_inputs = abi::PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            return_values: self.return_values.storage,\n            read_requests: self.read_requests.storage,\n            pending_read_requests: self.pending_read_requests.storage,\n            new_commitments: self.new_commitments.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            nullified_commitments: self.nullified_commitments.storage,\n            private_call_stack: self.private_call_stack.storage,\n            public_call_stack: self.public_call_stack.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            encrypted_logs_hash: encrypted_logs_hash,\n            unencrypted_logs_hash: unencrypted_logs_hash,\n            encrypted_log_preimages_length: encrypted_log_preimages_length,\n            unencrypted_log_preimages_length: unencrypted_log_preimages_length,\n            block_data: self.block_data,\n            contract_deployment_data: self.inputs.contract_deployment_data,\n            chain_id: self.inputs.private_global_variables.chain_id,\n            version: self.inputs.private_global_variables.version,\n        };\n        priv_circuit_pub_inputs\n    }\n\n    pub fn push_read_request(&mut self, read_request: Field) {\n        self.read_requests.push(read_request);\n    }\n\n    pub fn push_pending_read_request(&mut self, pending_read_request: Field) {\n        self.pending_read_requests.push(pending_read_request);\n    }\n\n    pub fn push_new_note_hash(&mut self, note_hash: Field) {\n        self.new_commitments.push(note_hash);\n    }\n\n    // We never push a zero nullified_commitment as zero is used to indicate the end\n    // of a field array in private kernel. This routine transparently replaces a\n    // zero value into the special placeholder: EMPTY_NULLIFIED_COMMITMENT.\n    pub fn push_new_nullifier(&mut self, nullifier: Field, nullified_commitment: Field) {\n        self.new_nullifiers.push(nullifier);\n        let mut non_zero_nullified = nullified_commitment;\n        if (non_zero_nullified == 0) {\n            non_zero_nullified = EMPTY_NULLIFIED_COMMITMENT;\n        }\n        self.nullified_commitments.push(non_zero_nullified);\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, content: Field) \n    // docs:end:context_message_portal\n    {\n        self.new_l2_to_l1_msgs.push(content);\n    }\n\n    // PrivateContextInputs must be temporarily passed in to prevent too many unknowns\n    // Note this returns self to get around an issue where mutable structs do not maintain mutations unless reassigned\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        msg_key: Field,\n        content: Field,\n        secret: Field\n    ) \n    // docs:end:context_consume_l1_to_l2_message\n    {\n        let nullifier = process_l1_to_l2_message(self.block_data.l1_to_l2_messages_tree_root, self.this_address(), msg_key, content, secret);\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, EMPTY_NULLIFIED_COMMITMENT)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    pub fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn call_private_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash)\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0)\n    }\n\n    pub fn call_private_function_with_packed_args(\n        &mut self,\n        contract_address: Field,\n        function_selector: Field,\n        args_hash: Field\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let fields = call_private_function_internal(\n            contract_address, \n            function_selector, \n            args_hash\n        );\n        let item = PrivateCallStackItem {\n            contract_address: fields[0],\n            function_data: FunctionData {\n                function_selector: fields[1],\n                is_internal: fields[2] as bool,\n                is_private: fields[3] as bool,\n                is_constructor: fields[4] as bool,\n            },\n            public_inputs: PrivateCircuitPublicInputs {\n                call_context: CallContext {\n                    msg_sender : fields[5],\n                    storage_contract_address : fields[6],\n                    portal_contract_address : fields[7],\n                    function_selector: fields[8], // practically same as fields[1]\n                    is_delegate_call : fields[9] as bool,\n                    is_static_call : fields[10] as bool,\n                    is_contract_deployment: fields[11] as bool,\n                },\n                // TODO handle the offsets as a variable incremented during extraction?\n                args_hash: fields[12],\n                return_values: arr_copy_slice(fields, [0; RETURN_VALUES_LENGTH], 13),\n                read_requests: arr_copy_slice(fields, [0; MAX_READ_REQUESTS_PER_CALL], 17),\n                pending_read_requests: arr_copy_slice(fields, [0; MAX_READ_REQUESTS_PER_CALL], 49),\n                new_commitments: arr_copy_slice(fields, [0; MAX_NEW_COMMITMENTS_PER_CALL], 81),\n                new_nullifiers: arr_copy_slice(fields, [0; MAX_NEW_NULLIFIERS_PER_CALL], 97),\n                nullified_commitments: arr_copy_slice(fields, [0; MAX_NEW_NULLIFIERS_PER_CALL], 113),\n                private_call_stack: arr_copy_slice(fields, [0; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL], 129),\n                public_call_stack: arr_copy_slice(fields, [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL], 133),\n                new_l2_to_l1_msgs: arr_copy_slice(fields, [0; MAX_NEW_L2_TO_L1_MSGS_PER_CALL], 137),\n                encrypted_logs_hash: arr_copy_slice(fields, [0; NUM_FIELDS_PER_SHA256], 139),\n                unencrypted_logs_hash: arr_copy_slice(fields, [0; NUM_FIELDS_PER_SHA256], 141),\n                encrypted_log_preimages_length: fields[143],\n                unencrypted_log_preimages_length: fields[144],\n                block_data: HistoricBlockData {\n                    // Must match order in `private_circuit_public_inputs.hpp`\n                    private_data_tree_root : fields[145],\n                    nullifier_tree_root : fields[146],\n                    contract_tree_root : fields[147],\n                    l1_to_l2_messages_tree_root : fields[148],\n                    blocks_tree_root : fields[149],\n                    public_data_tree_root: fields[150],\n                    global_variables_hash: fields[151],\n                },\n                contract_deployment_data: ContractDeploymentData {\n                    deployer_public_key: Point::new(fields[152], fields[153]),\n                    constructor_vk_hash : fields[154],\n                    function_tree_root : fields[155],\n                    contract_address_salt : fields[156],\n                    portal_contract_address : fields[157],\n                },\n                chain_id: fields[158],\n                version: fields[159],\n            },\n            is_execution_request: fields[160] as bool,\n        };\n        assert(contract_address == item.contract_address);\n        assert(function_selector == item.function_data.function_selector);\n\n        assert(args_hash == item.public_inputs.args_hash);\n\n        assert(item.is_execution_request == false);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        // We are issuing a regular call which is not delegate, static, or deployment. We also constrain\n        // the msg_sender in the nested call to be equal to our address, and the execution context address\n        // for the nested call to be equal to the address we actually called.\n        assert(item.public_inputs.call_context.is_delegate_call == false);\n        assert(item.public_inputs.call_context.is_static_call == false);\n        assert(item.public_inputs.call_context.is_contract_deployment == false);\n        assert(item.public_inputs.call_context.msg_sender == self.inputs.call_context.storage_contract_address);\n        assert(item.public_inputs.call_context.storage_contract_address == contract_address);\n\n        self.private_call_stack.push(item.hash());\n\n        item.public_inputs.return_values\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash)\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field,\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0)\n    }\n\n    pub fn call_public_function_with_packed_args(\n        &mut self,\n        contract_address: Field,\n        function_selector: Field,\n        args_hash: Field\n    ) {\n        let fields = enqueue_public_function_call_internal(\n            contract_address, \n            function_selector, \n            args_hash\n        );\n        let item = PublicCallStackItem {\n            contract_address: fields[0],\n            function_data: FunctionData {\n                function_selector: fields[1],\n                is_internal: fields[2] as bool,\n                is_private: fields[3] as bool,\n                is_constructor: fields[4] as bool,\n            },\n            public_inputs: PublicCircuitPublicInputs {\n                call_context: CallContext {\n                    msg_sender : fields[5],\n                    storage_contract_address : fields[6],\n                    portal_contract_address : fields[7],\n                    function_selector: fields[8], // practically same as fields[1]\n                    is_delegate_call : fields[9] as bool,\n                    is_static_call : fields[10] as bool,\n                    is_contract_deployment: fields[11] as bool,\n                },\n                args_hash: fields[12],\n                return_values: [0; RETURN_VALUES_LENGTH],\n                contract_storage_update_requests: [ContractStorageUpdateRequest::empty(); MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n                contract_storage_read: [ContractStorageRead::empty(); MAX_PUBLIC_DATA_READS_PER_CALL],\n                public_call_stack: [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n                new_commitments: [0; MAX_NEW_COMMITMENTS_PER_CALL],\n                new_nullifiers: [0; MAX_NEW_NULLIFIERS_PER_CALL],\n                new_l2_to_l1_msgs:[0; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n                unencrypted_logs_hash:[0; NUM_FIELDS_PER_SHA256],\n                unencrypted_log_preimages_length: 0,\n                block_data: HistoricBlockData::empty(),\n                prover_address: 0,\n            },\n            is_execution_request: true,\n        };\n\n        assert(contract_address == item.contract_address);\n        assert(function_selector == item.function_data.function_selector);\n        \n        assert(args_hash == item.public_inputs.args_hash);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        // We are issuing a regular call which is not delegate, static, or deployment. We also constrain\n        // the msg_sender in the nested call to be equal to our address, and the execution context address\n        // for the nested call to be equal to the address we actually called.\n        assert(item.public_inputs.call_context.is_delegate_call == false);\n        assert(item.public_inputs.call_context.is_static_call == false);\n        assert(item.public_inputs.call_context.is_contract_deployment == false);\n        assert(item.public_inputs.call_context.msg_sender == self.inputs.call_context.storage_contract_address);\n        assert(item.public_inputs.call_context.storage_contract_address == contract_address);\n\n        self.public_call_stack.push(item.hash());\n    }\n}\n\nuse crate::abi::{\n    ContractStorageRead,\n    ContractStorageUpdateRequest\n};\n\nstruct PublicContext {\n    inputs: abi::PublicContextInputs,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    contract_storage_update_requests: BoundedVec<ContractStorageUpdateRequest, MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL>,\n    contract_storage_read: BoundedVec<ContractStorageRead, MAX_PUBLIC_DATA_READS_PER_CALL>,\n    public_call_stack: BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n\n    new_commitments: BoundedVec<Field, MAX_NEW_COMMITMENTS_PER_CALL>,\n    new_nullifiers: BoundedVec<Field, crate::abi::MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    new_l2_to_l1_msgs: BoundedVec<Field, crate::abi::MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n\n    unencrypted_logs_hash: BoundedVec<Field, NUM_FIELDS_PER_SHA256>,\n    unencrypted_logs_preimages_length: Field,\n\n    block_data: HistoricBlockData,\n    prover_address: Field,\n}\n\nimpl PublicContext {\n    pub fn new(inputs: abi::PublicContextInputs, args_hash: Field) -> PublicContext {\n        let empty_storage_read = ContractStorageRead::empty();\n        let empty_storage_update = ContractStorageUpdateRequest::empty();\n        PublicContext {\n            inputs: inputs,\n\n            args_hash: args_hash,\n            return_values: BoundedVec::new(0),\n\n            contract_storage_update_requests: BoundedVec::new(empty_storage_update),\n            contract_storage_read: BoundedVec::new(empty_storage_read),\n            public_call_stack: BoundedVec::new(0),\n\n            new_commitments: BoundedVec::new(0),\n            new_nullifiers: BoundedVec::new(0),\n\n            new_l2_to_l1_msgs: BoundedVec::new(0),\n\n            \n            unencrypted_logs_hash: BoundedVec::new(0),\n            unencrypted_logs_preimages_length: 0,\n\n            block_data: inputs.block_data,\n            prover_address: 0,\n\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n        }\n    }\n\n    pub fn msg_sender(self) -> Field {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> Field {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    pub fn this_portal_address(self) -> Field {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.public_global_variables.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.public_global_variables.version\n    }\n\n    pub fn selector(self) -> Field {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn block_number(self) -> Field {\n        self.inputs.public_global_variables.block_number\n    }\n\n    pub fn timestamp(self) -> Field {\n        self.inputs.public_global_variables.timestamp\n    }\n\n    pub fn finish(self) -> abi::PublicCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_log_preimages_length = 0;\n\n\n        // Compute the public call stack hashes\n        let pub_circuit_pub_inputs = abi::PublicCircuitPublicInputs {\n            call_context: self.inputs.call_context, // Done\n            args_hash: self.args_hash, // Done\n            contract_storage_update_requests: self.contract_storage_update_requests.storage,\n            contract_storage_read: self.contract_storage_read.storage,\n            return_values: self.return_values.storage,\n            new_commitments: self.new_commitments.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            public_call_stack: self.public_call_stack.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            unencrypted_logs_hash: unencrypted_logs_hash,\n            unencrypted_log_preimages_length: unencrypted_log_preimages_length,\n            block_data: self.inputs.block_data,\n            prover_address: self.prover_address,\n        };\n        pub_circuit_pub_inputs\n    }\n\n    pub fn push_new_note_hash(&mut self, note_hash: Field) {\n        self.new_commitments.push(note_hash);\n    }\n\n    pub fn push_new_nullifier(&mut self, nullifier: Field, _nullified_commitment: Field) {\n        self.new_nullifiers.push(nullifier);\n    }\n\n    pub fn message_portal(&mut self, content: Field) {\n        self.new_l2_to_l1_msgs.push(content);\n    }\n\n    // PrivateContextInputs must be temporarily passed in to prevent too many unknowns\n    // Note this returns self to get around an issue where mutable structs do not maintain mutations unless reassigned\n    pub fn consume_l1_to_l2_message(&mut self, msg_key: Field, content: Field, secret: Field) {\n        let this = (*self).this_address();\n        let nullifier = process_l1_to_l2_message(self.block_data.l1_to_l2_messages_tree_root, this, msg_key, content, secret);\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, EMPTY_NULLIFIED_COMMITMENT)\n    }\n\n    pub fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        _self: Self,\n        contract_address: Field, \n        function_selector: Field,\n        args: [Field; ARGS_COUNT],\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = abi::hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        call_public_function_internal(\n            contract_address, \n            function_selector, \n            args_hash,\n        )\n    }\n\n    pub fn call_public_function_no_args(\n        _self: Self,\n        contract_address: Field, \n        function_selector: Field,\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        call_public_function_internal(\n            contract_address, \n            function_selector, \n            0,\n        )\n    }\n\n}\n\nstruct Context {\n    private: Option<&mut PrivateContext>,\n    public: Option<&mut PublicContext>,\n}\n\nimpl Context {\n    pub fn private(context: &mut PrivateContext) -> Context {\n        Context {\n            private: Option::some(context),\n            public: Option::none()\n        }\n    }\n\n    pub fn public(context: &mut PublicContext) -> Context {\n        Context {\n            public: Option::some(context),\n            private: Option::none()\n        }\n    }\n\n    pub fn none() -> Context {\n        Context {\n            public: Option::none(),\n            private: Option::none()\n        }\n    }\n}",
        "path": "/home/maga/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.9.0/yarn-project/aztec-nr/aztec/src/context"
      },
      "47": {
        "source": "use dep::std::option::Option;\nuse crate::constants_gen::{\n    MAX_READ_REQUESTS_PER_CALL,\n    GET_NOTE_ORACLE_RETURN_LENGTH,\n    GET_NOTES_ORACLE_RETURN_LENGTH,\n    MAX_NOTES_PER_PAGE,\n    VIEW_NOTE_ORACLE_RETURN_LENGTH,\n};\nuse crate::context::PrivateContext;\nuse crate::note::{\n    note_getter_options::{NoteGetterOptions, Select, Sort, SortOrder},\n    note_interface::NoteInterface,\n    note_viewer_options::NoteViewerOptions,\n    utils::compute_note_hash_for_read_or_nullify,\n};\nuse crate::oracle;\nuse crate::types::vec::BoundedVec;\n\nfn check_note_header<Note, N>(\n    context: PrivateContext,\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    note: Note,\n) {\n    let get_header = note_interface.get_header;\n    let header = get_header(note);\n    let contract_address = context.this_address();\n    assert(header.contract_address == contract_address);\n    assert(header.storage_slot == storage_slot);\n}\n\nfn check_note_fields<N>(\n    fields: [Field; N],\n    selects: BoundedVec<Option<Select>, N>,\n) {\n    for i in 0..selects.len {\n        let select = selects.get_unchecked(i).unwrap_unchecked();\n        assert(fields[select.field_index] == select.value, \"Mismatch return note field.\");\n    }\n}\n\nfn check_notes_order<N>(fields_0: [Field; N], fields_1: [Field; N], sorts: BoundedVec<Option<Sort>, N>) {\n    for i in 0..sorts.len {\n        let sort = sorts.get_unchecked(i).unwrap_unchecked();\n        let eq = fields_0[sort.field_index] == fields_1[sort.field_index];\n        let lt = fields_0[sort.field_index] as u120 < fields_1[sort.field_index] as u120;\n        if sort.order == SortOrder.ASC {\n            assert(eq | lt, \"Return notes not sorted in ascending order.\");\n        } else if !eq {\n            assert(!lt, \"Return notes not sorted in descending order.\");\n        }\n    }\n}\n\npub fn get_note<Note, N>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n) -> Note {\n    let note = get_note_internal(storage_slot, note_interface);\n\n    check_note_header(*context, storage_slot, note_interface, note);\n\n    let note_hash_for_read_request = compute_note_hash_for_read_or_nullify(note_interface, note);\n\n    context.push_read_request(note_hash_for_read_request);\n    note\n}\n\npub fn get_notes<Note, N, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    options: NoteGetterOptions<Note, N, FILTER_ARGS>,\n) -> [Option<Note>; MAX_READ_REQUESTS_PER_CALL] {\n    let opt_notes = get_notes_internal(storage_slot, note_interface, options);\n    let mut num_notes = 0;\n    let mut prev_fields = [0; N];\n    for i in 0..opt_notes.len() {\n        let opt_note = opt_notes[i];\n        if opt_note.is_some() {\n            let note = opt_note.unwrap_unchecked();\n            let serialize = note_interface.serialize;\n            let fields = serialize(note);\n            check_note_header(*context, storage_slot, note_interface, note);\n            check_note_fields(fields, options.selects);\n            if i != 0 {\n                check_notes_order(prev_fields, fields, options.sorts);\n            }\n            prev_fields = fields;\n\n            let note_hash_for_read_request = compute_note_hash_for_read_or_nullify(note_interface, note);\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1410): test to ensure\n            // failure if malicious oracle injects 0 nonce here for a \"pre-existing\" note.\n            context.push_read_request(note_hash_for_read_request);\n\n            num_notes += 1;\n        };\n    };\n    if options.limit != 0 {\n        assert(num_notes <= options.limit, \"Invalid number of return notes.\");\n    }\n    opt_notes\n}\n\nunconstrained fn get_note_internal<Note, N>(\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n) -> Note {\n    let placeholder_note = [Option::none()];\n    let placeholder_fields = [0; GET_NOTE_ORACLE_RETURN_LENGTH];\n    oracle::notes::get_notes(\n        storage_slot,\n        note_interface,\n        0,\n        [],\n        [],\n        [],\n        [],\n        1, // limit\n        0, // offset\n        placeholder_note,\n        placeholder_fields,\n    )[0].unwrap() // Notice: we don't allow dummies to be returned from get_note (singular).\n}\n\nunconstrained fn get_notes_internal<Note, N, FILTER_ARGS>(\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    options: NoteGetterOptions<Note, N, FILTER_ARGS>,\n) -> [Option<Note>; MAX_READ_REQUESTS_PER_CALL] {\n    let (num_selects, select_by, select_values, sort_by, sort_order) = flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_READ_REQUESTS_PER_CALL];\n    let placeholder_fields = [0; GET_NOTES_ORACLE_RETURN_LENGTH];\n    let opt_notes = oracle::notes::get_notes(\n        storage_slot,\n        note_interface,\n        num_selects,\n        select_by,\n        select_values,\n        sort_by,\n        sort_order,\n        options.limit,\n        options.offset,\n        placeholder_opt_notes,\n        placeholder_fields,\n    );\n\n    let filter = options.filter;\n    let filter_args = options.filter_args;\n    filter(opt_notes, filter_args)\n}\n\nunconstrained pub fn view_notes<Note, N>(\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    options: NoteViewerOptions<Note, N>,\n) -> [Option<Note>; MAX_NOTES_PER_PAGE] {\n    let (num_selects, select_by, select_values, sort_by, sort_order) = flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_NOTES_PER_PAGE];\n    let placeholder_fields = [0; VIEW_NOTE_ORACLE_RETURN_LENGTH];\n    oracle::notes::get_notes(\n        storage_slot,\n        note_interface,\n        num_selects,\n        select_by,\n        select_values,\n        sort_by,\n        sort_order,\n        options.limit,\n        options.offset,\n        placeholder_opt_notes,\n        placeholder_fields,\n    )\n}\n\nunconstrained fn flatten_options<Note, N>(\n    selects: BoundedVec<Option<Select>, N>,\n    sorts: BoundedVec<Option<Sort>, N>,\n) -> (u8, [u8; N], [Field; N], [u8; N], [u2; N]) {\n    let mut num_selects = 0;\n    let mut select_by = [0; N];\n    let mut select_values = [0; N];\n    for i in 0..selects.len {\n        let select = selects.get(i);\n        if select.is_some() {\n            select_by[num_selects] = select.unwrap_unchecked().field_index;\n            select_values[num_selects] = select.unwrap_unchecked().value;\n            num_selects += 1;\n        };\n    };\n\n    let mut sort_by = [0; N];\n    let mut sort_order = [0; N];\n    for i in 0..sorts.len {\n        let sort = sorts.get(i);\n        if sort.is_some() {\n            sort_by[i] = sort.unwrap_unchecked().field_index;\n            sort_order[i] = sort.unwrap_unchecked().order;\n        };\n    };\n\n    (num_selects, select_by, select_values, sort_by, sort_order)\n}",
        "path": "/home/maga/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.9.0/yarn-project/aztec-nr/aztec/src/note/note_getter"
      },
      "49": {
        "source": "use dep::std::hash::{pedersen, pedersen_with_separator};\nuse crate::constants_gen::{GENERATOR_INDEX__UNIQUE_COMMITMENT, GENERATOR_INDEX__SILOED_COMMITMENT};\n\npub fn compute_inner_hash(storage_slot: Field, note_hash: Field) -> Field {\n    // TODO(#1205) Do we need a generator index here?\n    pedersen([storage_slot, note_hash])[0]\n}\n\npub fn compute_siloed_hash(contract_address: Field, inner_note_hash: Field) -> Field {\n    let inputs = [contract_address, inner_note_hash];\n    pedersen_with_separator(inputs, GENERATOR_INDEX__SILOED_COMMITMENT)[0]\n}\n\npub fn compute_unique_hash(nonce: Field, siloed_note_hash: Field) -> Field {\n    let inputs = [nonce, siloed_note_hash];\n    pedersen_with_separator(inputs, GENERATOR_INDEX__UNIQUE_COMMITMENT)[0]\n}\n",
        "path": "/home/maga/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.9.0/yarn-project/aztec-nr/aztec/src/note/note_hash"
      },
      "53": {
        "source": "use crate::note::{\n    note_hash::{compute_inner_hash, compute_siloed_hash, compute_unique_hash},\n    note_header::NoteHeader,\n    note_interface::NoteInterface,\n};\nuse crate::utils::arr_copy_slice;\n\npub fn compute_inner_note_hash<Note, N>(\n    note_interface: NoteInterface<Note, N>,\n    note: Note,\n) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note);\n\n    let compute_note_hash = note_interface.compute_note_hash;\n    let note_hash = compute_note_hash(note);\n\n    compute_inner_hash(header.storage_slot, note_hash)\n}\n\npub fn compute_siloed_note_hash<Note, N>(\n    note_interface: NoteInterface<Note, N>,\n    note_with_header: Note,\n) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note_with_header);\n\n    let inner_note_hash = compute_inner_note_hash(note_interface, note_with_header);\n\n    compute_siloed_hash(header.contract_address, inner_note_hash)\n}\n\npub fn compute_unique_siloed_note_hash<Note, N>(\n    note_interface: NoteInterface<Note, N>,\n    note_with_header: Note,\n) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note_with_header);\n\n    let siloed_note_hash = compute_siloed_note_hash(note_interface, note_with_header);\n\n    compute_unique_hash(header.nonce, siloed_note_hash)\n}\n\npub fn compute_note_hash_for_read_or_nullify<Note, N>(\n    note_interface: NoteInterface<Note, N>,\n    note_with_header: Note,\n) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note_with_header);\n\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1386)\n    if (header.is_transient) {\n        // If a note is transient, we just read the inner_note_hash (kernel will silo by contract address).\n        compute_inner_note_hash(note_interface, note_with_header)\n    } else if (header.nonce == 0) {\n        // If not transient and nonce is zero, that means we are reading a public note.\n        compute_siloed_note_hash(note_interface, note_with_header)\n    } else {\n        // When nonce is nonzero, that means we are reading a settled note (from tree) created in a\n        // previous TX. So we need the unique_siloed_note_hash which has already been hashed with\n        // contract address and then nonce. This hash will match the existing leaf in the private\n        // data tree, so the kernel can just perform a membership check directly on this hash/leaf.\n        compute_unique_siloed_note_hash(note_interface, note_with_header)\n    }\n\n}\n\npub fn compute_note_hash_and_nullifier<Note, N, S>(\n    note_interface: NoteInterface<Note, N>,\n    note_header: NoteHeader,\n    preimage: [Field; S],\n) -> [Field; 4] {\n    let deserialize = note_interface.deserialize;\n    let set_header = note_interface.set_header;\n    let mut note = deserialize(arr_copy_slice(preimage, [0; N], 0));\n    set_header(&mut note, note_header);\n\n    let compute_note_hash = note_interface.compute_note_hash;\n    let note_hash = compute_note_hash(note);\n    let inner_note_hash = compute_inner_hash(note_header.storage_slot, note_hash);\n\n    let siloed_note_hash = compute_siloed_hash(note_header.contract_address, inner_note_hash);\n\n    let unique_siloed_note_hash = compute_unique_hash(note_header.nonce, siloed_note_hash);\n\n    let compute_nullifier = note_interface.compute_nullifier;\n    let inner_nullifier = compute_nullifier(note);\n\n    [inner_note_hash, siloed_note_hash, unique_siloed_note_hash, inner_nullifier]\n}\n",
        "path": "/home/maga/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.9.0/yarn-project/aztec-nr/aztec/src/note/utils"
      },
      "55": {
        "source": "#[oracle(packArguments)]\nfn pack_arguments_oracle<N>(_args: [Field; N]) -> Field {}\n\n// TODO: explain what this does.\nunconstrained pub fn pack_arguments<N>(args: [Field; N]) -> Field {\n    pack_arguments_oracle(args)\n}\n",
        "path": "/home/maga/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.9.0/yarn-project/aztec-nr/aztec/src/oracle/arguments"
      },
      "60": {
        "source": "use crate::types::point::Point;\nuse crate::address::compute_address;\n\n#[oracle(getPublicKey)]\nfn get_public_key_oracle(_address: Field) -> [Field; 3] {}\n\nunconstrained fn get_public_key_internal(address: Field) -> [Field; 3] {\n  get_public_key_oracle(address)\n}\n\npub fn get_public_key(address: Field) -> Point {\n  let result = get_public_key_internal(address);\n  let pub_key_x = result[0];\n  let pub_key_y = result[1];\n  let partial_address = result[2];\n  \n  let calculated_address = compute_address(pub_key_x, pub_key_y, partial_address);\n  assert(calculated_address == address);\n  \n  Point::new(pub_key_x, pub_key_y)\n}\n",
        "path": "/home/maga/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.9.0/yarn-project/aztec-nr/aztec/src/oracle/get_public_key"
      },
      "61": {
        "source": "use crate::oracle::get_public_key::get_public_key;\nuse crate::types::point::Point;\n\n#[oracle(getSecretKey)]\nfn get_secret_key_oracle(\n    _owner: Point,\n) -> [Field; dep::std::grumpkin_scalar::GRUMPKIN_SCALAR_SERIALIZED_LEN] {\n}\n\nunconstrained fn get_secret_key_internal(owner_public_key: Point) -> dep::std::grumpkin_scalar::GrumpkinScalar {\n    dep::std::grumpkin_scalar::deserialize_grumpkin_scalar(get_secret_key_oracle(owner_public_key))\n}\n\npub fn get_secret_key(owner: Field) -> dep::std::grumpkin_scalar::GrumpkinScalar {\n    let owner_public_key = get_public_key(owner);\n    let secret = get_secret_key_internal(owner_public_key);\n\n    // Constrain the owner - Nullifier secret key is currently just the encryption private key so we can constrain\n    // the owner by deriving the public key from the secret key and checking the result.\n    let computed_public_key = dep::std::grumpkin_scalar_mul::grumpkin_fixed_base(secret);\n    assert(owner_public_key.x == computed_public_key[0]);\n    assert(owner_public_key.y == computed_public_key[1]);\n\n    secret\n}\n",
        "path": "/home/maga/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.9.0/yarn-project/aztec-nr/aztec/src/oracle/get_secret_key"
      },
      "63": {
        "source": "\n// contract_address + \n// args_hash +\n// crate::abi::FUNCTION_DATA_SIZE +\n// crate::abi::CALL_CONTEXT_SIZE +\n// = 2 + 4 + 7\nglobal ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE: Field = 13;\n\n#[oracle(enqueuePublicFunctionCall)]\nfn enqueue_public_function_call_oracle(\n    _contract_address: Field, \n    _function_selector: Field, \n    _args_hash: Field,\n) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE] {}\n\nunconstrained pub fn enqueue_public_function_call_internal(\n    contract_address: Field, \n    function_selector: Field,\n    args_hash: Field\n) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE] {\n    enqueue_public_function_call_oracle(\n        contract_address, \n        function_selector, \n        args_hash,\n    )\n}",
        "path": "/home/maga/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.9.0/yarn-project/aztec-nr/aztec/src/oracle/enqueue_public_function_call"
      },
      "65": {
        "source": "use dep::std::option::Option;\nuse crate::note::{\n    note_header::NoteHeader,\n    note_interface::NoteInterface,\n};\nuse crate::utils::arr_copy_slice;\n\n#[oracle(notifyCreatedNote)]\nfn notify_created_note_oracle<N>(\n    _storage_slot: Field,\n    _preimage: [Field; N],\n    _inner_note_hash: Field,\n) -> Field {}\n\nunconstrained pub fn notify_created_note<N>(\n    storage_slot: Field,\n    preimage: [Field; N],\n    inner_note_hash: Field,\n) -> Field {\n    notify_created_note_oracle(storage_slot, preimage, inner_note_hash)\n}\n\n#[oracle(notifyNullifiedNote)]\nfn notify_nullified_note_oracle<N>(\n    _nullifier: Field,\n    _inner_note_hash: Field,\n) -> Field {}\n\nunconstrained pub fn notify_nullified_note<N>(\n    nullifier: Field,\n    inner_note_hash: Field,\n) -> Field {\n    notify_nullified_note_oracle(nullifier, inner_note_hash)\n}\n\n#[oracle(getNotes)]\nfn get_notes_oracle<N, S>(\n    _storage_slot: Field,\n    _num_selects: u8,\n    _select_by: [u8; N],\n    _select_values: [Field; N],\n    _sort_by: [u8; N],\n    _sort_order: [u2; N],\n    _limit: u32,\n    _offset: u32,\n    _return_size: u32,\n    _placeholder_fields: [Field; S],\n) -> [Field; S] {}\n\nunconstrained fn get_notes_oracle_wrapper<N, S>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by: [u8; N],\n    select_values: [Field; N],\n    sort_by: [u8; N],\n    sort_order: [u2; N],\n    limit: u32,\n    offset: u32,\n    mut placeholder_fields: [Field; S],\n)-> [Field; S] {\n    let return_size = placeholder_fields.len() as u32;\n    get_notes_oracle(storage_slot, num_selects, select_by, select_values, sort_by, sort_order, limit, offset, return_size, placeholder_fields)\n}\n\nunconstrained pub fn get_notes<Note, N, M, S, NS>(\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    num_selects: u8,\n    select_by: [u8; M],\n    select_values: [Field; M],\n    sort_by: [u8; M],\n    sort_order: [u2; M],\n    limit: u32,\n    offset: u32,\n    mut placeholder_opt_notes: [Option<Note>; S], // TODO: Remove it and use `limit` to initialize the note array.\n    placeholder_fields: [Field; NS], // TODO: Remove it and use `limit` to initialize the note array.\n) -> [Option<Note>; S] {\n    let fields = get_notes_oracle_wrapper(storage_slot, num_selects, select_by, select_values, sort_by, sort_order, limit, offset, placeholder_fields);\n    let num_notes = fields[0] as u32;\n    let contract_address = fields[1];\n    let deserialize = note_interface.deserialize;\n    let set_header = note_interface.set_header;\n    for i in 0..placeholder_opt_notes.len() {\n        if i as u32 < num_notes {\n            // lengths named as per typescript.\n            let return_header_length: Field = 2; // num_notes & contract_address.\n            let extra_preimage_length: Field = 2; // nonce & is_transient.\n            let read_offset: Field = return_header_length + i * (N + extra_preimage_length);\n            let nonce = fields[read_offset];\n            let is_transient = fields[read_offset + 1] as bool;\n            let header = NoteHeader { contract_address, nonce, storage_slot, is_transient };\n            let preimage = arr_copy_slice(fields, [0; N], read_offset + 2);\n            let mut note = deserialize(preimage);\n            set_header(&mut note, header);\n            placeholder_opt_notes[i] = Option::some(note);\n        };\n    };\n    placeholder_opt_notes\n}\n\n#[oracle(checkNullifierExists)]\nfn check_nullifier_exists_oracle(\n    _inner_nullifier: Field,\n) -> Field {}\n\nunconstrained pub fn check_nullifier_exists(inner_nullifier: Field) -> bool {\n    check_nullifier_exists_oracle(inner_nullifier) == 1\n}",
        "path": "/home/maga/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.9.0/yarn-project/aztec-nr/aztec/src/oracle/notes"
      },
      "66": {
        "source": "\n#[oracle(storageRead)]\nfn storage_read_oracle<N>(\n    _storage_slot: Field,\n    _number_of_elements: Field,\n) -> [Field; N] {}\n\nunconstrained fn storage_read_oracle_wrapper<N>(_storage_slot: Field)-> [Field; N] {\n    storage_read_oracle(_storage_slot, N)\n}\n\npub fn storage_read<T, N>(\n    storage_slot: Field,\n    deserialize: fn ([Field; N]) -> T,\n) -> T {\n    let fields = storage_read_oracle_wrapper(storage_slot);\n    deserialize(fields)\n}\n\n#[oracle(storageWrite)]\nfn storage_write_oracle<N>(\n    _storage_slot: Field,\n    _values: [Field; N],\n) -> [Field; N] {}\n\n// TODO: Remove return value.\nunconstrained pub fn storage_write<N>(\n    storage_slot: Field,\n    fields: [Field; N]\n) {\n    let _hash = storage_write_oracle(storage_slot, fields);\n}",
        "path": "/home/maga/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.9.0/yarn-project/aztec-nr/aztec/src/oracle/storage"
      },
      "69": {
        "source": "use crate::{\n    abi,\n    abi::{\n        PublicCircuitPublicInputs,\n        FunctionData,\n    },\n};\nuse crate::constants_gen::{\n    RETURN_VALUES_LENGTH,\n    GENERATOR_INDEX__CALL_STACK_ITEM,\n};\n\n// oracles\nuse crate::oracle::{\n    enqueue_public_function_call::enqueue_public_function_call_internal,\n};\n\nstruct PublicCallStackItem {\n    contract_address: Field,\n    function_data: FunctionData,\n    public_inputs: PublicCircuitPublicInputs,\n    is_execution_request: bool,\n}\n\nimpl PublicCallStackItem {\n    pub fn hash(self) -> Field {\n        dep::std::hash::pedersen_with_separator([\n            self.contract_address,\n            self.function_data.hash(),\n            self.public_inputs.hash(),\n        ], GENERATOR_INDEX__CALL_STACK_ITEM)[0]\n    }\n}\n\n",
        "path": "/home/maga/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.9.0/yarn-project/aztec-nr/aztec/src/public_call_stack_item"
      },
      "73": {
        "source": "use crate::context::{PrivateContext, PublicContext, Context};\nuse dep::std::option::Option;\n\n// docs:start:map\nstruct Map<V> {\n    context: Context,\n    storage_slot: Field,\n    state_var_constructor: fn(Context, Field) -> V,\n}\n// docs:end:map\n\nimpl<V> Map<V> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        state_var_constructor: fn(Context, Field) -> V,\n    ) -> Map<V> {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Map {\n            context,\n            storage_slot,\n            state_var_constructor,\n        }\n    }\n    // docs:end:new\n\n    // docs:start:at\n    pub fn at(self, key: Field) -> V {\n        // TODO(#1204): use a generator index for the storage slot\n        let derived_storage_slot = dep::std::hash::pedersen([self.storage_slot, key])[0];\n\n        let state_var_constructor = self.state_var_constructor;\n        state_var_constructor(self.context, derived_storage_slot)\n    }\n    // docs:end:at\n}\n",
        "path": "/home/maga/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.9.0/yarn-project/aztec-nr/aztec/src/state_vars/map"
      },
      "74": {
        "source": "use crate::context::{Context};\nuse crate::oracle::storage::storage_read;\nuse crate::oracle::storage::storage_write;\nuse crate::types::type_serialization::TypeSerializationInterface;\nuse dep::std::option::Option;\n\n// docs:start:public_state_struct\nstruct PublicState<T, T_SERIALIZED_LEN> {\n    context: Context,\n    storage_slot: Field,\n    serialization_methods: TypeSerializationInterface<T, T_SERIALIZED_LEN>,\n}\n// docs:end:public_state_struct\n\nimpl<T, T_SERIALIZED_LEN> PublicState<T, T_SERIALIZED_LEN> {\n    // docs:start:public_state_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field,\n        serialization_methods: TypeSerializationInterface<T, T_SERIALIZED_LEN>,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicState {\n            context,\n            storage_slot,\n            serialization_methods,\n        }\n    }\n    // docs:end:public_state_struct_new\n\n    // docs:start:public_state_struct_read\n    pub fn read(self) -> T {\n        assert(self.context.private.is_none(), \"Public state writes only supported in public functions\");\n        storage_read(self.storage_slot, self.serialization_methods.deserialize)\n    }\n    // docs:end:public_state_struct_read\n\n    // docs:start:public_state_struct_write\n    pub fn write(self, value: T) {\n        assert(self.context.private.is_none(), \"Public state writes only supported in public functions\");\n        let serialize = self.serialization_methods.serialize;\n        let fields = serialize(value);\n        storage_write(self.storage_slot, fields);\n    }\n    // docs:end:public_state_struct_write\n}\n",
        "path": "/home/maga/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.9.0/yarn-project/aztec-nr/aztec/src/state_vars/public_state"
      },
      "75": {
        "source": "use dep::std::option::Option;\nuse crate::abi::PublicContextInputs;\nuse crate::constants_gen::{MAX_NOTES_PER_PAGE, MAX_READ_REQUESTS_PER_CALL};\nuse crate::context::{PrivateContext, PublicContext, Context};\nuse crate::note::{\n    lifecycle::{create_note, create_note_hash_from_public, destroy_note},\n    note_getter::{get_notes, view_notes},\n    note_getter_options::NoteGetterOptions,\n    note_header::NoteHeader,\n    note_interface::NoteInterface,\n    note_viewer_options::NoteViewerOptions,\n    utils::compute_note_hash_for_read_or_nullify,\n};\n\n// docs:start:struct\nstruct Set<Note, N> {\n    context: Context,\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n}\n// docs:end:struct\n\nimpl<Note, N> Set<Note, N> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        note_interface: NoteInterface<Note, N>,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Set {\n            context,\n            storage_slot,\n            note_interface,\n        }\n    }\n    // docs:end:new\n\n    // docs:start:insert\n    pub fn insert(self, note: &mut Note) {\n        create_note(\n            self.context.private.unwrap(),\n            self.storage_slot,\n            note,\n            self.note_interface,\n        );\n    }\n    // docs:end:insert\n\n    // docs:start:insert_from_public\n    pub fn insert_from_public(self, note: &mut Note) {\n        create_note_hash_from_public(\n            self.context.public.unwrap(),\n            self.storage_slot,\n            note,\n            self.note_interface,\n        );\n    }\n    // docs:end:insert_from_public\n    \n    // DEPRECATED\n    fn assert_contains_and_remove(_self: Self, _note: &mut Note, _nonce: Field) {\n        assert(false, \"`assert_contains_and_remove` has been deprecated. Please call PXE.addNote() to add a note to the database. Then use Set.get_notes() and Set.remove() in your contract to verify and remove a note.\");\n    }\n\n    // DEPRECATED\n    fn assert_contains_and_remove_publicly_created(_self: Self, _note: &mut Note) {\n        assert(false, \"`assert_contains_and_remove_publicly_created` has been deprecated. Please call PXE.addNote() to add a note to the database. Then use Set.get_notes() and Set.remove() in your contract to verify and remove a note.\");\n    }\n\n    // docs:start:remove\n    pub fn remove(self, note: Note) {\n        let context = self.context.private.unwrap();\n        let note_hash = compute_note_hash_for_read_or_nullify(self.note_interface, note);\n        let has_been_read = context.read_requests.any(|r| r == note_hash);\n        assert(has_been_read, \"Can only remove a note that has been read from the set.\");\n\n        destroy_note(\n            context,\n            note,\n            self.note_interface,\n        );\n    }\n    // docs:end:remove\n\n    // docs:start:get_notes\n    pub fn get_notes<FILTER_ARGS>(\n        self,\n        options: NoteGetterOptions<Note, N, FILTER_ARGS>,\n    ) -> [Option<Note>; MAX_READ_REQUESTS_PER_CALL] {\n        let storage_slot = self.storage_slot;\n        let opt_notes = get_notes(\n            self.context.private.unwrap(),\n            storage_slot,\n            self.note_interface,\n            options,\n        );\n        opt_notes\n    }\n    // docs:end:get_notes\n\n    // docs:start:view_notes\n    unconstrained pub fn view_notes(\n        self,\n        options: NoteViewerOptions<Note, N>,\n    ) -> [Option<Note>; MAX_NOTES_PER_PAGE] {\n        view_notes(self.storage_slot, self.note_interface, options)\n    }\n    // docs:end:view_notes\n}\n",
        "path": "/home/maga/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.9.0/yarn-project/aztec-nr/aztec/src/state_vars/set"
      },
      "80": {
        "source": "\nstruct BoundedVec<T, MaxLen> {\n    storage: [T; MaxLen],\n    len: Field,\n}\n\nimpl<T, MaxLen> BoundedVec<T, MaxLen> {\n    pub fn new(initial_value: T) -> Self {\n        BoundedVec { storage: [initial_value; MaxLen], len: 0 }\n    }\n\n    pub fn get(mut self: Self, index: Field) -> T {\n        assert(index as u64 < self.len as u64);\n        self.storage[index]\n    }\n\n    pub fn get_unchecked(mut self: Self, index: Field) -> T {\n        self.storage[index]\n    }\n\n    pub fn push(&mut self, elem: T) {\n        assert(self.len as u64 < MaxLen as u64);\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    pub fn push_array<Len>(&mut self, array: [T; Len]) {\n        let newLen = self.len + array.len();\n        assert(newLen as u64 <= MaxLen as u64);\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = newLen;\n    }\n\n    pub fn pop(&mut self) -> T {\n        assert(self.len as u64 > 0);\n\n        let elem = self.storage[self.len - 1];\n        self.len -= 1;\n        elem\n    }\n\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        let mut exceeded_len = false;\n        for i in 0..MaxLen {\n            exceeded_len |= i == self.len;\n            if (!exceeded_len) {\n                ret |= predicate(self.storage[i]);\n            }\n        }\n        ret\n    }\n}\n\n#[test]\nfn test_vec_push_pop() {\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(0);\n    assert(vec.len == 0);\n    vec.push(2);\n    assert(vec.len == 1);\n    vec.push(4);\n    assert(vec.len == 2);\n    vec.push(6);\n    assert(vec.len == 3);\n    let x = vec.pop();\n    assert(x == 6);\n    assert(vec.len == 2);\n    assert(vec.get(0) == 2);\n    assert(vec.get(1) == 4);\n}\n\n#[test]\nfn test_vec_push_array() {\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(0);\n    vec.push_array([2, 4]);\n    assert(vec.len == 2);\n    assert(vec.get(0) == 2);\n    assert(vec.get(1) == 4);\n}\n\n#[test(should_fail)]\nfn test_vec_get_out_of_bound() {\n    let mut vec: BoundedVec<Field, 2> = BoundedVec::new(0);\n    vec.push_array([2, 4]);\n    let _x = vec.get(2);\n}\n\n#[test(should_fail)]\nfn test_vec_get_not_declared() {\n    let mut vec: BoundedVec<Field, 2> = BoundedVec::new(0);\n    vec.push_array([2]);\n    let _x = vec.get(1);\n}\n\n#[test(should_fail)]\nfn test_vec_get_uninitialized() {\n    let mut vec: BoundedVec<Field, 2> = BoundedVec::new(0);\n    let _x = vec.get(0);\n}\n\n#[test(should_fail)]\nfn test_vec_push_overflow() {\n    let mut vec: BoundedVec<Field, 1> = BoundedVec::new(0);\n    vec.push(1);\n    vec.push(2);\n}\n\n#[test]\nfn test_vec_any() {\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(0);\n    vec.push_array([2, 4, 6]);\n    assert(vec.any(|v| v == 2) == true);\n    assert(vec.any(|v| v == 4) == true);\n    assert(vec.any(|v| v == 6) == true);\n    assert(vec.any(|v| v == 3) == false);\n}\n\n#[test]\nfn test_vec_any_not_default() {\n    let default_value = 1;\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(default_value);\n    vec.push_array([2, 4]);\n    assert(vec.any(|v| v == default_value) == false);\n}",
        "path": "/home/maga/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.9.0/yarn-project/aztec-nr/aztec/src/types/vec"
      },
      "85": {
        "source": "use crate::types::type_serialization::TypeSerializationInterface;\nuse crate::types::address::AztecAddress;\n\nglobal AZTEC_ADDRESS_SERIALIZED_LEN: Field = 1;\n\nfn deserialize(fields: [Field; AZTEC_ADDRESS_SERIALIZED_LEN]) -> AztecAddress {\n    AztecAddress::new(fields[0])\n}\n\nfn serialize(value: AztecAddress) -> [Field; AZTEC_ADDRESS_SERIALIZED_LEN] {\n    [value.address]\n}\n\nglobal AztecAddressSerializationMethods = TypeSerializationInterface {\n    deserialize,\n    serialize,\n};",
        "path": "/home/maga/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.9.0/yarn-project/aztec-nr/aztec/src/types/type_serialization/aztec_address_serialization"
      },
      "86": {
        "source": "pub fn arr_copy_slice<T, N, M>(\n    src: [T; N],\n    mut dst: [T; M],\n    offset: Field,\n) -> [T; M] {\n    for i in 0..dst.len() {\n        dst[i] = src[i + offset];\n    }\n    dst\n}\n\npub fn field_from_bytes<N>(bytes: [u8; N], big_endian: bool) -> Field {\n    assert(bytes.len() as u32 < 32, \"field_from_bytes: N must be less than 32\");\n    let mut as_field = 0;\n    let mut offset = 1;\n    for i in 0..N {\n        let mut index = i;\n        if big_endian {\n            index = N - i - 1;\n        }\n        as_field += (bytes[index] as Field) * offset;\n        offset *= 256;\n    }\n\n    as_field\n}",
        "path": "/home/maga/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.9.0/yarn-project/aztec-nr/aztec/src/utils"
      },
      "87": {
        "source": "struct SafeU120 {\n    value: u120,\n}\n\nimpl SafeU120 {\n    pub fn min() -> Self {\n        Self {\n            value: 0\n        }\n    }\n\n    pub fn max() -> Self {\n        Self {\n            value: 0xffffffffffffffffffffffffffffff\n        }\n    }\n\n    pub fn new(\n        value: Field,\n    ) -> Self {\n        // Check that it actually will fit. Spending a lot of constraints here :grimacing:\n        let bytes = value.to_be_bytes(32);\n        for i in 0..17 {\n            assert(bytes[i] == 0, \"Value too large for SafeU120\");\n        }\n        Self {\n            value: value as u120\n        }\n    }\n\n    pub fn is_zero(\n        self: Self,\n    ) -> bool {\n        self.value == 0\n    }\n\n    pub fn eq(\n        self: Self,\n        other: Self\n    ) -> bool {\n        self.value == other.value\n    }\n\n    pub fn lt(self: Self, other: Self) -> bool {\n        self.value < other.value\n    }\n\n    pub fn le(self: Self, other: Self) -> bool {\n        self.value <= other.value\n    }\n\n    pub fn gt(self: Self, other: Self) -> bool {\n        self.value > other.value\n    }\n\n    pub fn ge(self: Self, other: Self) -> bool {\n        self.value >= other.value\n    }\n\n    pub fn sub(\n      self: Self,\n      b: Self,\n    ) -> Self {\n        assert(self.value >= b.value, \"Underflow\");\n        Self {\n            value: self.value - b.value\n        }\n    }\n\n    pub fn add(\n        self: Self,\n        b: Self,\n    ) -> Self {\n        let c: u120 = self.value + b.value;\n        assert(c >= self.value, \"Overflow\");\n        Self {\n            value: c\n        }\n    }\n\n    pub fn mul(\n        self: Self,\n        b: Self,\n    ) -> Self {\n        let c: u120 = self.value * b.value;\n        if !b.is_zero() {\n            assert(c / b.value == self.value, \"Overflow\");\n        }\n        Self {\n            value: c\n        }\n    }\n\n    pub fn div(\n        self: Self,\n        b: Self,\n    ) -> Self {\n        assert(!b.is_zero(), \"Divide by zero\");\n        Self {\n            value: self.value / b.value\n        }\n    }\n\n    pub fn mul_div(\n        self: Self,\n        b: Self,\n        divisor: Self\n    ) -> Self {\n        self.mul(b).div(divisor)\n    }\n\n    pub fn mul_div_up(\n        self: Self,\n        b: Self,\n        divisor: Self\n    ) -> Self {\n        let c = self.mul(b);\n        assert(!divisor.is_zero(), \"Divide by zero\");\n        let adder = ((self.value * b.value % divisor.value) as u120 > 0) as u120;\n        c.div(divisor).add(Self {value: adder})\n    }\n\n    // todo: implement mul_div with 240 bit intermediate values.\n}\n\n#[test]\nfn test_init() {\n    let a = SafeU120::new(1);\n    assert(a.value == 1);\n}\n\n#[test]\nfn test_init_max() {\n    let a = SafeU120::max();\n    assert(a.value == 0xffffffffffffffffffffffffffffff);\n}\n\n#[test]\nfn test_init_min() {\n    let a = SafeU120::min();\n    assert(a.value == 0);\n}\n\n#[test]\nfn test_is_zero() {\n    let a = SafeU120::min();\n    assert(a.value == 0);\n    assert(a.is_zero() == true);\n}\n\n#[test]\nfn test_eq() {\n    let a = SafeU120::new(1);\n    let b = SafeU120::new(1);\n    assert(a.eq(b));\n}\n\n#[test]\nfn test_lt() {\n    let a = SafeU120::new(1);\n    let b = SafeU120::new(2);\n    assert(a.lt(b));\n    assert(b.lt(a) == false);\n}\n\n\n#[test]\nfn test_le() {\n    let a = SafeU120::new(2);\n    let b = SafeU120::new(2);\n    let c = SafeU120::new(5);\n    assert(a.le(b));\n    assert(a.le(c));\n    assert(c.le(a) == false);\n}\n\n#[test]\nfn test_gt() {\n    let a = SafeU120::new(1);\n    let b = SafeU120::new(2);\n    assert(b.gt(a));\n    assert(a.gt(b) == false);\n}\n\n\n#[test]\nfn test_ge() {\n    let a = SafeU120::new(2);\n    let b = SafeU120::new(2);\n    let c = SafeU120::new(5);\n    assert(a.ge(b));\n    assert(a.ge(c) == false);\n    assert(c.ge(a));\n}\n\n#[test(should_fail)]\nfn test_init_too_large() {\n    let b = SafeU120::max().value as Field + 1; // max + 1\n    let _a = SafeU120::new(b);\n}\n\n#[test]\nfn test_add() {\n    let a = SafeU120::new(1);\n    let b = SafeU120::new(2);\n    let c = SafeU120::add(a, b);\n    assert(c.value == 3);\n}\n\n#[test(should_fail)]\nfn test_add_overflow() {\n    let a = SafeU120::max();\n    let b = SafeU120::new(1);\n    let _c = SafeU120::add(a, b);\n}\n\n#[test]\nfn test_sub() {\n    let a = SafeU120::new(2);\n    let b = SafeU120::new(1);\n    let c = SafeU120::sub(a, b);\n    assert(c.value == 1);\n}\n\n#[test(should_fail)]\nfn test_sub_underflow() {\n    let a = SafeU120::new(1);\n    let b = SafeU120::new(2);\n    let _c = SafeU120::sub(a, b);\n}\n\n#[test]\nfn test_mul() {\n    let a = SafeU120::new(2);\n    let b = SafeU120::new(3);\n    let c = SafeU120::mul(a, b);\n    assert(c.value == 6);\n}\n\n#[test(should_fail)]\nfn test_mul_overflow() {\n    let a = SafeU120::max();\n    let b = SafeU120::new(2);\n    let _c = SafeU120::mul(a, b);\n}\n\n#[test]\nfn test_div() {\n    let a = SafeU120::new(6);\n    let b = SafeU120::new(3);\n    let c = SafeU120::div(a, b);\n    assert(c.value == 2);\n}\n\n#[test(should_fail)]\nfn test_div_by_zero() {\n    let a = SafeU120::new(6);\n    let b = SafeU120::new(0);\n    let _c = SafeU120::div(a, b);\n}\n\n#[test]\nfn test_mul_div() {\n    let a = SafeU120::new(6);\n    let b = SafeU120::new(3);\n    let c = SafeU120::new(2);\n    let d = SafeU120::mul_div(a, b, c);\n    assert(d.value == 9);\n}\n\n#[test(should_fail)]\nfn test_mul_div_zero_divisor() {\n    let a = SafeU120::new(6);\n    let b = SafeU120::new(3);\n    let c = SafeU120::new(0);\n    let _d = SafeU120::mul_div(a, b, c);\n}\n\n#[test(should_fail)]\nfn test_mul_div_ghost_overflow() {\n    let a = SafeU120::max();\n    let b = SafeU120::new(2);\n    let c = SafeU120::new(4);\n    let _d = SafeU120::mul_div(a, b, c);\n}\n\n#[test]\nfn test_mul_div_up_rounding() {\n    let a = SafeU120::new(6);\n    let b = SafeU120::new(3);\n    let c = SafeU120::new(5);\n    let d = SafeU120::mul_div_up(a, b, c);\n    assert(d.value == 4);\n}\n\n#[test]\nfn test_mul_div_up_non_rounding() {\n    let a = SafeU120::new(6);\n    let b = SafeU120::new(3);\n    let c = SafeU120::new(2);\n    let d = SafeU120::mul_div_up(a, b, c);\n    assert(d.value == 9);\n}\n\n\n#[test(should_fail)]\nfn test_mul_div_up_ghost_overflow() {\n    let a = SafeU120::max();\n    let b = SafeU120::new(2);\n    let c = SafeU120::new(9);\n    let _d = SafeU120::mul_div_up(a, b, c);\n}\n\n// It should not be possible for us to overflow `mul_div_up` through the adder, since that require the divisor to be 1\n// since we otherwise would not be at the max value. If divisor is 1, adder is 0.\n#[test(should_fail)]\nfn test_mul_div_up_zero_divisor() {\n    let a = SafeU120::new(6);\n    let b = SafeU120::new(3);\n    let c = SafeU120::new(0);\n    let _d = SafeU120::mul_div_up(a, b, c);\n}\n",
        "path": "/home/maga/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.9.0/yarn-project/aztec-nr/safe-math/src/safe_u120"
      },
      "93": {
        "source": "use dep::aztec::types::type_serialization::TypeSerializationInterface;\n\nstruct Market {\n    totalLongs: u120,\n    totalShorts: u120,\n    maxTotalLongs: u120,\n    maxTotalShorts: u120,\n    maxLeverage: u32,\n    openFeeRate: u64,\n    baseSpreadRate: u64,\n    borrowBaseRatePerHour: u64\n}\n\nglobal MARKET_SERIALIZED_LEN: Field = 8;\nglobal HUNDRED_PERCENT: u64 = 1000000000000;\n\n\nfn deserialize(fields: [Field; MARKET_SERIALIZED_LEN]) -> Market {\n    Market {\n        totalLongs: fields[0] as u120,\n        totalShorts: fields[1] as u120,\n        maxTotalLongs: fields[2] as u120,\n        maxTotalShorts: fields[3] as u120,\n        maxLeverage: fields[4] as u32,\n        openFeeRate: fields[5] as u64,\n        baseSpreadRate: fields[6] as u64,\n        borrowBaseRatePerHour: fields[7] as u64\n    }\n}\n\nfn serialize(market: Market) -> [Field; MARKET_SERIALIZED_LEN] {\n    [\n        market.totalLongs as Field,\n        market.totalShorts as Field,\n        market.maxTotalLongs as Field,\n        market.maxTotalShorts as Field,\n        market.maxLeverage as Field,\n        market.openFeeRate as Field,\n        market.baseSpreadRate as Field,\n        market.borrowBaseRatePerHour as Field,\n    ]\n}\n\nimpl Market {\n    fn serialize(self: Self) -> [Field; MARKET_SERIALIZED_LEN] {\n        serialize(self)\n    }\n}\n\nglobal MarketSerializationMethods = TypeSerializationInterface {\n    deserialize,\n    serialize\n};",
        "path": "/home/maga/projects/noir-contracts/src/contracts/src/types/market"
      },
      "94": {
        "source": "use dep::aztec::context::{PrivateContext, PublicContext, Context};\nuse dep::aztec::types::address::AztecAddress;\nuse dep::std::option::Option;\nuse dep::aztec::note::{\n    utils::compute_note_hash_for_read_or_nullify,\n    note_header::NoteHeader,\n    note_interface::NoteInterface,\n};\nuse dep::aztec::oracle::get_secret_key::get_secret_key;\nuse dep::aztec::hash::{compute_secret_hash};\n\n\nstruct PositionNote {\n    id: u32,\n    marketIdx: u8,\n    posType: u8, // 0 - long, 1 - short\n    initialCollateral: u120,\n    openFee: u120,\n    openPrice: u120, // price after spread apply\n    markPrice: u120, // market price on moment of positionNote creation\n    leverage: u32,\n    borrowBaseRatePerHour: u64, // we store rate on moment of positionNote creation because rate could be changed in market config\n    liquidationThresholdRate: u64,\n    createdAt: u32,\n    owner: Field,\n\n    // this fields will exists only on 'request' phase of positionNote\n    // we need it because we need 1 mega-struct because of compute_note_hash_and_nullifier can deserialize only 1 type of notes\n    secret_hash: Field,\n    secret: Field,\n\n    header: NoteHeader\n}\n\nglobal POSITION_NOTE_SERIALIZED_LEN: Field = 13;\nglobal LIQUIDATION_THRESHOLD_RATE: u64 = 100000000000; // 10%\n\n\nimpl PositionNote {\n    pub fn new(\n        id: u32,\n        marketIdx: u8,\n        posType: u8,\n        initialCollateral: u120,\n        openFee: u120,\n        openPrice: u120,\n        markPrice: u120,\n        leverage: u32,\n        borrowBaseRatePerHour: u64,\n        liquidationThresholdRate: u64,\n        createdAt: u32,\n        owner: Field,\n        secret_hash: Field\n    ) -> Self {\n        Self {\n            id: id,\n            marketIdx: marketIdx,\n            posType: posType,\n            initialCollateral: initialCollateral,\n            openFee: openFee,\n            openPrice: openPrice,\n            markPrice: markPrice,\n            leverage: leverage,\n            borrowBaseRatePerHour: borrowBaseRatePerHour,\n            liquidationThresholdRate: liquidationThresholdRate,\n            createdAt: createdAt,\n            owner: owner,\n            secret_hash: secret_hash,\n            secret: 0,\n            header: NoteHeader::empty()\n        }\n    }\n\n    pub fn serialize(self: Self) -> [Field; POSITION_NOTE_SERIALIZED_LEN] {\n        [\n            self.id as Field,\n            self.marketIdx as Field,\n            self.posType as Field,\n            self.initialCollateral as Field,\n            self.openFee as Field,\n            self.openPrice as Field,\n            self.markPrice as Field,\n            self.leverage as Field,\n            self.borrowBaseRatePerHour as Field,\n            self.liquidationThresholdRate as Field,\n            self.createdAt as Field,\n            self.owner,\n            self.secret_hash\n        ]\n    }\n\n    pub fn deserialize(preimage: [Field; POSITION_NOTE_SERIALIZED_LEN]) -> Self {\n        PositionNote {\n            id: preimage[0] as u32,\n            marketIdx: preimage[1] as u8,\n            posType: preimage[2] as u8,\n            initialCollateral: preimage[3] as u120,\n            openFee: preimage[4] as u120,\n            openPrice: preimage[5] as u120,\n            markPrice: preimage[6] as u120,\n            leverage: preimage[7] as u32,\n            borrowBaseRatePerHour: preimage[8] as u64,\n            liquidationThresholdRate: preimage[9] as u64,\n            createdAt: preimage[10] as u32,\n            owner: preimage[11],\n            secret_hash: preimage[12],\n            secret: 0,\n            header: NoteHeader::empty()\n        }\n    }\n\n    pub fn compute_note_hash(self) -> Field {\n        dep::std::hash::pedersen(self.serialize())[0]\n    }\n\n    pub fn compute_nullifier(self) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_read_or_nullify(PositionNoteSerializationMethods, self);\n        let secret = get_secret_key(self.owner);\n        dep::std::hash::pedersen([\n            note_hash_for_nullify,\n            secret.low,\n            secret.high,\n        ])[0]\n    }\n\n    pub fn new_from_secret(\n        id: u32,\n        marketIdx: u8,\n        posType: u8,\n        initialCollateral: u120,\n        openFee: u120,\n        openPrice: u120,\n        markPrice: u120,\n        leverage: u32,\n        borrowBaseRatePerHour: u64,\n        liquidationThresholdRate: u64,\n        createdAt: u32,\n        owner: Field,\n        secret: Field\n    ) -> Self {\n         PositionNote {\n            id: id,\n            marketIdx: marketIdx,\n            posType: posType,\n            initialCollateral: initialCollateral,\n            openFee: openFee,\n            openPrice: openPrice,\n            markPrice: markPrice,\n            leverage: leverage,\n            borrowBaseRatePerHour: borrowBaseRatePerHour,\n            liquidationThresholdRate: liquidationThresholdRate,\n            createdAt: createdAt,\n            owner: owner,\n            secret_hash: compute_secret_hash(secret),\n            secret: secret,\n            header: NoteHeader::empty()\n        }\n    }\n\n    // note checker\n    pub fn knows_secret(self, secret: Field) {\n        let hash = compute_secret_hash(secret);\n        assert(self.secret_hash == hash);\n    }\n\n    pub fn set_header(&mut self, header: NoteHeader) {\n        self.header = header;\n    }\n}\n\nfn deserialize(preimage: [Field; POSITION_NOTE_SERIALIZED_LEN]) -> PositionNote {\n    PositionNote::deserialize(preimage)\n}\n\nfn serialize(note: PositionNote) -> [Field; POSITION_NOTE_SERIALIZED_LEN] {\n    note.serialize()\n}\n\nfn compute_note_hash(note: PositionNote) -> Field {\n    note.compute_note_hash()\n}\n\nfn compute_nullifier(note: PositionNote) -> Field {\n    note.compute_nullifier()\n}\n\nfn get_header(note: PositionNote) -> NoteHeader {\n    note.header\n}\n\nfn set_header(note: &mut PositionNote, header: NoteHeader) {\n    note.set_header(header)\n}\n\nglobal PositionNoteSerializationMethods = NoteInterface {\n    deserialize,\n    serialize,\n    compute_note_hash,\n    compute_nullifier,\n    get_header,\n    set_header,\n};\n",
        "path": "/home/maga/projects/noir-contracts/src/contracts/src/types/position_note"
      },
      "95": {
        "source": "use dep::aztec::types::type_serialization::TypeSerializationInterface;\nuse dep::safe_math::SafeU120;\n\nglobal SAFE_U120_SERIALIZED_LEN: Field = 1;\n\n// This is safe when reading from storage IF only correct safeu120 was written to storage\nfn deserializeU120(fields: [Field; SAFE_U120_SERIALIZED_LEN]) -> SafeU120 {\n    SafeU120{value: fields[0] as u120}\n}\n\nfn serializeU120(value: SafeU120) -> [Field; SAFE_U120_SERIALIZED_LEN] {\n    [value.value as Field]\n}\n\nglobal SafeU120SerializationMethods = TypeSerializationInterface {\n    deserialize: deserializeU120,\n    serialize: serializeU120,\n};",
        "path": "/home/maga/projects/noir-contracts/src/contracts/src/types/safe_u120_serialization"
      },
      "96": {
        "source": "use dep::aztec::context::{PrivateContext, PublicContext, Context};\nuse dep::aztec::types::address::AztecAddress;\nuse dep::std::option::Option;\nuse crate::types::position_set::PositionSet;\n\n\nstruct PositionMap {\n    context: Context,\n    storage_slot: Field,\n}\n\n\nimpl PositionMap {\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Self {\n            context,\n            storage_slot,\n        }\n    }\n\n    pub fn at(self, owner: AztecAddress) -> PositionSet {\n        let derived_storage_slot = dep::std::hash::pedersen([self.storage_slot, owner.address])[0];\n        PositionSet::new(self.context, owner, derived_storage_slot)\n    }\n}\n",
        "path": "/home/maga/projects/noir-contracts/src/contracts/src/types/position_map"
      },
      "97": {
        "source": "use dep::std::option::Option;\nuse dep::aztec::{\n  context::Context,\n  state_vars::set::Set,\n  log::emit_encrypted_log,\n  types::address::AztecAddress,\n};\nuse dep::aztec::note::{\n    note_getter_options::{NoteGetterOptions}\n};\nuse dep::aztec::oracle::{\n    get_public_key::get_public_key,\n};\nuse crate::types::position_note::{PositionNote, PositionNoteSerializationMethods, POSITION_NOTE_SERIALIZED_LEN};\n\n\nstruct PositionSet {\n  context: Context,\n  owner: AztecAddress,\n  set: Set<PositionNote, POSITION_NOTE_SERIALIZED_LEN>\n}\n\n\nimpl PositionSet {\n  pub fn new(context: Context, owner: AztecAddress, storage_slot: Field) -> Self {\n    assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n    let set = Set {\n        context,\n        storage_slot,\n        note_interface: PositionNoteSerializationMethods,\n    };\n    Self {\n        context,\n        owner,\n        set,\n    }\n  }\n\n    pub fn add(self: Self, position: &mut PositionNote) {\n        self.set.insert(position);\n\n        let context = self.context.private.unwrap();\n        let application_contract_address = context.this_address();\n        let encryption_pub_key = get_public_key(self.owner.address);\n        let encrypted_data = position.serialize();\n\n        emit_encrypted_log(\n            context,\n            application_contract_address,\n            self.set.storage_slot,\n            encryption_pub_key,\n            encrypted_data,\n        );\n    }\n\n    pub fn remove(self: Self, position_id: Field) {\n        let options = NoteGetterOptions::new().select(0, position_id).set_limit(1);\n        let maybe_notes = self.set.get_notes(options);\n        if maybe_notes[0].is_some() {\n            let note = maybe_notes[0].unwrap_unchecked();\n            self.set.remove(note);\n        }\n        \n    }\n}\n",
        "path": "/home/maga/projects/noir-contracts/src/contracts/src/types/position_set"
      }
    }
  }
}