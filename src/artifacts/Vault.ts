
/* Autogenerated file, do not edit! */

/* eslint-disable */
import { AztecAddress, CompleteAddress, Contract, ContractBase, ContractFunctionInteraction, ContractMethod, DeployMethod, EthAddress, FieldLike, AztecAddressLike, EthAddressLike, Wallet } from '@aztec/aztec.js';
import { Fr, Point } from '@aztec/foundation/fields';
import { PXE, PublicKey } from '@aztec/types';
import { ContractArtifact } from '@aztec/foundation/abi';
import VaultContractArtifactJson from './Vault.json' assert { type: 'json' };
export const VaultContractArtifact = VaultContractArtifactJson as ContractArtifact;

/**
 * Type-safe interface for contract Vault;
 */
export class VaultContract extends ContractBase {
  
  private constructor(
    completeAddress: CompleteAddress,
    wallet: Wallet,
    portalContract = EthAddress.ZERO
  ) {
    super(completeAddress, VaultContractArtifact, wallet, portalContract);
  }
  

  
  /**
   * Creates a contract instance.
   * @param address - The deployed contract's address.
   * @param wallet - The wallet to use when interacting with the contract.
   * @returns A promise that resolves to a new Contract instance.
   */
  public static async at(
    address: AztecAddress,
    wallet: Wallet,
  ) {
    return Contract.at(address, VaultContract.artifact, wallet) as Promise<VaultContract>;
  }

  
  /**
   * Creates a tx to deploy a new instance of this contract.
   */
  public static deploy(pxe: PXE, admin: AztecAddressLike, liquidity: FieldLike) {
    return new DeployMethod<VaultContract>(Point.ZERO, pxe, VaultContractArtifact, Array.from(arguments).slice(1));
  }

  /**
   * Creates a tx to deploy a new instance of this contract using the specified public key to derive the address.
   */
  public static deployWithPublicKey(pxe: PXE, publicKey: PublicKey, admin: AztecAddressLike, liquidity: FieldLike) {
    return new DeployMethod<VaultContract>(publicKey, pxe, VaultContractArtifact, Array.from(arguments).slice(2));
  }
  

  
  /**
   * Returns this contract's artifact.
   */
  public static get artifact(): ContractArtifact {
    return VaultContractArtifact;
  }
  

  /** Type-safe wrappers for the public methods exposed by the contract. */
  public methods!: {
    
    /** _initialize(new_admin: struct, initial_liquidity: field) */
    _initialize: ((new_admin: AztecAddressLike, initial_liquidity: FieldLike) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;

    /** admin() */
    admin: (() => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;

    /** last_pos_id(user: field) */
    last_pos_id: ((user: FieldLike) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;

    /** liquidity() */
    liquidity: (() => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;

    /** market(market_id: field) */
    market: ((market_id: FieldLike) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;

    /** position(user: field, pos_id: field) */
    position: ((user: FieldLike, pos_id: FieldLike) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;
  };
}
